<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutCompanyAccounts.Text" xml:space="preserve">
    <value>About Company Accounts</value>
  </data>
  <data name="AboutCompanyPara1.Text" xml:space="preserve">
    <value>Company Accounts must be verified offline. Accepting a company account as payment is the same as accepting cash and the system will release the order for shipping.</value>
  </data>
  <data name="AboutPo.Text" xml:space="preserve">
    <value>About Purchase Orders</value>
  </data>
  <data name="AboutPoPara1.Text" xml:space="preserve">
    <value>A purchase order is a promise made by a company to pay the invoiced amount. Accepting a PO is the same as accepting cash and the system will release the order for shipping. It is your responsibility to send an invoice to the customer and collect payment on the PO.</value>
  </data>
  <data name="AboutPoPara2.Text" xml:space="preserve">
    <value>Before accepting a PO, make sure the company has a good credit rating. Once accepted you can't undo the credit to the order.</value>
  </data>
  <data name="AcceptCompanyAccount.Text" xml:space="preserve">
    <value>Accept Company Account</value>
  </data>
  <data name="AcceptPurchaseOrder.Text" xml:space="preserve">
    <value>Accept Purchase Order</value>
  </data>
  <data name="AccountNumber.Text" xml:space="preserve">
    <value>Account Number</value>
  </data>
  <data name="AddCompanyAccountInformation.Text" xml:space="preserve">
    <value>Add Company Account Information</value>
  </data>
  <data name="AddNewCard.Text" xml:space="preserve">
    <value>Add a New Card</value>
  </data>
  <data name="AddPo.Text" xml:space="preserve">
    <value>Add Purchase Order Information</value>
  </data>
  <data name="Amount.Text" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="CaptureHold.Text" xml:space="preserve">
    <value>Capture Hold</value>
  </data>
  <data name="Card.Text" xml:space="preserve">
    <value>Card</value>
  </data>
  <data name="Cash.Text" xml:space="preserve">
    <value>Cash</value>
  </data>
  <data name="Charge.Text" xml:space="preserve">
    <value>Charge</value>
  </data>
  <data name="ChargeCard.Text" xml:space="preserve">
    <value>Charge Card</value>
  </data>
  <data name="ChargeGiftCard.Text" xml:space="preserve">
    <value>Charge Gift Card</value>
  </data>
  <data name="Check.Text" xml:space="preserve">
    <value>Check</value>
  </data>
  <data name="CheckBalance.Text" xml:space="preserve">
    <value>Check Balance</value>
  </data>
  <data name="CheckNumber.Text" xml:space="preserve">
    <value>Check Number</value>
  </data>
  <data name="CoAccount.Text" xml:space="preserve">
    <value>Co. Account</value>
  </data>
  <data name="CompanyAccount.Text" xml:space="preserve">
    <value>Company Account</value>
  </data>
  <data name="CreditCards.Text" xml:space="preserve">
    <value>Credit Cards</value>
  </data>
  <data name="GiftCardBalanaceError.Text" xml:space="preserve">
    <value>Unable to check balance</value>
  </data>
  <data name="GiftCardBalanceCheck.Text" xml:space="preserve">
    <value>Gift Card Balance Check</value>
  </data>
  <data name="GiftCardBalane.Text" xml:space="preserve">
    <value>The card balance is {0} as of {1}</value>
  </data>
  <data name="GiftCardHolds.Text" xml:space="preserve">
    <value>Gift Card Holds</value>
  </data>
  <data name="GiftCardRefunds.Text" xml:space="preserve">
    <value>Gift Card Refunds</value>
  </data>
  <data name="GiftCards.Text" xml:space="preserve">
    <value>Gift Card</value>
  </data>
  <data name="Hold.Text" xml:space="preserve">
    <value>Hold</value>
  </data>
  <data name="HoldFunds.Text" xml:space="preserve">
    <value>Hold Funds</value>
  </data>
  <data name="HoldGiftCard.Text" xml:space="preserve">
    <value>Hold Gift Card</value>
  </data>
  <data name="HoldPoints.Text" xml:space="preserve">
    <value>Hold Points</value>
  </data>
  <data name="NewCharges.Text" xml:space="preserve">
    <value>New Charges</value>
  </data>
  <data name="NewGiftCardPayment.Text" xml:space="preserve">
    <value>New Gift Card Payment</value>
  </data>
  <data name="NoChargesRefund.Text" xml:space="preserve">
    <value>No Charges to Refund</value>
  </data>
  <data name="NoCoAcctsFound.Text" xml:space="preserve">
    <value>No Company Accounts Found</value>
  </data>
  <data name="NoPendingHolds.Text" xml:space="preserve">
    <value>No Pending Holds</value>
  </data>
  <data name="NoPosFound.Text" xml:space="preserve">
    <value>No Purchase Orders Found</value>
  </data>
  <data name="NoSavedCards.Text" xml:space="preserve">
    <value>No Saved Cards</value>
  </data>
  <data name="PayPalExpressHolds.Text" xml:space="preserve">
    <value>PayPal Express Holds</value>
  </data>
  <data name="PayPalExpressRefunds.Text" xml:space="preserve">
    <value>PayPal Express Refunds</value>
  </data>
  <data name="PayWithPoints.Text" xml:space="preserve">
    <value>Pay With Points</value>
  </data>
  <data name="PendingHolds.Text" xml:space="preserve">
    <value>Pending Holds</value>
  </data>
  <data name="PointsAvailable.Text" xml:space="preserve">
    <value>Points Available</value>
  </data>
  <data name="PointsOnHold.Text" xml:space="preserve">
    <value>Points On Hold</value>
  </data>
  <data name="PoNumber.Text" xml:space="preserve">
    <value>PO Number</value>
  </data>
  <data name="PreviousCharges.Text" xml:space="preserve">
    <value>Previous Charges</value>
  </data>
  <data name="PurchaseOrders.Text" xml:space="preserve">
    <value>Purchase Orders</value>
  </data>
  <data name="ReceiveCash.Text" xml:space="preserve">
    <value>Receive Cash</value>
  </data>
  <data name="ReceiveCheck.Text" xml:space="preserve">
    <value>Receive Check</value>
  </data>
  <data name="RefundAmountError.Text" xml:space="preserve">
    <value>Refund amount should be less then order charged amount.</value>
  </data>
  <data name="RefundCard.Text" xml:space="preserve">
    <value>Refund Card</value>
  </data>
  <data name="RefundCash.Text" xml:space="preserve">
    <value>Refund Cash</value>
  </data>
  <data name="RefundCharge.Text" xml:space="preserve">
    <value>Refund Charge</value>
  </data>
  <data name="RefundPoints.Text" xml:space="preserve">
    <value>Refund Points</value>
  </data>
  <data name="Refunds.Text" xml:space="preserve">
    <value>Refunds</value>
  </data>
  <data name="RefundToPoints.Text" xml:space="preserve">
    <value>Refund To Points</value>
  </data>
  <data name="ReturnCheck.Text" xml:space="preserve">
    <value>Return Check</value>
  </data>
  <data name="RewardPoints.Text" xml:space="preserve">
    <value>Reward Points</value>
  </data>
  <data name="SaveCardOrder.Text" xml:space="preserve">
    <value>Save Card to Order</value>
  </data>
  <data name="SecurityCode.Text" xml:space="preserve">
    <value>Security Code</value>
  </data>
  <data name="ShowTransactionError.Text" xml:space="preserve">
    <value>Unable to process the transaction. Please check the event log. </value>
  </data>
  <data name="TransactionProcessed.Text" xml:space="preserve">
    <value>Transaction Processed at {0}</value>
  </data>
  <data name="VoidHold.Text" xml:space="preserve">
    <value>Void Hold</value>
  </data>
</root>