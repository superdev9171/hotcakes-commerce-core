<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnClearCache.Text" xml:space="preserve">
    <value>Clear Cache</value>
  </data>
  <data name="CacheCleared.Text" xml:space="preserve">
    <value>Cache cleared at {0}</value>
  </data>
  <data name="CacheInfo.Text" xml:space="preserve">
    <value>Clearing the cache can help you troubleshoot issues when you save changes but don't necessarily see the changes shown in your store.</value>
  </data>
  <data name="chkDeleteModuleFiles.Text" xml:space="preserve">
    <value>Delete Module Files</value>
  </data>
  <data name="chkDeleteStoreFiles.Text" xml:space="preserve">
    <value>Delete Store Files</value>
  </data>
  <data name="HostAdministration.Text" xml:space="preserve">
    <value>Superuser Administration</value>
  </data>
  <data name="UninstallInfo.Text" xml:space="preserve">
    <value>Uninstalling will remove all Hotcakes modules from your entire site installation. This will affect all sites in the installation. All data will be removed from database. This is non-reversible operation.</value>
  </data>
  <data name="btnUninstall.Text" xml:space="preserve">
    <value>Uninstall</value>
  </data>
  <data name="UninstallConfirmation.Text" xml:space="preserve">
    <value>Are you sure you want to delete all of Hotcakes Commerce's modules and files?</value>
  </data>
  <data name="btnClearStoreData.Text" xml:space="preserve">
    <value>Delete Store Data</value>
  </data>
  <data name="CacheInfoTitle.Text" xml:space="preserve">
    <value>Store Cache</value>
  </data>
  <data name="chkDeleteAnalytics.Text" xml:space="preserve">
    <value>Analytics</value>
  </data>
  <data name="chkDeleteCustomers.Text" xml:space="preserve">
    <value>Customers</value>
  </data>
  <data name="chkDeleteOrders.Text" xml:space="preserve">
    <value>Orders</value>
  </data>
  <data name="ClearStoreDataConfirmation.Text" xml:space="preserve">
    <value>Deleting store data is a permanent action. This can't be undone.  Are you sure you want to continue?</value>
  </data>
  <data name="ClearStoreDataInfo.Text" xml:space="preserve">
    <value>Clearing the store data is a permanent action. If you choose to do this, all selected data will be deleted forever.  This should only be necessary for site owners that are moving their site from a development environment, into a production environment.</value>
  </data>
  <data name="ClearStoreDataTitle.Text" xml:space="preserve">
    <value>Clear Store Data</value>
  </data>
  <data name="UninstallModuleTitle.Text" xml:space="preserve">
    <value>Uninstall Module</value>
  </data>
  <data name="StoreDataDeletedMsg.Text" xml:space="preserve">
    <value>Successfully cleared selected store data</value>
  </data>
  <data name="SampleDataInfo.Text" xml:space="preserve">
    <value>Sample data will be generated for all products found in the store.  This may take a moment if you have a large number of products added.  When you delete the sample data, all of your products will continue to exist in your store.</value>
  </data>
  <data name="SampleDataTitle.Text" xml:space="preserve">
    <value>Sample Data</value>
  </data>
  <data name="btnCreateSampleData.Text" xml:space="preserve">
    <value>Generate Sample Data for Store</value>
  </data>
  <data name="btnRemoveSampleData.Text" xml:space="preserve">
    <value>Remove Sample Data from Store</value>
  </data>
</root>