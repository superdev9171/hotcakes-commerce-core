IF  NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}hcc_StoreSettingsTranslations]') AND type in (N'U'))
BEGIN

CREATE TABLE {databaseOwner}[{objectQualifier}hcc_StoreSettingsTranslations](
	[StoreSettingsTranslationId] [bigint] IDENTITY(1,1) NOT NULL,
	[StoreSettingsId] [bigint] NOT NULL,
	[Culture] [nvarchar](10) NOT NULL,
	[LocalizedSettingValue] [nvarchar](max) NULL,
 CONSTRAINT [PK_{objectQualifier}hcc_StoreSettingsTranslations] PRIMARY KEY CLUSTERED 
(
	[StoreSettingsTranslationId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ,
 CONSTRAINT [UK_{objectQualifier}hcc_StoreSettingsTranslations] UNIQUE NONCLUSTERED 
(
	[StoreSettingsId] ASC,
	[Culture] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) 
) 

ALTER TABLE {databaseOwner}[{objectQualifier}hcc_StoreSettingsTranslations]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}hcc_StoreSettingsTranslations_hcc_StoreSettings] FOREIGN KEY([StoreSettingsId])
	REFERENCES {databaseOwner}[{objectQualifier}hcc_StoreSettings] ([Id])
ON DELETE CASCADE

ALTER TABLE {databaseOwner}[{objectQualifier}hcc_StoreSettingsTranslations] CHECK CONSTRAINT [FK_{objectQualifier}hcc_StoreSettingsTranslations_hcc_StoreSettings]

END
GO

/* Fixed store procedure that used varchar instead of nvarchar. This caused search malfunction for non latin characters */

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}hcc_AddObjectIndex]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}hcc_AddObjectIndex]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}hcc_AddObjectIndex]
	@siteId bigint,
	@objectId uniqueidentifier,
	@objectType int,
	@title nvarchar(512),
	@culture nvarchar(10),
	@wordScores xml
AS
BEGIN
	BEGIN TRANSACTION
	
	-- Turns out delete and recreate is quicker than 
	-- determination of existance and insert or update afterwards
	DELETE FROM {databaseOwner}[{objectQualifier}hcc_SearchObjects]
	WHERE SiteId = @siteId
		and ObjectId = @objectId
		and ObjectType = @objectType
		
	INSERT INTO {databaseOwner}[{objectQualifier}hcc_SearchObjects] ([ObjectType], [ObjectId], [Title], [SiteId], [LastIndexUtc])
	VALUES (@objectType, @objectId, @title, @siteId, GETUTCDATE())
	
	DECLARE @searchObjectId bigint = @@IDENTITY

	DECLARE @scoreTable TABLE(Word nvarchar(255), Score int)
	INSERT INTO @scoreTable
	SELECT
		Pair.value('(word)[1]', 'nvarchar(255)') as Word,
		Pair.value('(score)[1]', 'int') as Score
	FROM 
		@wordScores.nodes('/dict/pair') AS WS(Pair)

	MERGE {databaseOwner}[{objectQualifier}hcc_SearchLexicon] AS T
	USING @scoreTable AS S
	ON T.Word = S.Word and T.Culture = @culture 
	WHEN NOT MATCHED BY TARGET
		THEN INSERT(Word, Culture) VALUES(S.Word, @culture);
	
	MERGE {databaseOwner}[{objectQualifier}hcc_SearchObjectWords] AS T
	USING
	(
		SELECT sl.Id as WordId, Score
		FROM {databaseOwner}[{objectQualifier}hcc_SearchLexicon] sl
			join @scoreTable st
				on sl.Word = st.Word and sl.Culture = @culture
	) AS S
	ON T.SearchObjectId = @searchObjectId and T.WordId = S.WordId and T.SiteId = @siteId
	WHEN NOT MATCHED BY TARGET
		THEN INSERT(SearchObjectId, WordId, SiteId, Score) VALUES(@searchObjectId, S.WordId, @siteId, Score)
	WHEN MATCHED
		THEN UPDATE SET T.Score = S.Score;

	COMMIT TRANSACTION
END
GO