<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hotcakes.Commerce</name>
    </assembly>
    <members>
        <member name="M:Hotcakes.Commerce.Accounts.AccountService.CreateAndSetupStore">
            <summary>
                Create store. This method is generally used during the first time application
                installation and during first step of the wizard
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.AccountService.GetCurrentStore">
            <summary>
                Get current store instance. Site can have multiple store and this method
                returns the current store instance the user is accessing.
            </summary>
            <returns>Store instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.AccountService.GetGoogleAnalyticsSettings">
            <summary>
                Get Google Analytics settings for a current store.
            </summary>
            <returns>Returns <see cref="T:Hotcakes.Commerce.Accounts.GoogleAnalyticsSettings"/> instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.AccountService.SetGoogleAnalyticsSettings(Hotcakes.Commerce.Accounts.GoogleAnalyticsSettings)">
            <summary>
                Set the google analytics information for the current store.
            </summary>
            <param name="newSettings"></param>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.AccountService.CreateStore">
            <summary>
                Create store information with the current hostname in URL.
                <para>
                    This method generally called when user there is no host entry exist for
                    given url in the Hosts table.
                </para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.AccountService.SetupDefaultStoreSettings(Hotcakes.Commerce.Accounts.Store)">
            <summary>
                Set default settings when creating new store.
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:Hotcakes.Commerce.Accounts.ApiKey">
            <summary>
                This method is used to store API key information for
                specific store.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Accounts.ApiKeyRepository">
            <summary>
                This class used to perform database operation for hcc_ApiKey table.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.ApiKeyRepository.CopyDataToModel(Hotcakes.Commerce.Data.EF.hcc_ApiKey,Hotcakes.Commerce.Accounts.ApiKey)">
            <summary>
                Copy data from database instance to model instance.
            </summary>
            <param name="data">Database table instance</param>
            <param name="model">Model instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.ApiKeyRepository.CopyModelToData(Hotcakes.Commerce.Data.EF.hcc_ApiKey,Hotcakes.Commerce.Accounts.ApiKey)">
            <summary>
                Copy data from Model instance to Database table instance.
            </summary>
            <param name="data">Database table instance</param>
            <param name="model">Model instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.ApiKeyRepository.Delete(System.Int64)">
            <summary>
                Delete API key.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.ApiKeyRepository.FindByKey(System.String)">
            <summary>
                Get <see cref="T:Hotcakes.Commerce.Accounts.ApiKey"/> instance by Key.
            </summary>
            <param name="key">API Key</param>
            <returns>APIKey instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.ApiKeyRepository.FindByStoreId(System.Int64)">
            <summary>
                Get list of Keys by Store Id.
            </summary>
            <param name="storeId">Store unique identifier</param>
            <returns>List of ApiKey instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.ApiKeyRepository.DestoryAllForStore(System.Int64)">
            <summary>
                Delete all Keys for given store.
            </summary>
            <param name="storeId">Store unique identifer.</param>
        </member>
        <member name="T:Hotcakes.Commerce.Accounts.AuthTokenRepository">
            <summary>
                This class used to perform database operations against hcc_AuthTokens table.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.AuthTokenRepository.CopyDataToModel(Hotcakes.Commerce.Data.EF.hcc_AuthTokens,Hotcakes.Commerce.Accounts.AuthToken)">
            <summary>
                Copy database table instance to model instance.
            </summary>
            <param name="data">Database table instance</param>
            <param name="model">Model instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.AuthTokenRepository.CopyModelToData(Hotcakes.Commerce.Data.EF.hcc_AuthTokens,Hotcakes.Commerce.Accounts.AuthToken)">
            <summary>
                Copy model instance to database table instance.
            </summary>
            <param name="data">Database table instance</param>
            <param name="model">Model instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.AuthTokenRepository.Update(Hotcakes.Commerce.Accounts.AuthToken)">
            <summary>
                Update AuthToken.
            </summary>
            <param name="t">Instance of the AuthToken</param>
            <returns>Returns true if updated successfully otherwise false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.AuthTokenRepository.Delete(System.Int64)">
            <summary>
                Delete AuthToken by unique identifier.
            </summary>
            <param name="id">AuthToken unique identifier.</param>
            <returns>True if deleted successfully otherwise false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.AuthTokenRepository.FindByTokenId(System.Guid)">
            <summary>
                Find AuthToken info by token id.
            </summary>
            <param name="tokenId">Token Id</param>
            <returns>AuthToken instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.AuthTokenRepository.FindByUserId(System.Int64)">
            <summary>
                Get list of AuthTokens for given user.
            </summary>
            <param name="userId">User unique identifier</param>
            <returns>List of AuthToken instances.</returns>
        </member>
        <member name="T:Hotcakes.Commerce.Accounts.GoogleAnalyticsSettings">
            <summary>
                Used to store Google analytics tracking configuration.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Accounts.StoreDomainRepository">
            <summary>
                This class used to perform different database operation against hcc_StoreDomains table.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.StoreDomainRepository.CopyModelToData(Hotcakes.Commerce.Data.EF.hcc_StoreDomains,Hotcakes.Commerce.Accounts.StoreDomain)">
            <summary>
                Copy data from database table instance to model instance.
            </summary>
            <param name="data"></param>
            <param name="model"></param>
        </member>
        <member name="M:Hotcakes.Commerce.Accounts.StoreDomainRepository.CopyDataToModel(Hotcakes.Commerce.Data.EF.hcc_StoreDomains,Hotcakes.Commerce.Accounts.StoreDomain)">
            <summary>
                Copy
            </summary>
            <param name="data"></param>
            <param name="model"></param>
        </member>
        <member name="M:Hotcakes.Commerce.BusinessRules.WorkflowFactory.LoadVerifyOrderSizeTasks">
            <summary>
                This is the workflow that runs on an order whenever your customer checks out.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.BusinessRules.WorkflowFactory.LoadDropShipTasks">
            <summary>
                This is the workflow that runs whenever an order is marked as shipped.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.BusinessRules.WorkflowFactory.LoadPackageShippedTasks">
            <summary>
                This is the workflow that runs after a package is marked shipped.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.BusinessRules.WorkflowFactory.LoadOrderEditedTasks">
            <summary>
                Whenever an order is edited, this workflow is run. Add a new array of Task[] in order to add your custom code to
                the workflow that is run here.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.BusinessRules.WorkflowFactory.LoadOrderStatusChangedTasks">
            <summary>
                This workflow will run when the order status is changed. Currently, it checks to synchronize gift card values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.BusinessRules.WorkflowFactory.LoadPaymentChangedTasks">
            <summary>
                This workflow is run whenever the payment method for an order is changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.BusinessRules.WorkflowFactory.LoadPaymentCompleteTasks">
            <summary>
                This workflow is run after payment has been applied. This is a great place to run workflow tasks that should not
                run until after a valid payment has been applied to the order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.BusinessRules.WorkflowFactory.LoadProcessNewOrderTasks">
            <summary>
                This is the workflow that runs whenever an order is moved from the "New" state to the "TODO" state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.BusinessRules.WorkflowFactory.LoadProcessNewOrderPaymentsTasks">
            <summary>
                This workflow is run after a new order has been accepted to process payments. This is where PayPal Express is
                applied as well as credit cards and reward points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.BusinessRules.WorkflowFactory.LoadProcessNewOrderAfterPaymentsTasks">
            <summary>
                This workflow is run after the payments have been applied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.BusinessRules.WorkflowFactory.LoadShippingChangedTasks">
            <summary>
                This workflow is run after the status of shipping changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.BusinessRules.WorkflowFactory.LoadShippingCompleteTasks">
            <summary>
                This workflow is run after shipping is marked as complete. This is a great place to add tasks that should happen
                after an order is shipped like those related to external
                ERP inventory integration.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.BusinessRules.WorkflowFactory.LoadThirdPartyCheckoutSelectedTasks">
            <summary>
                This workflow is run to execute external checkout providers, meaning those not run directly against an API.
                To-date, this is only PayPal Express?
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.BundledProductsRepository">
            <summary>
                Repository class to perform different database operation on
                hcc_BundledProducts table.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProductsRepository.Find(System.Int64)">
            <summary>
                Find product by id from table
            </summary>
            <param name="id">product id</param>
            <returns>Return the bundled product information if find from the database</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProductsRepository.Create(Hotcakes.Commerce.Catalog.BundledProduct)">
            <summary>
                Create new bundled product record in table
            </summary>
            <param name="item">Bundled product instance. Detailed properties can be found at <see cref="T:Hotcakes.Commerce.Catalog.BundledProduct"/></param>
            <returns>Return true if new entry done successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProductsRepository.Update(Hotcakes.Commerce.Catalog.BundledProduct)">
            <summary>
                Update the bundled product in database
            </summary>
            <param name="c">Bundled product instance. Detailed properties can be found at <see cref="T:Hotcakes.Commerce.Catalog.BundledProduct"/></param>
            <returns>Return true if the operation completed successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProductsRepository.FindForProducts(System.Collections.Generic.List{System.String})">
            <summary>
                Find list of products by list of ids
            </summary>
            <param name="productIds">List of product GUIDs</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProductsRepository.FindForProduct(System.String)">
            <summary>
                Find products by product GUID. It will return the list of the products added to bundle
            </summary>
            <param name="productId">Product GUID string</param>
            <returns>Returns the list of the products in bundle</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProductsRepository.DeleteAllForProduct(System.String)">
            <summary>
                Delete all the products added in the bundle for given product
            </summary>
            <param name="productId">Product GUID</param>
            <returns>Returns true if the products in bundle deleted successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProductsRepository.DeleteByBundleProductId(System.String)">
            <summary>
                Remove specific product from all the bundled product
            </summary>
            <param name="bundleProductId">Product GUID which needs to be removed</param>
            <returns>Returns true if the product is deleted from all the bundles</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProductsRepository.Delete(System.Int64)">
            <summary>
                Remove specific individual record from the table
            </summary>
            <param name="id">Unique identifier of the particular row in table</param>
            <returns>returns true if record deleted successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProductsRepository.ResortBundledProducts(System.Collections.Generic.List{System.Int64})">
            <summary>
                Change the bundled products order
            </summary>
            <param name="sortedBundledProductIds">List of the ids for unique  identification of each row</param>
            <returns>Returns true if the resort done successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProductsRepository.CloneForProduct(System.String,System.String)">
            <summary>
                Clone products in one bundle product to another bundle product
            </summary>
            <param name="productId">Source Bundle product GUID</param>
            <param name="newProductId">Destination bundle product GUID</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProductsRepository.CopyDataToModel(Hotcakes.Commerce.Data.EF.hcc_BundledProducts,Hotcakes.Commerce.Catalog.BundledProduct)">
            <summary>
                Copy records from database to the model class.
            </summary>
            <param name="data">Instance of the hcc_BundledProducts which represents single row in table.</param>
            <param name="model">Model class for Bundled product which is used on the view.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProductsRepository.CopyModelToData(Hotcakes.Commerce.Data.EF.hcc_BundledProducts,Hotcakes.Commerce.Catalog.BundledProduct)">
            <summary>
                Copy model data to the database instance.
            </summary>
            <param name="data">Instance of the hcc_BundledProducts which represents single row in table.</param>
            <param name="model">View model instance.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProductsRepository.FindMaxSort(System.String)">
            <summary>
                Find the maximum sort order number for products in any bundled product
            </summary>
            <param name="productId">Product GUID</param>
            <returns>Returns the max sort order number</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProductsRepository.UpdateSortOrderForProduct(System.Int64,System.Int32)">
            <summary>
                Update sort order number for given unique record identifier
            </summary>
            <param name="bundledProductId">Unique row identifier in the table</param>
            <param name="newSortOrder">Sort order needs to be set in database</param>
            <returns>Returns true if the record has been updated successfully</returns>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.BundledProduct">
            <summary>
                This holds the information about the
                bundled product in system.
            </summary>
            <remarks>This class is mapped individual row in "hcc_BundledProducts" table in database.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProduct.#ctor">
            <summary>
                Set default value.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.BundledProduct.#ctor(Hotcakes.Commerce.Catalog.BundledProduct)">
            <summary>
                Set the values from the given bundled product instance.
            </summary>
            <param name="bundledProduct">Bundled product instance.</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.BundledProduct.Id">
            <summary>
                Unique identifier of the Bundled Product
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.BundledProduct.ProductId">
            <summary>
                Product unique identifier. Mapped to the product's Bvin field.
            </summary>
            <remarks>This represents the product part of the product bundle.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.BundledProduct.BundledProductId">
            <summary>
                Product unique identifier. Mapped to the product's Bvin field.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.BundledProduct.Quantity">
            <summary>
                Quantity of the product in bundle.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.BundledProduct.SortOrder">
            <summary>
                Sort order of the product in bundle.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.BundledProductAdv">
            <summary>
                This is used to see the bundled product on product detail page
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.BundledProductAdv.BundledProduct">
            <summary>
                Product information for the current bundled product. More informatio about the product can be found at
                <see cref="T:Hotcakes.Commerce.Catalog.Product"/>
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.CatalogRole">
            <summary>
                This is the primary class used for product/category/product type roles in the application.
            </summary>
            <remarks>The REST API equivalent is CatalogRoleDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogRole.ToDto">
            <summary>
                Allows you to convert the current catalog role object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of CatalogRoleDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogRole.FromDto(Hotcakes.CommerceDTO.v1.Catalog.CatalogRoleDTO)">
            <summary>
                Allows you to populate the current product review object using a CatalogRoleDTO instance
            </summary>
            <param name="dto">An instance of the catalog role from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogRole.CatalogRoleId">
            <summary>
                The unique ID or primary key of the catalog role.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogRole.RoleName">
            <summary>
                The role name.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogRole.ReferenceId">
            <summary>
                The unique ID or primary key of one of following entities: product, category, product type.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogRole.RoleType">
            <summary>
                This property specify what object will be linked with catalog role.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.CatalogRoleType">
            <summary>
                This enumeration describes the type or way a security role should be used.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.CatalogRoleType.ProductRole">
            <summary>
                When used, this means that the role should be enforced at the product level.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.CatalogRoleType.CategoryRole">
            <summary>
                Categories will need to respect the security role, unless overridden at the product level.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.CatalogRoleType.ProductTypeRole">
            <summary>
                Assigning security roles to the product type is the highest level that can be done, and overriddable at each lower
                level.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.CatalogRolesRepository">
            <summary>
                Repository class to perform different database operation on
                hcc_CatalogRoles table.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogRolesRepository.Find(System.Int64)">
            <summary>
                Find the CatalogRole by role id.
            </summary>
            <param name="roleId">Unique identifer of the role</param>
            <returns>Returns the CatalogRole instance for the matching role id</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogRolesRepository.FindAllRoleNames">
            <summary>
                Get list of all role names
            </summary>
            <returns>Return list of distinct role names</returns>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.GiftCard">
            <summary>
                This is the primary object that is used to manage all aspects of Gift Card in the main application.
            </summary>
            <remarks>The REST API equivalent is GiftCardDTO.</remarks>
        </member>
        <member name="T:Hotcakes.Commerce.Content.IReplaceable">
            <summary>
                Items that implement this interface can have replacebale tags in the emails
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Content.IReplaceable.GetReplaceableTags(Hotcakes.Commerce.HccRequestContext)">
            <summary>
                Gets the replaceable tags.
            </summary>
            <param name="context">
                The context in which emails are being sent. This context can be different from current context
                since we wish to send emails using language of user
            </param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCard.GetReplaceableTags(Hotcakes.Commerce.HccRequestContext)">
            <summary>
                Parses the current gift card object and returns the token/value pairs for email templates.
            </summary>
            <param name="context">A populated instance of the Hotcakes Request context</param>
            <returns>List of HtmlTemplateTag</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCard.ToDto">
            <summary>
                Allows you to convert the current gift card object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of GiftCardDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCard.FromDto(Hotcakes.CommerceDTO.v1.Catalog.GiftCardDTO)">
            <summary>
                Allows you to populate the current gift card object using a GiftCardDTO instance
            </summary>
            <param name="dto">An instance of the gift card from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.GiftCard.GiftCardId">
            <summary>
                The unique or primary key of the gift card.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.GiftCard.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.GiftCard.LineItemId">
            <summary>
                The unique ID of the line item for this gift card.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.GiftCard.CardNumber">
            <summary>
                A alphanumeric ID that a customer will use to reference this gift card.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.GiftCard.Amount">
            <summary>
                The total amount that the gift card was originally assigned upon purchase.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.GiftCard.UsedAmount">
            <summary>
                An amount remaining on the gift card.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.GiftCard.IssueDateUtc">
            <summary>
                The date/time that the gift card was purchased.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.GiftCard.ExpirationDateUtc">
            <summary>
                The date/time that the gift card is currently set to expire.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.GiftCard.RecipientEmail">
            <summary>
                An email address for the customer that the gift card was purchased for.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.GiftCard.RecipientName">
            <summary>
                Full name for the customer that the gift card was purchased for.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.GiftCard.GiftMessage">
            <summary>
                A message from the purchaser of the gift card, for the recipient.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.GiftCard.Enabled">
            <summary>
                Designates whether the gift card is currently active for use.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.GiftCard.OrderNumber">
            <summary>
                Gets or sets the order number.
            </summary>
            <value>
                The order number.
            </value>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardExport.ExportToExcel(System.Web.HttpResponse,System.String,System.Collections.Generic.List{Hotcakes.Commerce.Catalog.GiftCard})">
            <summary>
                Export the gift card to excel.
            </summary>
            <param name="response">Response stream on which excel file will be writted</param>
            <param name="fileName">File name which exported</param>
            <param name="giftCards">List of <see cref="T:Hotcakes.Commerce.Catalog.GiftCard"/> instances</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardExport.MainSheetWriter.Write(System.Collections.Generic.List{Hotcakes.Commerce.Catalog.GiftCard})">
            <summary>
                Write <see cref="T:Hotcakes.Commerce.Catalog.GiftCard"/> to file.
            </summary>
            <param name="cards">List of cards</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardExport.MainSheetWriter.WriteHeader">
            <summary>
                Write excel file header.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardExport.MainSheetWriter.WriteRow(Hotcakes.Commerce.Catalog.GiftCard,System.Int32)">
            <summary>
                Write individual GiftCard to the file.
            </summary>
            <param name="gc"><see cref="T:Hotcakes.Commerce.Catalog.GiftCard"/> instance</param>
            <param name="rowIndex">Row index on which this record going to be written on excel file</param>
            <returns>Returns row index</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardExport.MainSheetWriter.GetYesNo(System.Nullable{System.Boolean})">
            <summary>
                Returns Yes or No based on gift card enabled or not.
            </summary>
            <param name="val">Value of the Gift Card enabled</param>
            <returns>Returns string presentation of the Gift Card enabled</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardExport.MainSheetWriter.GetDateTimeString(System.DateTime)">
            <summary>
                Get datetime string
            </summary>
            <param name="utcTime">Datetime instance</param>
            <returns>Returns the datetime string</returns>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.GiftCardRepository">
            <summary>
                The gift card repository
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardRepository.#ctor(Hotcakes.Commerce.HccRequestContext,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Hotcakes.Commerce.Catalog.GiftCardRepository"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="isForMemoryOnly">if set to <c>true</c> [is for memory only].</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardRepository.Find(System.Int64)">
            <summary>
                Finds the gift card by specified identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardRepository.FindForAllStores(System.Int64)">
            <summary>
                Finds gift cards for all stores.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardRepository.FindAllWithFilter(Hotcakes.Commerce.Catalog.GiftCardSearchCriteria,System.Int32,System.Int32,System.Int32@)">
            <summary>
                Finds all gift cards using filter.
            </summary>
            <param name="criteria">The criteria.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="rowCount">The row count.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardRepository.FindByLineItem(System.Int64)">
            <summary>
                Finds gift cards linked with lineitem.
            </summary>
            <param name="lineItemId">The line item identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardRepository.Create(Hotcakes.Commerce.Catalog.GiftCard)">
            <summary>
                Creates the new gift card.
            </summary>
            <param name="card">The card.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardRepository.Update(Hotcakes.Commerce.Catalog.GiftCard)">
            <summary>
                Updates the exists gift card.
            </summary>
            <param name="card">The card.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardRepository.Delete(System.Int64)">
            <summary>
                Deletes the gift card by identifier.
            </summary>
            <param name="cardId">The card identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardRepository.UpdateStatus(System.String,System.Boolean)">
            <summary>
                Updates the status.
            </summary>
            <param name="cardNumber">The card number.</param>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardRepository.ChargeGiftCard(System.String,System.Decimal)">
            <summary>
                Charges the gift card.
            </summary>
            <param name="cardNumber">The card number.</param>
            <param name="amount">The amount.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.GiftCardRepository.GetGiftCardBalance(System.String)">
            <summary>
                Gets the gift card balance.
            </summary>
            <param name="cardNumber">The card number.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionSelections.Equals(Hotcakes.Commerce.Catalog.OptionSelections)">
            <summary>
                Return true if both objects are equal. Otherwise false.
            </summary>
            <param name="other">The other option selections</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.IProductRepository.Create(Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Creates the specified product. Use CatalogService.ProductsCreateWithInventory instead to update search index too.
            </summary>
            <param name="product">The product to create</param>
            <returns>If operation succeeded</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.IProductRepository.Update(Hotcakes.Commerce.Catalog.Product,System.Boolean)">
            <summary>
                Updates the specified product. Use CatalogService.ProductsUpdateWithSearchRebuild instead  to update search index
                too.
            </summary>
            <param name="product">The product to update.</param>
            <param name="mergeSubItems">if set to <c>true</c> [merge sub items].</param>
            <returns>
                If operation succeeded
            </returns>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.MembershipProductTypeRepository">
            <summary>
                Peform operation on  hcc_MembershipProductType database table.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.MembershipProductTypeRepository.CopyModelToData(Hotcakes.Commerce.Data.EF.hcc_MembershipProductType,Hotcakes.Commerce.Catalog.MembershipProductType)">
            <summary>
                Copy database view model to object model
            </summary>
            <param name="data"><see cref="T:Hotcakes.Commerce.Data.EF.hcc_MembershipProductType"/> instance</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.MembershipProductType"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.MembershipProductTypeRepository.CopyDataToModel(Hotcakes.Commerce.Data.EF.hcc_MembershipProductType,Hotcakes.Commerce.Catalog.MembershipProductType)">
            <summary>
                Copy database object model to view model
            </summary>
            <param name="data"><see cref="T:Hotcakes.Commerce.Data.EF.hcc_MembershipProductType"/> instance</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.MembershipProductType"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.MembershipProductTypeRepository.GetList(System.Int64)">
            <summary>
                GEt list of the Membership product type.
            </summary>
            <param name="storeId">Unique store identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.MembershipProductType"/></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.MembershipProductTypeRepository.Find(System.String)">
            <summary>
                Find MembershiptProductType by id
            </summary>
            <param name="productTypeId">MembershipProductType unique identifier.</param>
            <returns>Returns <see cref="T:Hotcakes.Commerce.Catalog.MembershipProductType"/> instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.MembershipProductTypeRepository.Create(Hotcakes.Commerce.Catalog.MembershipProductType)">
            <summary>
                Create MembershipProductType.
            </summary>
            <param name="mpt"><see cref="T:Hotcakes.Commerce.Catalog.MembershipProductType"/> instance</param>
            <returns>Returns true if operation completed successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.MembershipProductTypeRepository.Update(Hotcakes.Commerce.Catalog.MembershipProductType)">
            <summary>
                Update MembershipProductType.
            </summary>
            <param name="mpt">Instance of  <see cref="T:Hotcakes.Commerce.Catalog.MembershipProductType"/></param>
            <returns>Returns true if operation completed successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.MembershipProductTypeRepository.Delete(System.String)">
            <summary>
                Delete MembershipProductType.
            </summary>
            <param name="productTypeId">MembershipProductType unique identifier</param>
            <returns>Returns true if operation completed successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Options.FileUpload.CartDescription(Hotcakes.Commerce.Catalog.Option,Hotcakes.Commerce.Catalog.OptionSelectionList)">
            <summary>
                Used to show the option values in view order
            </summary>
            <param name="baseOption"></param>
            <param name="selections"></param>
            <returns></returns>
        </member>
        <member name="T:Hotcakes.Commerce.Data.IRepoStrategy`1">
            <summary>
            </summary>
            <typeparam name="TDefaultEntity"></typeparam>
        </member>
        <member name="T:Hotcakes.Commerce.Globalization.ViewModelLocalization">
            <summary>
                This strategy with calling Init method in static contructor won't work properly in multistore setup
                We need simply prevent single initialization and don't use static field or static contructor to handle that
                scenario.
                Since for now this approach is used only to edit billing info for recurring orders so we skip fixing this for now
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderCustomersExport.MainSheetWriter.WriteHeader">
            <summary>
                Creates the header row for the XLS to define the columns the spreadsheet will have.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderCustomersExport.MainSheetWriter.WriteCustomerRow(Hotcakes.Commerce.Membership.CustomerAccount,System.Int32,System.String)">
            <summary>
                Writes a row in the spreadsheet for each customer found in the search
            </summary>
            <param name="c">CustomerAccount - the customer record.</param>
            <param name="rowIndex">The position of the row in the spreadsheet</param>
            <param name="productName">The product name</param>
            <returns>An integer value indicating the next row index</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RecurringBilling.Interval">
            <summary>
                Defines how often payments will be done
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RecurringBilling.IntervalType">
            <summary>
                Defines period type of recurring payments
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RecurringBilling.NextPaymentDate">
            <summary>
                Gets or sets the next payment date.
            </summary>
            <value>
                The next payment date.
            </value>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RecurringBilling.TotalPayed">
            <summary>
                Gets or sets the total payed.
            </summary>
            <value>
                The total payed.
            </value>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RecurringBilling.IsCancelled">
            <summary>
                Gets or sets a value indicating whether this instance is canceled.
            </summary>
            <value>
                <c>true</c> if this instance is canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Hotcakes.Commerce.Payment.Methods.MonerisHPPDPResponse">
            <summary>
                Moneris Hosted Pay Page Data Preload Response
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Payment.Methods.MonerisHPPResponse">
            <summary>
                Moneris Hosted Pay Page Response
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Reporting.ReportingService.GetOrdersSummary">
            <summary>
                Gets the orders summary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Reporting.ReportingService.GetSalesInfo(Hotcakes.Commerce.Reporting.SalesPeriod)">
            <summary>
                Gets the sales information.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Reporting.ReportingService.GetAnalyticInfo(Hotcakes.Commerce.Reporting.SalesPeriod)">
            <summary>
                Gets the analytic information.
            </summary>
            <param name="period">The period.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Reporting.ReportingService.GetTop5Products(Hotcakes.Commerce.Reporting.Top5ProductMode)">
            <summary>
                Gets the top5 products.
            </summary>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Reporting.ReportingService.GetTop5AbandonedProducts">
            <summary>
                Gets the top5 abandoned products.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Reporting.ReportingService.GetTop5Customers(Hotcakes.Commerce.Reporting.Top5CustomerMode)">
            <summary>
                Gets the top5 customers.
            </summary>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Reporting.ReportingService.GetTop5SearchTerms">
            <summary>
                Gets the top5 search terms.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Reporting.ReportingService.GetTop5VendorsManufactures(Hotcakes.Commerce.Reporting.Top5VendorType)">
            <summary>
                Gets the top5 vendors manufactures.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Reporting.ReportingService.GetTop5Affiliates(Hotcakes.Commerce.Reporting.Top5AffiliateMode)">
            <summary>
                Gets the top5 affiliates.
            </summary>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Reporting.ReportingService.GetAbandonedProducts(System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
                Create agregated abandoned products report
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="totalCount">The total count.</param>
            <returns></returns>
        </member>
        <member name="T:Hotcakes.Commerce.Search.ProductPropertyJoin">
            <summary>
                Contains "Property Value" + "Property" + "Propery Types"
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Search.ProductPropertyJoin.pp">
            <summary>
                Reference to Property
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Search.ProductPropertyJoin.ppv">
            <summary>
                Property Value
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Search.ProductPropertyJoin.ptypes">
            <summary>
                Reference to Product Types
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Search.ProductProperty">
            <summary>
                Contains Product Property with translation
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Search.ProductPropertyValue">
            <summary>
                Contains Property Value with translation
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Shipping.ShippingChargeType">
            <summary>
                This enumeration is used to determine how product shipping will be charged on shippable products.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Shipping.ShippingChargeType.None">
            <summary>
                Neither shipping or handling should be charged for this product.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Shipping.ShippingChargeType.ChargeShippingAndHandling">
            <summary>
                If specified, the product will charge shipping and handling. This should be the default.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Shipping.ShippingChargeType.ChargeShipping">
            <summary>
                This member dictates that the product will only change for shipping, not handling.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Shipping.ShippingChargeType.ChargeHandling">
            <summary>
                This member dictates that the product will only change for handling, not shipping.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Shipping.ShippingVisibilityMode.Always">
            <summary>
                The shipping method will always be included in shipping calculation and rate retrieval methods.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Shipping.ShippingVisibilityMode.Never">
            <summary>
                The shipping method will never be included in shipping calculation and rate retrieval methods. This is effectively
                disabling the shipping method.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Shipping.ShippingVisibilityMode.NoRates">
            <summary>
                This method will only be included in shipping calculation and rate retrieval when the previous methods do not
                return any rates.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Shipping.ShippingVisibilityMode.SubtotalAmount">
            <summary>
                The order subtotal must be greater than the specified amount in order to be included in the shipping calculation
                and rate retrieval methods.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Shipping.ShippingVisibilityMode.TotalWeight">
            <summary>
                The total weight of all line items must be greater than the specified total in order to be included in the shipping
                calculation and rate retrieval methods.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Globalization.Country">
            <summary>
                This is the main object used to work with countries throughout the main application.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Globalization.Country.UnitedStatesCountryBvin">
            <summary>
                This is a global ID used for the United States since it is built in.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Globalization.Country.FindRegion(System.String)">
            <summary>
                Returns a specific region from the Regions property using the respective abbreviation.
            </summary>
            <param name="abbreviation">The two-letter abbreviation of the region to look for.</param>
            <returns>If found, a single instance of Region is returned. Otherwise, a null object will be returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Globalization.Country.FindRegion(System.Guid)">
            <summary>
                Returns a specific region from the Regions property using the respective BVIN or ID.
            </summary>
            <param name="regionId">The unique ID or BVIN of the region to look for.</param>
            <returns>If found, a single instance of Region is returned. Otherwise, a null object will be returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Globalization.Country.ValidatePostalCode(System.String)">
            <summary>
                This method will validate the postal or zip code of the country using the PostalCodeValidationRegex property.
            </summary>
            <param name="postalCode">A string representation of the postal or zip code to validate.</param>
            <returns>If true, the postal code is valid. Otherwise, this method will return false.</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Country.Regions">
            <summary>
                Contains a listing of all of the regions that are part of this country.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Country.SampleCurrency">
            <summary>
                Returns the culture-specific version of 1.23 in currency.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Country.SampleNameAndCurrency">
            <summary>
                Returns the culture-specific name of the Country followed by the respective version of 1.23 in currency.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Country.Bvin">
            <summary>
                The unique ID of the country.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Country.CultureCode">
            <summary>
                Specifies the language that this specific language object applies to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Country.SystemName">
            <summary>
                This is the global name of the country, which is immune to localization.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Country.IsoCode">
            <summary>
                This is the two-letter abbreviation of the country.
            </summary>
            <remarks>This value should follow ISO-3166-1 standards.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Country.IsoAlpha3">
            <summary>
                This is the three-letter abbreviation of the country.
            </summary>
            <remarks>This value should follow ISO-3166-1 standards.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Country.IsoNumeric">
            <summary>
                This is the three-digit identifier of the country.
            </summary>
            <remarks>This value should follow ISO-3166-1 standards.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Country.PostalCodeValidationRegex">
            <summary>
                A regular expression that can be used to specify the format of the postal code that this country should follow.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Country.DisplayName">
            <summary>
                The display name is the value that the customer will see in a localized website, per the CultureCode.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Globalization.Region">
            <summary>
                This object is used to hold a minimal amount of mapped information about a Region and Country combination in other
                objects.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Region.RegionId">
            <summary>
                The ID or bvin of the region.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Region.CountryId">
            <summary>
                The ID or bvin of the country.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Region.SystemName">
            <summary>
                This value is used to globally identify this field on localized sites.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Region.Abbreviation">
            <summary>
                The standardized abbreviation of the region.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Globalization.Region.DisplayName">
            <summary>
                This is the display name specified in a localized site, otherwise the SystemName is used.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.MD5HashGenerator">
            <summary>
                This class takes an object, and generates a key to it. There are several possibilities:
                This generator can generate keys of type integer,float,double. The generated key is not necessarly
                unique!
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.MD5HashGenerator.GenerateKey(System.Object)">
            <summary>
                Generates a hashed - key for an instance of a class.
                The hash is a classic MD5 hash (e.g. BF20EB8D2C4901112179BF5D242D996B). So you can distinguish different
                instances of a class. Because the object is hashed on the internal state, you can also hash it, then send it to
                someone in a serialized way. Your client can then deserialize it and check if it is in
                the same state.
                The method just just estimates that the object implements the ISerializable interface. What's
                needed to save the state or so, is up to the implementer of the interface.
                <b>The method is thread-safe!</b>
            </summary>
            <param name="sourceObject">The object you'd like to have a key out of it.</param>
            <returns>An string representing a MD5 Hashkey corresponding to the object or null if the object couldn't be serialized.</returns>
            <exception cref="T:System.ApplicationException">Will be thrown if the key cannot be generated.</exception>
        </member>
        <member name="M:Hotcakes.Commerce.MD5HashGenerator.ObjectToByteArray(System.Object)">
            <summary>
                Converts an object to an array of bytes. This array is used to hash the object.
            </summary>
            <param name="objectToSerialize">Just an object</param>
            <returns>A byte - array representation of the object.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Is thrown if something went wrong during serialization.</exception>
        </member>
        <member name="M:Hotcakes.Commerce.MD5HashGenerator.ComputeHash(System.Byte[])">
            <summary>
                Generates the hashcode of an given byte-array. The byte-array can be an object. Then the
                method "hashes" this object. The hash can then be used e.g. to identify the object.
            </summary>
            <param name="objectAsBytes">bytearray representation of an object.</param>
            <returns>The MD5 hash of the object as a string or null if it couldn't be generated.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrdersExport.MainSheetWriter.WriteHeader">
            <summary>
                Creates the header row for the XLS to define the columns the spreadsheet will have.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrdersExport.MainSheetWriter.WriteOrderRow(Hotcakes.Commerce.Orders.OrderSnapshot,System.Int32)">
            <summary>
                Writes a row in the spreadsheet for each order found in the search
            </summary>
            <param name="o">OrderSnapshop - a truncated version of the order record used to write the row.</param>
            <param name="rowIndex">The position of the row in the spreadsheet</param>
            <returns>An integer value indicating the next row index</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Extensions.HccAppHelper.InitHccApp(System.Boolean,System.Boolean)">
            <summary>
                Initializes the HCC application. It should NEVER be stored in static variable.
            </summary>
            <param name="forceRecreate">if set to <c>true</c> [force recreate].</param>
            <param name="overideContentCulture">if set to <c>true</c> [overides content culture].</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Extensions.HccAppHelper.InitEmptyHccApp">
            <summary>
                Initializes the empty HCC application. It should NEVER be stored in object property or static variable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.BusinessRules.OrderTasks.IssueGiftCertificates.AddNewGiftCard(Hotcakes.Commerce.BusinessRules.OrderTaskContext,Hotcakes.Commerce.Orders.LineItem)">
            <summary>
                Adds the new gift card.
            </summary>
            <param name="context">The context.</param>
            <param name="lineItem">The line item.</param>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.CatalogService">
            <summary>
                Service interface to talk with different catalog repositories for
                product, category, variant, giftcard, product properties to perform
                different database operations.
            </summary>
            <remarks>All repository objects are read only to whole project.  Values cannot be set outside of this service class.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.#ctor(Hotcakes.Commerce.HccRequestContext)">
            <summary>
                Initialize the repository from the database factory.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.EditorRouteForCategory(Hotcakes.Commerce.Catalog.CategorySourceType,System.String,System.String)">
            <summary>
                Editor page view URL generation based on the category id and its parent id.
            </summary>
            <param name="type">Different types of view available to see the category</param>
            <param name="bvin">Category unique id</param>
            <param name="parentid">Parent category unique id</param>
            <returns>Generated URL based on given criteria</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.SaveProductToWishList(Hotcakes.Commerce.Catalog.Product,Hotcakes.Commerce.Catalog.OptionSelections,System.Int32,Hotcakes.Commerce.HotcakesApplication)">
            <summary>
                Add product to wishlist for current user.
            </summary>
            <param name="p">Product which needs to be added in wishlist</param>
            <param name="selections">Options chosen by end user when adding product to wishlist.</param>
            <param name="quantity">Quantity of the product</param>
            <param name="app">Hotcakes application instance</param>
            <returns>Returns true if the product added successfully, otherwise false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.BundledProductCreate(Hotcakes.Commerce.Catalog.BundledProduct)">
            <summary>
                Create bundled product and add analytics information.
            </summary>
            <param name="bundledProduct"><see cref="T:Hotcakes.Commerce.Catalog.BundledProduct"/> instance.</param>
            <returns>Returns true if the bundled product has been created successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.GenerateGiftCardNumber">
            <summary>
                Generate gift card number.
            </summary>
            <returns>Gift card number</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.CategoryUpdate(Hotcakes.Commerce.Catalog.Category)">
            <summary>
                Update category information.
            </summary>
            <param name="category">Category instance which needs to be updated in database</param>
            <returns>Returns true if category updated successfully, otherwise false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.FindCategoriesForProduct(System.String)">
            <summary>
                Find all the categories in which specific product belongs to.
            </summary>
            <param name="productBvin">Product unique identifier. Usually be GUID.</param>
            <returns>List of categories returned in which given product belongs to.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.FindProductForCategoryWithSort(System.String,Hotcakes.Commerce.Catalog.CategorySortOrder,System.Boolean)">
            <summary>
                Find list of the products for given category and in specific order.
            </summary>
            <remarks>Allow to control whether needs to get unavailable product in list or not.</remarks>
            <param name="categoryBvin">Category Unique identifier. Usually GUID.</param>
            <param name="sortOrder">
                Order by criteria. More detail for ordering can be found at <see cref="T:Hotcakes.Commerce.Catalog.CategorySortOrder"/>
            </param>
            <param name="showUnavailable">
                Show unavailable products or not. Unavailability generally determined by unavailability
                rule set on product inventory in system.
            </param>
            <returns>Returns the list of the product under specific category.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.FindProductForCategoryWithSort(System.String,Hotcakes.Commerce.Catalog.CategorySortOrder,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
                Find list of the products for given category with paging.
            </summary>
            <param name="categoryBvin">Category Unique identifier. Usually GUID.</param>
            <param name="sortOrder">
                Order by criteria. More detail for ordering can be found at <see cref="T:Hotcakes.Commerce.Catalog.CategorySortOrder"/>
            </param>
            <param name="showUnavailable">
                Show unavailable products or not. Unavailability generally determined by unavailability
                rule set on product inventory in system.
            </param>
            <param name="pageNumber">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="rowCount">Number of records available in database for given criteria.</param>
            <returns>Returns the list of the products for given criteria.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.FindProductCountsForCategory(System.String,System.Boolean)">
            <summary>
                Get products count for the given category.
            </summary>
            <param name="categoryBvin">Category Unique identifier. Usually GUID.</param>
            <param name="showUnavailable">
                Show unavailable products or not. Unavailability generally determined by unavailability
                rule set on product inventory in system.
            </param>
            <returns>Return the count of the product for given criteria.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.GetCategorySortOrderList">
            <summary>
                Gives list of available sorting option for the category.
            </summary>
            <returns>List of category order option</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.DestroyCategory(System.String)">
            <summary>
                Remove the category.
            </summary>
            <param name="bvin">Category unique identifier. Usually GUID.</param>
            <returns>Returns true if category removed successfully, otherwise return false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.DestroyCategoryForStore(System.String,System.Int64)">
            <summary>
                Remove the category.
            </summary>
            <param name="bvin">Category unique identifier. Usually GUID.</param>
            <param name="storeId">Store unique identifier. </param>
            <returns>Returns true if category removed successfully, otherwise return false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.VariantsValidate(Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Update the product inventory and remove orphan mappings for the product variants.
            </summary>
            <param name="p">Product instance for which needs to perform this operation.</param>
            <remarks>
                This operation generally performed when do the add/update/remove choice for the product and each time when
                variants list shown on administration page.
            </remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.VariantsValidateForSharedOption(Hotcakes.Commerce.Catalog.Option)">
            <summary>
                If the option is shared then update product options and inventory and remove orphan mapping for the products which
                are mapped to the given option.
            </summary>
            <param name="o">Product option instance</param>
            <remarks>This operation performed when deleting or editing any shared option from administrator view.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.VariantsGetAllPossibleSelections(Hotcakes.Commerce.Catalog.OptionList)">
            <summary>
                Get list of options which are variant and convert that to optionselection list.
            </summary>
            <param name="options">List of options.</param>
            <returns>List of the OptionSelectionList.</returns>
            <remarks>This is generally used on the product choices variant page to show the available options.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.VariantsGenerateAllPossible(Hotcakes.Commerce.Catalog.Product,System.Int32@)">
            <summary>
                Generate possible variants for given product.
            </summary>
            <param name="p">Product instance</param>
            <param name="possibleVariantsCount">returns count of possible variants.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductsAddOption(Hotcakes.Commerce.Catalog.Product,System.String)">
            <summary>
                Add option to the product.
            </summary>
            <param name="p">Product instance for which needs to install option.</param>
            <param name="optionBvin">Option unique identifier. Usually be GUID.</param>
            <returns>Returns true if the option added successfully, otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductsRemoveOption(Hotcakes.Commerce.Catalog.Product,System.String)">
            <summary>
                Remove option for the product.
            </summary>
            <param name="p">Product instance for which needs to remove the option.</param>
            <param name="optionBvin">Unique identifier for the option.</param>
            <returns>Returns true if the option removed successfully, otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductsReloadOptions(Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Clear the options for the product and reload again from the database.
            </summary>
            <param name="p">Product instance for which needs to reload options.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductsCreateWithInventory(Hotcakes.Commerce.Catalog.Product,System.Boolean)">
            <summary>
                Creates product, it's inventory data and search index for it
            </summary>
            <param name="item">Product to create</param>
            <param name="rebuildSearchIndex">If set to <c>true</c> rebuild search index</param>
            <returns>If operation succeeded</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductsCreateWithInventory(Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Creates product and it's inventory data without creating search index for it
            </summary>
            <param name="item">Product to create.</param>
            <returns>If operation succeeded</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductsUpdateWithSearchRebuild(Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Updates products and rebuilds search index for it
            </summary>
            <param name="item">Product to update</param>
            <returns>If operation succeeded</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.FindProductsForFile(System.String)">
            <summary>
                Find products associated to specific file.
            </summary>
            <param name="fileId">Unique file identifier. Generally be GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.FindProductsMatchingKey(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
                Find list of products matching with passed comma separated keys for the product property values.
            </summary>
            <param name="key">Command separated unique product property values of the product.</param>
            <param name="pageNumber">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="totalCount">Total count returned back as reference</param>
            <returns>List of products matching given criteria</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.AddProductToCategory(System.String,System.String)">
            <summary>
                Add specific product to category and add the analytic data for category and product mapping.
            </summary>
            <param name="productId">Product unique identifier. Usually be GUID.</param>
            <param name="categoryId">Category unique identifier. Usually be GUID.</param>
            <returns>returns CategoryProductAssociation association instance.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.RemoveProductFromCategory(System.String,System.String)">
            <summary>
                Remove specific product from the category.
            </summary>
            <param name="productId">Product unique identifier.</param>
            <param name="categoryId">Category unique identifier</param>
            <returns>returns true if product removed from category successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.CloneProduct(System.String,System.String,System.String,Hotcakes.Commerce.Catalog.ProductStatus,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Clone product with given information.
            </summary>
            <param name="productId">Source product unique identifier for cloning</param>
            <param name="newSku">New SKU for the target product.</param>
            <param name="newSlug">New Slug for the target product.</param>
            <param name="newStatus">New Status for the target product.</param>
            <param name="cloneProductRoles">Flag to determine whether needs to clone roles or not.</param>
            <param name="cloneProductChoices">Flag to determine whether needs to clone product choices or not.</param>
            <param name="cloneCategoryPlacement">Flag to determine whether needs to add product category mapping or not.</param>
            <param name="cloneImages">Flag to determine whether needs to clone images or not.</param>
            <param name="cloneReviews">Flag to determine whether needs to clone reviews or not.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.DestroyProduct(System.String,System.Int64)">
            <summary>
                Remove specific product from the given store.
            </summary>
            <param name="bvin">Product unique identifier.</param>
            <param name="storeId">Store unique identifier.</param>
            <returns>returns true if product removed from store otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.UpdateProductVisibleStatusAndSave(System.String)">
            <summary>
                Update product's visibility based on the inventory and unavailability rules.
            </summary>
            <param name="productBvin">Product unique identifier.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.UpdateProductVisibleStatusAndSave(Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Update products visibility based on the inventory and unavailability rules.
            </summary>
            <param name="product">
                Product instance. More information for the instance can be found at <see cref="T:Hotcakes.Commerce.Catalog.Product"/>
            </param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryUpdateWithStatusSave(Hotcakes.Commerce.Catalog.ProductInventory)">
            <summary>
                Update product inventories and based on inventory set the visibility of the product on store.
            </summary>
            <param name="inv">
                ProductInventory instance. More information for the instance can be found at
                <see cref="T:Hotcakes.Commerce.Catalog.ProductInventory"/>
            </param>
            <returns>Returns true if the produce inventory updated successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryCreateWithStatusSave(Hotcakes.Commerce.Catalog.ProductInventory)">
            <summary>
                Create inventory for the product based on given inventory information.
            </summary>
            <param name="inv">
                ProductInventory instance. More information for the instance can be found at
                <see cref="T:Hotcakes.Commerce.Catalog.ProductInventory"/>
            </param>
            <returns>Returns true if the produce inventory updated successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryGenerateForProduct(Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Generate product inventory based on the variants for the given product.
            </summary>
            <param name="localProduct">
                Product instance. More information for the given instance can be found at
                <see cref="T:Hotcakes.Commerce.Catalog.Product"/>
            </param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.CleanUpInventory(Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Delete all inventory information for the given product.
            </summary>
            <param name="product">
                Product instance. More information for the given instance can be found at <see cref="T:Hotcakes.Commerce.Catalog.Product"/>
            </param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryCheck(Hotcakes.Commerce.Catalog.Product,Hotcakes.Commerce.Catalog.OptionSelections)">
            <summary>
                Check whether given product is available with options selected by user. This can be bundled product or simple
                product.
            </summary>
            <param name="product">
                Product instance. More information for the given instance can be found at <see cref="T:Hotcakes.Commerce.Catalog.Product"/>
            </param>
            <param name="selections">Product option instance. This holds the information for the customization of the product.</param>
            <returns>
                Returns instance of the <see cref="T:Hotcakes.Commerce.Catalog.InventoryCheckData"/> with message as html string. This instance indicates
                whether product is in stock or out of the stock for given criteria.
            </returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.SimpleProductInventoryCheck(Hotcakes.Commerce.Catalog.Product,Hotcakes.Commerce.Catalog.OptionSelectionList,System.Int32)">
            <summary>
                Check inventory for the non-bundled product.
            </summary>
            <param name="product">
                Product instance. More information for the given instance can be found at <see cref="T:Hotcakes.Commerce.Catalog.Product"/>
            </param>
            <param name="optionSelection">
                <see cref="T:Hotcakes.Commerce.Catalog.OptionSelectionList"/> instance. This holds the information for the
                customization of the product.
            </param>
            <param name="quantity"></param>
            <returns>
                Returns instance of the <see cref="T:Hotcakes.Commerce.Catalog.InventoryCheckData"/> with message as html string. This instance indicates
                whether product is in stock or out of the stock for given criteria.
            </returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.SimpleProductInventoryCheck(Hotcakes.Commerce.Catalog.Product,System.String,System.Int32)">
            <summary>
                Check inventory for the product with variant.
            </summary>
            <param name="product">
                Product instance. More information for the given instance can be found at <see cref="T:Hotcakes.Commerce.Catalog.Product"/>
            </param>
            <param name="variantId">Variant unique identifier.</param>
            <param name="quantity">Required quantity.</param>
            <returns>
                Returns instance of the <see cref="T:Hotcakes.Commerce.Catalog.InventoryCheckData"/> with message as html string. This instance indicates
                whether product is in stock or out of the stock for given criteria.
            </returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductImageCreate(Hotcakes.Commerce.Catalog.ProductImage)">
            <summary>
                Create product image and add analytics information for the new image.
            </summary>
            <param name="image"><see cref="T:Hotcakes.Commerce.Catalog.ProductImage"/> instance</param>
            <returns>Returns true if the product image has been created successfully otherwise return false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductImageUpdate(Hotcakes.Commerce.Catalog.ProductImage)">
            <summary>
                Update product image and add analytics information for the updated image.
            </summary>
            <param name="image"><see cref="T:Hotcakes.Commerce.Catalog.ProductImage"/> instance</param>
            <returns>Returns true if the product image has been updated successfully otherwise return false</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductImageDelete(System.String)">
            <summary>
                Delete product image and add analytics information for the deleted image.
            </summary>
            <param name="productImageId"><see cref="T:Hotcakes.Commerce.Catalog.ProductImage"/> instance</param>
            <returns>Returns true if the product image has been deleted successfully otherwise return false</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryLineItemShipQuantity(Hotcakes.Commerce.Orders.LineItem,System.Int32)">
            <summary>
                Used to update the inventory whenever any order items got shipped.
            </summary>
            <param name="li"> <see cref="T:Hotcakes.Commerce.Orders.LineItem"/> instance with order item information.</param>
            <param name="shippedQuantity">Quantity which going to be shipped for the order.</param>
            <returns>Returns true if inventory properly updated for the shipped item otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryLineItemUnShipQuantity(Hotcakes.Commerce.Orders.LineItem,System.Int32)">
            <summary>
                Used to update inventory whenever any order item needs to be marked as unshipped.
            </summary>
            <param name="li"><see cref="T:Hotcakes.Commerce.Orders.LineItem"/> instance with order item information.</param>
            <param name="quantity">Quantity which going to be unshipped for the order.</param>
            <returns>Returns true if inventory properly updated for the unshipped item otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryLineItemReserveInventory(Hotcakes.Commerce.Orders.LineItem)">
            <summary>
                Used to update the inventory whenever its required to reserve some product quantity based on purchase.
            </summary>
            <param name="li"> <see cref="T:Hotcakes.Commerce.Orders.LineItem"/> instance with order item information</param>
            <returns>Returns the quantity reserved for the given order item</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryLineItemUnreserveInventory(Hotcakes.Commerce.Orders.LineItem)">
            <summary>
                Used to update the inventory whenever needs unreserved the quantity in case of order is canceled or in other
                scenarios.
            </summary>
            <param name="li"><see cref="T:Hotcakes.Commerce.Orders.LineItem"/> instance with order item information</param>
            <returns>Returns true if the inventory has been unreserved successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductTypeDestroy(System.String)">
            <summary>
                Delete specific product type.
            </summary>
            <param name="bvin">Product type unique identifier.</param>
            <returns>Returns true if product type removed successfully otherwise false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductTypeDestoryAllForStore(System.Int64)">
            <summary>
                Remove all product types for the given store.
            </summary>
            <param name="storeId">Store unique identifier</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductTypeAddProperty(System.String,System.Int64)">
            <summary>
                Add custom property to product type.
            </summary>
            <param name="typeBvin">Product type unique identifier</param>
            <param name="propertyId">Product property unique identifer</param>
            <returns>Returns true if the property has been added to product type otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductTypeRemoveProperty(System.String,System.Int64)">
            <summary>
                Remove product type property.
            </summary>
            <param name="typeBvin">Product type unique identifier</param>
            <param name="propertyId">Product property unique identifier</param>
            <returns>Returns true if the property has been removed successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductTypeMovePropertyUp(System.String,System.Int64)">
            <summary>
                Change display order of the property its used  to show on product detail page.
            </summary>
            <param name="productTypeBvin">Product type uniuqe identifier</param>
            <param name="propertyId">Property unique identifier</param>
            <returns>Returns true if the order has been updated successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductTypeMovePropertyDown(System.String,System.Int64)">
            <summary>
                Change display order of the property its used  to show on product detail page.
            </summary>
            <param name="productTypeBvin">Product type uniuqe identifier</param>
            <param name="propertyId">Property unique identifier</param>
            <returns>Returns true if the order has been updated successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductPropertiesDestroy(System.Int64)">
            <summary>
                Delete specific product property
            </summary>
            <param name="id">Product property uniuqe identifier</param>
            <returns>Returns true if the product property has been removed successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductPropertiesFindForType(System.String)">
            <summary>
                Get all product properties for a given product type.
            </summary>
            <param name="productTypeId">Product type unique identifier.</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.ProductProperty"/> for given product type</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductPropertiesFindNotAssignedToType(System.String)">
            <summary>
                Get list of product properties not assigned to given product type
            </summary>
            <param name="productTypeId">Product type unique identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.ProductProperty"/> for given product type.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.TestRolesAccess(System.Collections.Generic.List{Hotcakes.Commerce.Catalog.CatalogRole})">
            <summary>
                Test method for the unit testing.
            </summary>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.TestProductAccess(Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Test method for unit testing.
            </summary>
            <param name="p">Product instance</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.TestCategoryAccess(Hotcakes.Commerce.Catalog.Category)">
            <summary>
                Test method for unit testing.
            </summary>
            <param name="c">Category Instance</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.FindActualProductRoles(Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Get the product roles assigned to specific product.
            </summary>
            <param name="p"><see cref="T:Hotcakes.Commerce.Catalog.Product"/> instance</param>
            <returns>Returns list of product roles</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.VariantsRemoveInvalid(Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Remove all invalid variations for the given product.
            </summary>
            <param name="p"><see cref="T:Hotcakes.Commerce.Catalog.Product"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.UpdateShortVariants(Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Update soring order for the variants to make sure its proper after any variants removed or updated.
            </summary>
            <param name="p"><see cref="T:Hotcakes.Commerce.Catalog.Product"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.VariantsReloadForProduct(Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Clear variants for the given product and reload from database again.
            </summary>
            <param name="p"><see cref="T:Hotcakes.Commerce.Catalog.Product"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.ProductsFindByOption(System.String)">
            <summary>
                Get list of products having the specific option available.
            </summary>
            <param name="optionBvin">Product option unique identifier</param>
            <returns>Returns list of the products</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.AddMissingOptions(Hotcakes.Commerce.Catalog.Variant,System.Collections.Generic.List{Hotcakes.Commerce.Catalog.Option})">
            <summary>
                Add options to product variant.
            </summary>
            <param name="v"><see cref="T:Hotcakes.Commerce.Catalog.Variant"/> instance</param>
            <param name="options">List of <see cref="T:Hotcakes.Commerce.Catalog.Option"/> to check for the given variant</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryIsProductVisible(Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Check if given product is visible on store or not.
            </summary>
            <param name="product"><see cref="T:Hotcakes.Commerce.Catalog.Product"/> instance</param>
            <returns>Returns true if the product is visible based on inventory criteria otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryShipQuantity(System.String,System.String,System.Int32,System.Int32)">
            <summary>
                Update product inventory for the shipped product.
            </summary>
            <param name="productBvin">Product unique identifier</param>
            <param name="variantId">Variant unique identifier</param>
            <param name="shipQuantity">Shipped quantity for given product</param>
            <param name="reservedQunatity">Reserved quantity for given product</param>
            <returns>Returns true if the inventory updated properly for the shipped product.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryUnshipQuantity(System.String,System.String,System.Int32)">
            <summary>
                Update product inventory for the unshipped product quantity.
            </summary>
            <param name="productBvin">Product unique identifier</param>
            <param name="variantId">Variant unique identifier</param>
            <param name="quantity">Quantity needs to be unshipped</param>
            <returns>Returns true if the inventory updated propery for the unshipped product quantity.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryGenerateSingleInventory(System.String,System.String)">
            <summary>
                Generate inventory for the given product based on the variant.
            </summary>
            <param name="bvin">Product unique identifier</param>
            <param name="variantId">Product variant unique identifier</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryReserveQuantity(System.String,System.String,System.Int32)">
            <summary>
                Update inventory of the given product and variant id
                to reserve the quantity for order
            </summary>
            <param name="productId">Product unique identifier</param>
            <param name="variantId">Variant unique identifier</param>
            <param name="quantity">Quantity needs to be reserved</param>
            <returns>Returns reserved quantity</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryReserveQuantity(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
                Reserve product quantity for given product and variant.
            </summary>
            <param name="productBvin">Product unique identifier</param>
            <param name="variantId">Variant unique identifier</param>
            <param name="quantity">Quantity needs to be reserved</param>
            <param name="reserveZeroWhenQuantityTooLow">Flag to indicate whether allow to reserve quantity if Quantity is low.</param>
            <returns>Returns reserved quantity</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryUnreserveQuantity(System.String,System.String,System.Int32)">
            <summary>
                Update product inventory to unreserve the product quantity.
            </summary>
            <param name="productId">Product unique identifier</param>
            <param name="variantId">Variant unique identifier</param>
            <param name="quantity">Quantity needs to be unreserved</param>
            <returns>Returns true if unreserved successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.InventoryQuantityAvailableForPurchase(Hotcakes.Commerce.Catalog.Product,System.String)">
            <summary>
                Check available quantity for purchase for given product and variant.
            </summary>
            <param name="p"><see cref="T:Hotcakes.Commerce.Catalog.Product"/> instance</param>
            <param name="variantId">Variant unique identifier</param>
            <returns>Returns quantity available for purchase</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.RegisterAnalyticsEvents(Hotcakes.Commerce.Catalog.Product,Hotcakes.Commerce.Catalog.Product)">
            <summary>
                Register analytics events information for the given product.
                Register events for product copy, price changed and image changed.
            </summary>
            <param name="oldValue">Old <see cref="T:Hotcakes.Commerce.Catalog.Product"/> instance </param>
            <param name="newValue">New <see cref="T:Hotcakes.Commerce.Catalog.Product"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.RegisterAnalyticsEvents(Hotcakes.Commerce.Catalog.Category,Hotcakes.Commerce.Catalog.Category)">
            <summary>
                Register analytics events information for the category.
                Register Category copy changed, image changed events.
            </summary>
            <param name="oldValue">Old <see cref="T:Hotcakes.Commerce.Catalog.Category"/> instance </param>
            <param name="newValue">New  <see cref="T:Hotcakes.Commerce.Catalog.Category"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.RegisterAnalyticsEvents(Hotcakes.Commerce.Catalog.ProductImage)">
            <summary>
                Register product changed event
            </summary>
            <param name="image"><see cref="T:Hotcakes.Commerce.Catalog.ProductImage"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.RegisterAnalyticsEvents(Hotcakes.Commerce.Catalog.BundledProduct)">
            <summary>
                Register product bundled event.
            </summary>
            <param name="bundledProduct"><see cref="T:Hotcakes.Commerce.Catalog.BundledProduct"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CatalogService.RegisterAnalyticsEvents(System.String)">
            <summary>
                Register category product updated event.
            </summary>
            <param name="categoryId">Category unique identifer</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.Categories">
            <summary>
                Category repository interface get resolved at run time based on the class impleted this interface.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.CategoriesXProducts">
            <summary>
                Category and product mapping data repository.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_ProductXCategory table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.ProductRelationships">
            <summary>
                Related product information repository.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_ProductRelationships table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.BundledProducts">
            <summary>
                Bundled products repository.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_BundledProducts table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.ProductImages">
            <summary>
                Product images repository.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_ProductImage table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.ProductReviews">
            <summary>
                Product reviews repository.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_ProductReview table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.ProductOptions">
            <summary>
                Product options repository. This holds additional options available for any product.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_ProductOptions table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.ProductsXOptions">
            <summary>
                Products options which has been configured and set for the product. This options available when go to product
                details page.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_ProductXOption table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.Products">
            <summary>
                Products repository interface. This can be used to create the different class to as per business need to
                perform operation on products.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_Product table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.ProductFiles">
            <summary>
                Product files repository.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_ProductFile table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.VolumeDiscounts">
            <summary>
                Product discounts information repository.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_ProductVolumeDiscounts table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.ProductPropertyValues">
            <summary>
                Product properties values repository.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_ProductPropertyValue table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.ProductInventories">
            <summary>
                Product inventory information repository.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_ProductInventory table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.ProductTypes">
            <summary>
                Product types information repository.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_ProductType and hcc_ProductTypeTranslation table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.ProductTypesXProperties">
            <summary>
                Product type properties information repository.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_ProductTypeXProductProperty table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.ProductProperties">
            <summary>
                Product property information repository.
            </summary>
            <remarks>
                Used to perform different queries and operation against hcc_ProductProperty and hcc_ProductPropertyTranslation
                table.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.WishListItems">
            <summary>
                Wishlist items information for users repository.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_WishListItem table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.MembershipTypes">
            <summary>
                Product MembershipType information repository. Each product can be controlled by its type also based on the
                membership assigned to product type.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_MembershipProductType table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.CatalogRoles">
            <summary>
                Catalog roles information. Its get mapped to the product to control product view and operation.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_CatalogRoles table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.GiftCards">
            <summary>
                Gift card information repository.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_GiftCard table.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.ProductPropertiesChoice">
            <summary>
                Product properties choice options information.
            </summary>
            <remarks>
                Used to perform different queries and operation against hcc_ProductPropertyChoice and
                hcc_ProductPropertyChoiceTranslation table.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CatalogService.ProductVariants">
            <summary>
                Product variant repository.
            </summary>
            <remarks>Used to perform different queries and operation against hcc_Variants table.</remarks>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.CategoryFacet">
            <summary>
                Category additional information stored in as Category property
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryFacet.Id">
            <summary>
                Unique identifier of the facet
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryFacet.CategoryId">
            <summary>
                Unique identifier of the category for which this facet is created
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryFacet.PropertyId">
            <summary>
                Property id of the facet
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryFacet.ParentPropertyId">
            <summary>
                Parent property id of the facet
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryFacet.SortOrder">
            <summary>
                Display order to show the facet information of the category on category viewer page
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryFacet.FilterName">
            <summary>
                Name of the filter chosen from the facet option
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryFacet.DisplayMode">
            <summary>
                Facet can be displayed in single or multiple mode and laid out accordingly on the page.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryFacet.StoreId">
            <summary>
                Unique store identifier
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetKeyHelper.ParseKeyToList(System.String)">
            <summary>
                Converts a text key to a list of longs
            </summary>
            <param name="key">Text key with comma separated values</param>
            <returns>Return list of long number</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetKeyHelper.ParseKeyToSqlList(System.String)">
            <summary>
                Converts a string key to a list of non-zero
                long values for passing to SQL
            </summary>
            <param name="key">Comma separated list of numbers</param>
            <returns>Return the string for SQL query</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetKeyHelper.BuildKey(System.Collections.Generic.List{System.Int64})">
            <summary>
                Converts a list of longs to a string key using the default separator of "-"
            </summary>
            <param name="numbers">List of numbers</param>
            <returns>Return string based on given list of numbers</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetKeyHelper.BuildKey(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
                Converts a list of longs to a string key with a separator specified
            </summary>
            <param name="numbers">List of long number</param>
            <param name="separator">seperator by whihch needs to join the numbers</param>
            <returns>Returns string by combining list of numbers</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetKeyHelper.BuildEmptyKey(System.Int32)">
            <summary>
                Creates an empty string key with the specified number of values
            </summary>
            <param name="count">How many places to hold</param>
            <returns>Return key string</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetKeyHelper.ReplaceKeyValue(System.String,System.Int32,System.Int64)">
            <summary>
                Takes a string based key and replaced the value at a specific index with a new value
            </summary>
            <param name="key">key to modify</param>
            <param name="indexToReplace">index of location to modify</param>
            <param name="newValue">value to replace</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetKeyHelper.ClearSelfAndChildrenFromKey(System.String,System.Collections.Generic.List{Hotcakes.Commerce.Catalog.CategoryFacet},System.Int64)">
            <summary>
                Clear the key value for the given facet id
            </summary>
            <param name="key">Key to be cleared</param>
            <param name="allFacets">List of facet info</param>
            <param name="idToClear">Id of the facet for which needs to clear the key </param>
            <returns>Return new cleared key for the given facet id</returns>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.CategoryFacetManager">
            <summary>
                Peform operation on the hcc_CategoryXProperty table.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.CategoryFacetManager.productValueRepository">
            <summary>
                ProductProperty repository to perform operation on hcc_ProductPropertyValue table.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.CopyDataToModel(Hotcakes.Commerce.Data.EF.hcc_CategoryXProperty,Hotcakes.Commerce.Catalog.CategoryFacet)">
            <summary>
                Convert the database table row to the model.
            </summary>
            <param name="data">hcc_CategoryXProperty table row data</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> instance to be used on system</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.CopyModelToData(Hotcakes.Commerce.Data.EF.hcc_CategoryXProperty,Hotcakes.Commerce.Catalog.CategoryFacet)">
            <summary>
                Convert the model data as hcc_CategoryXProperty table row data.
            </summary>
            <param name="data">hcc_CategoryXProperty table row data</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> instance to be used on system</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.Create(Hotcakes.Commerce.Catalog.CategoryFacet)">
            <summary>
                Create new <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/>.
            </summary>
            <param name="item"><see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> instance</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.Update(Hotcakes.Commerce.Catalog.CategoryFacet)">
            <summary>
                Update <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/>.
            </summary>
            <param name="c"><see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> instance</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.Delete(System.Int64)">
            <summary>
                Delete <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> by its id.
            </summary>
            <param name="id">Unique identifier of the Facet</param>
            <returns>Return true if its removed successfully otherwise returns false</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.Find(System.Int64)">
            <summary>
                Find the <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> by id in current store.
            </summary>
            <param name="id">Unique identifier of the Facet</param>
            <returns>Returns CategoryFacet instance if find by given id</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.FindForAllStores(System.Int64)">
            <summary>
                Find the <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> by id in all stores.
            </summary>
            <param name="id">Unique identifier of the Facet</param>
            <returns>Returns CategoryFacet instance if find by given id</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.FindByParentInList(System.Collections.Generic.List{Hotcakes.Commerce.Catalog.CategoryFacet},System.Int64)">
            <summary>
                Get list of all <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> for matching parent id from given list.
            </summary>
            <param name="all">List of <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> instances</param>
            <param name="parentId">Parent facet unique identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> instances for given criteria</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.FindByParent(System.Int64)">
            <summary>
                Get list of all <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> for matching parent id from table.
            </summary>
            <param name="parentId">Parent facet unique identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> instances for given criteria</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.FindByCategory(System.String)">
            <summary>
                Get list of all <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> for given category.
            </summary>
            <param name="categoryBvin">Category unique identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> instances for given criteria</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.FindMaxSortForCategoryParent(System.String,System.Int64)">
            <summary>
                Get maximum sort order for the <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> for given Category and parent
                <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/>.
            </summary>
            <param name="categoryBvin">Category unique identifier</param>
            <param name="parentPropertyId">Parent <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> identifier</param>
            <returns>Maximum sort order for matching criteria</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.FindCountsOfVisibleFacets(System.String,System.Collections.Generic.List{Hotcakes.Commerce.Catalog.CategoryFacet},System.Collections.Generic.List{Hotcakes.Commerce.Catalog.ProductProperty})">
            <summary>
                Get list of <see cref="T:Hotcakes.Commerce.Catalog.ProductFacetCount"/> count group by the key
            </summary>
            <param name="key">Key by which needs to found facets</param>
            <param name="allFacets">List of <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> which needs to be searched for</param>
            <param name="properties">List of <see cref="T:Hotcakes.Commerce.Catalog.ProductProperty"/> to get the id and generate the new key</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.FindProductCountsForKeys(System.Collections.Generic.List{System.String})">
            <summary>
                Get list of products for given keys.
            </summary>
            <param name="sqlKeys">List of Keys</param>
            <returns>Return list of <see cref="T:Hotcakes.Commerce.Catalog.ProductFacetCount"/> for count information for each key</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.FindVisibleFacetsIdsForKey(System.String,System.Collections.Generic.List{Hotcakes.Commerce.Catalog.CategoryFacet})">
            <summary>
                Find all visible <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> for the given key.
            </summary>
            <param name="key">Key to be searched for</param>
            <param name="allFacets">List of <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/></param>
            <returns>Return list of <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> ids for matching criteria</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.FindVisibleChildren(System.String,System.Collections.Generic.List{Hotcakes.Commerce.Catalog.CategoryFacet},System.Int64)">
            <summary>
                Find visible children for given parent id.
            </summary>
            <param name="key">Key to be searched for</param>
            <param name="allFacets">List of <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> in which needs to search</param>
            <param name="parentId">Parent <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> id</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> ids for matching criteria</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryFacetManager.IsFacetSelectedInKey(System.String,System.Collections.Generic.List{Hotcakes.Commerce.Catalog.CategoryFacet},System.Int64)">
            <summary>
                Check if given facet is selected for the given key.
            </summary>
            <param name="key">Key string</param>
            <param name="allFacets">List of <see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> which needs to be checked for</param>
            <param name="facetId"><see cref="T:Hotcakes.Commerce.Catalog.CategoryFacet"/> id which needs to be check</param>
            <returns>Returns true if its selected in given key otherwise returns false</returns>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository">
            <summary>
                Perform database operation on hcc_ProductXCategory table.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.CopyDataToModel(Hotcakes.Commerce.Data.EF.hcc_ProductXCategory,Hotcakes.Commerce.Catalog.CategoryProductAssociation)">
            <summary>
                Copy database object class to View Model
            </summary>
            <param name="data"><see cref="T:Hotcakes.Commerce.Data.EF.hcc_ProductXCategory"/> instance</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.CategoryProductAssociation"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.CopyModelToData(Hotcakes.Commerce.Data.EF.hcc_ProductXCategory,Hotcakes.Commerce.Catalog.CategoryProductAssociation)">
            <summary>
                Copy View Model to database object model.
            </summary>
            <param name="data"><see cref="T:Hotcakes.Commerce.Data.EF.hcc_ProductXCategory"/> instance</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.CategoryProductAssociation"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.Find(System.Int64)">
            <summary>
                Find CategoryProductAssociation by id.
            </summary>
            <param name="id">ProductCategoryAssociation unique identifier</param>
            <returns>Returns <see cref="T:Hotcakes.Commerce.Catalog.CategoryProductAssociation"/> instance for given id</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.FindByCategoryAndProduct(System.String,System.String)">
            <summary>
                Find CategoryProductAssociation.
            </summary>
            <param name="categoryId">Unique category identifier</param>
            <param name="productId">Unique product identifier</param>
            <returns>Returns <see cref="T:Hotcakes.Commerce.Catalog.CategoryProductAssociation"/> instance for given parameters</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.FindByCategoryAndProduct(System.String,System.String,System.Int64)">
            <summary>
                Find CategoryProductAssociation.
            </summary>
            <param name="categoryId">Unique category identifier</param>
            <param name="productId">Unique category identifier</param>
            <param name="storeId">Unique storeid</param>
            <returns>Returns <see cref="T:Hotcakes.Commerce.Catalog.CategoryProductAssociation"/> instance for given parameters</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.Create(Hotcakes.Commerce.Catalog.CategoryProductAssociation)">
            <summary>
                Create new CategoryProductAssociation
            </summary>
            <param name="item"><see cref="T:Hotcakes.Commerce.Catalog.CategoryProductAssociation"/> instance</param>
            <returns>Returns true if new record created successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.FindMaxSort(System.String)">
            <summary>
                Find maximum sort order for the given category
            </summary>
            <param name="categoryId">Category unique identifier</param>
            <returns>Returns max sort number</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.Update(Hotcakes.Commerce.Catalog.CategoryProductAssociation)">
            <summary>
                Update CategoryProductAssociation.
            </summary>
            <param name="c"><see cref="T:Hotcakes.Commerce.Catalog.CategoryProductAssociation"/> instance</param>
            <returns>Returns true if new record updated successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.FindAll">
            <summary>
                Find all CategoryProductAssociation.
            </summary>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategoryProductAssociation"/></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.FindAllForAllStores">
            <summary>
                Get all CategoryProductAssociation for current store.
            </summary>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategoryProductAssociation"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.FindAllPaged(System.Int32,System.Int32)">
            <summary>
                Get list of CategoryProductAssociation with paging for current stored
            </summary>
            <param name="pageNumber">Current page number</param>
            <param name="pageSize">PageSize</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategoryProductAssociation"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.FindAllPagedForAllStores(System.Int32,System.Int32)">
            <summary>
                Get list of CategoryProductAssociation with paging from all stores
            </summary>
            <param name="pageNumber">Current PageNumber</param>
            <param name="pageSize">Current PageSize</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategoryProductAssociation"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.FindForCategory(System.String,System.Int32,System.Int32)">
            <summary>
                Find list of CategoryProductAssociation for a given category.
            </summary>
            <param name="categoryId">Category unique identifier</param>
            <param name="pageNumber">Current PageNumber</param>
            <param name="pageSize">PageSize</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategoryProductAssociation"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.FindForProduct(System.String,System.Int32,System.Int32)">
            <summary>
                Find list of CategoryProductAssociation for a given product.
            </summary>
            <param name="productId">Product unique identifier</param>
            <param name="pageNumber">Current PageNumber</param>
            <param name="pageSize">PageSize</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategoryProductAssociation"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.DeleteAllForCategory(System.String)">
            <summary>
                Delete all CategoryProductAssociation for given category.
            </summary>
            <param name="categoryId">Category unique identifier</param>
            <returns>Returns true if records removed successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.DeleteAllForProduct(System.String)">
            <summary>
                Delete all CategoryProductAssociation for given product.
            </summary>
            <param name="productId">Product unique identifier</param>
            <returns>Returns true if records removed successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.DeleteAllForProductForStore(System.String,System.Int64)">
            <summary>
                Delete all CategoryProductAssociation for given product and store.
            </summary>
            <param name="productId">Product unique identifier</param>
            <param name="storeId">Store unique identifier</param>
            <returns>Returns true if records removed successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.RemoveProductFromCategory(System.String,System.String)">
            <summary>
                Remove product category association for given product and category.
            </summary>
            <param name="productId">Product unique identifier</param>
            <param name="categoryId">Category unique identifier</param>
            <returns>Returns true if the removed successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.UpdateSortOrderForProduct(System.String,System.String,System.Int32)">
            <summary>
                Update sort order of the CategoryProductAssociation.
            </summary>
            <param name="categoryId">Category unique identifier</param>
            <param name="productId">Product unique identifier</param>
            <param name="newSortOrder">Sort order needs to be set for given criteria</param>
            <returns>Returns true if new order set successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.ResortProducts(System.String,System.Collections.Generic.List{System.String})">
            <summary>
                Update soring order of all the products for given category
            </summary>
            <param name="categoryId">Category unique identifier</param>
            <param name="sortedIds">List of sort order id</param>
            <returns>Returns true if order set successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociationRepository.DestroyAllForStore(System.Int64)">
            <summary>
                Remove all CategoryProductAssociation for given store id.
            </summary>
            <param name="storeId">Store unique identifier</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategorySnapshot.ToDto">
            <summary>
                Allows you to convert the current CategorySnapshot object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of CategorySnapshotDTO</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.Bvin">
            <summary>
                This is the ID of the category.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.ParentId">
            <summary>
                Having an ID here will make this category a child or nested category of the category that matches this ID. This
                helps to create nested navigation and other features.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.Name">
            <summary>
                This is the name of the category that the customers will see in their views.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.Description">
            <summary>
                If the description exists, it will be placed below the category banner.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.SourceType">
            <summary>
                Allows you to define whether your category is a typical category or a placeholder link to another resource.
            </summary>
            <remarks>Always use the CategorySourceType enum for this property.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.ImageUrl">
            <summary>
                This is the image of the category that you want associated with it in the various views. It also is used to
                generate the category thumbnail.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.BannerImageUrl">
            <summary>
                If populated with a URL, the specified banner will be displayed in the category header.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.CustomPageUrl">
            <summary>
                If populated with a URL, this value will be used as the URL for the category when clicked.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.CustomPageOpenInNewWindow">
            <summary>
                If true and if using a category as a custom link, this will cause the link to be opened in a new window when the
                customer clicks on it. This is only used in the CategoryRotator content block.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.ShowInTopMenu">
            <summary>
                If true, this category will be shown in the initial list of categories in category lists.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.Hidden">
            <summary>
                Except when overridden by a “sort” querystring parameter, this value determines how the products in the category
                will be sorted.
            </summary>
            <remarks>This needs to be tested. It doesn't appear to be referenced anywhere.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.RewriteUrl">
            <summary>
                This is the slug of the URL, or the last part of the URL to be used to get to this category's landing page. It must
                be unique. If empty, the application will create one based upon the name of the category.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.SortOrder">
            <summary>
                Allows you to define how the products in this category will be ordered.
            </summary>
            <remarks>Always use the CategorySortOrderDTO enum for this property.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategorySnapshot.MetaTitle">
            <summary>
                This title is used to adjust the title in the source code of the category landing page for SEO.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.CategoryRepository">
            <summary>
                Peform database operation on  hcc_Category and hcc_CategoryTranslation table.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.Create(Hotcakes.Commerce.Catalog.Category)">
            <summary>
                Create new category.
            </summary>
            <param name="item"><see cref="T:Hotcakes.Commerce.Catalog.Category"/> instance</param>
            <returns>Returns true if category created successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.Update(Hotcakes.Commerce.Catalog.Category)">
            <summary>
                Update category.
            </summary>
            <param name="c"><see cref="T:Hotcakes.Commerce.Catalog.Category"/> instance</param>
            <returns>Returns true if category updated successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.UpdateAdv(Hotcakes.Commerce.Catalog.Category)">
            <summary>
                Update category
            </summary>
            <param name="c"><see cref="T:Hotcakes.Commerce.Catalog.Category"/> instance</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.Delete(System.String)">
            <summary>
                Delete category.
            </summary>
            <param name="bvin">Category unique identifier</param>
            <returns>Returns true if category removed successfully otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.DestroyAllForStore(System.Int64)">
            <summary>
                Remove all categories for given store.
            </summary>
            <param name="storeId">Store unique identifier</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.Find(System.String)">
            <summary>
                Search category by unique identifier in current store.
            </summary>
            <param name="bvin">Category unique identifier</param>
            <returns>Returns <see cref="T:Hotcakes.Commerce.Catalog.Category"/> instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindForAllStores(System.String)">
            <summary>
                Search category on all stores.
            </summary>
            <param name="bvin">Category unique identifier</param>
            <returns>Returns <see cref="T:Hotcakes.Commerce.Catalog.Category"/> instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindBySlug(System.String)">
            <summary>
                Find category by slug
            </summary>
            <param name="urlSlug">Slug string parameter</param>
            <returns>Returns <see cref="T:Hotcakes.Commerce.Catalog.Category"/> instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindBySlugForStore(System.String,System.Int64)">
            <summary>
                Find category by slug in given store
            </summary>
            <param name="urlSlug">Slug string parameter in URL</param>
            <param name="storeId">Store unique identifier</param>
            <returns>Returns <see cref="T:Hotcakes.Commerce.Catalog.Category"/> instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindAll">
            <summary>
                Get list of all categories.
            </summary>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategorySnapshot"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindAllForAllStores">
            <summary>
                Get list of all categories from all stores.
            </summary>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategorySnapshot"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindAllSnapshotsPaged(System.Int32,System.Int32)">
            <summary>
                Get list of paged category information.
            </summary>
            <param name="pageNumber">Current page number</param>
            <param name="pageSize">Page size</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategorySnapshot"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindAllSnapshotsPagedForAllStores(System.Int32,System.Int32)">
            <summary>
                Get list of paged category information from all stores.
            </summary>
            <param name="pageNumber">Current page number</param>
            <param name="pageSize">Page size</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategorySnapshot"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindAllPaged(System.Int32,System.Int32)">
            <summary>
                Get list of paged category information.
            </summary>
            <param name="pageNumber">Current page number</param>
            <param name="pageSize">Page size</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategorySnapshot"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindChildren(System.String)">
            <summary>
                Get list of children category for given parent category.
            </summary>
            <param name="parentId">Categoy unique identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategorySnapshot"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindChildren(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
                Get list of children category for given parent category.
            </summary>
            <param name="parentId">Categoy unique identifier</param>
            <param name="pageNumber">Page number</param>
            <param name="pageSize">Page Size</param>
            <param name="totalRowCount">Total records reference parameter</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategorySnapshot"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindVisibleChildren(System.String)">
            <summary>
                Get list of visible categories for given parent category.
            </summary>
            <param name="parentId">Category unique identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategorySnapshot"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindVisibleChildren(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
                Get list of visible categories for given parent category.
            </summary>
            <param name="parentId">Category unique identifier</param>
            <param name="pageNumber">Page number</param>
            <param name="pageSize">Page Size</param>
            <param name="totalRowCount">Total records reference parameter</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategorySnapshot"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindMany(System.Collections.Generic.List{System.String})">
            <summary>
                Find list of categories for given unique identifier list.
            </summary>
            <param name="bvins">List of category unique identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.Category"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindManySnapshots(System.Collections.Generic.List{System.String})">
            <summary>
                Find list of categories for given unique identifier list.
            </summary>
            <param name="bvins">List of category unique identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.CategorySnapshot"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.FindMany(System.String)">
            <summary>
                Get list of categories for matching name
            </summary>
            <param name="name">Category name</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.Category"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryRepository.CopyModelToItem(Hotcakes.Web.Data.JoinedItem{Hotcakes.Commerce.Data.EF.hcc_Category,Hotcakes.Commerce.Data.EF.hcc_CategoryTranslation},Hotcakes.Commerce.Catalog.Category)">
            <summary>
                Copies the model to item.
            </summary>
            <param name="data">The data.</param>
            <param name="model">The model.</param>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.Option">
            <summary>
                This is the primary object that is used to manage all aspects of product options in the main application
            </summary>
            <remarks>The REST API equivalent is OptionDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Option.SetProcessor(Hotcakes.Commerce.Catalog.OptionTypes)">
            <summary>
                Use this method to define which processor the current Option should be using.
            </summary>
            <param name="type">OptionType - the type of option the current object should be defined as.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Option.Factory(Hotcakes.Commerce.Catalog.OptionTypes)">
            <summary>
                This is a shared method to instantiate a new Option, set it's processor and then return the Option back to the
                calling code.
            </summary>
            <param name="type">OptionType - the type of option the new Option object should be defined as.</param>
            <returns>A new instance of Option with defaults set, except for the OptionType.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Option.Render">
            <summary>
                Outputs the HTML required to display this Option in the web page. This method uses the Processor property.
            </summary>
            <returns>An HTNL-friendly string representation of the Option, based upon its respective OptionType.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Option.RenderWithSelection(Hotcakes.Commerce.Catalog.OptionSelectionList,System.String)">
            <summary>
                Outputs the HTML required to display this Option in the web page, with the default item selected, when appropriate.
                This method uses the Processor property.
            </summary>
            <param name="selections">A listing of the default selections that should be made in the output HTML.</param>
            <param name="prefix">
                (optional) When specified, this value will be included as a prefix to the Name attribute of the
                rendered items.
            </param>
            <returns>
                An HTML-friendly string representation of the Option, based upon its respective OptionType, with default
                selections made.
            </returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Option.RenderAsControl(System.Web.UI.WebControls.PlaceHolder,System.String)">
            <summary>
                Creates the respective HtmlControl object of this Option, based upon the specified OptionType.
            </summary>
            <param name="ph">An instance of the Placeholder control to add the resulting object to.</param>
            <param name="prefix">
                (optional) When specified, this value will be included as a prefix to the Id and Name attributes
                of the rendered items.
            </param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Option.ParseFromPlaceholder(System.Web.UI.WebControls.PlaceHolder,System.String)">
            <summary>
                Looks for the respective Option in the supplied Placeholder control, and returns a list of IDs for the selected
                items in the Option.
            </summary>
            <param name="ph">The Placeholder object to look through for this Option and it's items.</param>
            <param name="prefix">
                (optional) When supplied, this value is used to help identify the Option control in the
                placeholder.
            </param>
            <returns>A listing of the items selected in the Option.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Option.ParseFromForm(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
                Allows you to access all of the selected values for Options of the specified form in a single method.
            </summary>
            <param name="form">An instance of the form from the Request object.</param>
            <param name="prefix">
                (optional) When supplied, this value is used to help identify the correct form to pull the values
                from.
            </param>
            <returns>All of the selected values of the specified form are returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Option.CartDescription(Hotcakes.Commerce.Catalog.OptionSelectionList)">
            <summary>
                Allows you to return a value that contains the Option and a comma delimited list of its items for identifying in
                the description of the Cart/Order. This is primarily called when a product is being converted to a line item for a
                cart/order.
            </summary>
            <param name="selections">A parsed collection of the selections made on this Option.</param>
            <returns>A comma delimited string of the Option items preceded by the option name.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Option.AddItem(System.String)">
            <summary>
                Allows you to add a new OptionItem to the current Option.
            </summary>
            <param name="itemName">The name that you want the new OptionItem to have. This is a localizable value.</param>
            <returns>If true, the OptionItem was added successfully.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Option.AddItem(Hotcakes.Commerce.Catalog.OptionItem)">
            <summary>
                Allows you to add a new OptionItem to the current Option.
            </summary>
            <param name="item">A pre-populated instance of an OptionItem.</param>
            <returns>If true, the OptionItem was added successfully.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Option.ItemsContains(System.String,System.Boolean)">
            <summary>
                When called, this method will return true if the supplied BVIN matches the BVIN of an OptionItem in the Items
                property.
            </summary>
            <param name="itemBvin">This is the unique ID of the OptionItem you are looking for.</param>
            <param name="includeLabels">if set to <c>true</c> [include labels].</param>
            <returns>
                If true, the OptionItem is in this Option.
            </returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Option.Clone">
            <summary>
                Use this method to create a copy of the current option.
            </summary>
            <returns>A duplicate of the current Option.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Option.ToDto">
            <summary>
                Allows you to convert the current product option object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of OptionDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Option.FromDto(Hotcakes.CommerceDTO.v1.Catalog.OptionDTO)">
            <summary>
                Allows you to populate the current product option object using an instance of OptionDTO
            </summary>
            <param name="dto">An instance of the product option from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Option.Processor">
            <summary>
                This property helps the rest of the application know how to display and format selections of the current option.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Option.Bvin">
            <summary>
                The primary key for the option
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Option.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Option.OptionType">
            <summary>
                Returns a specific value to define what kind of option this is. This property is accessible through the Processor
                property as well.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Option.Name">
            <summary>
                This is the name of the option as you want it to appear to customers. This is a localizable property.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Option.NameIsHidden">
            <summary>
                If a merchant sets this to true, the viewset should observe the setting and not chose the label.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Option.IsVariant">
            <summary>
                If enabled, this property defines that the option can be used as a variants to create a new SKU, price options, and
                more.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Option.IsShared">
            <summary>
                If true, this property will allow this choice to be used across multiple products.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Option.IsColorSwatch">
            <summary>
                Returns true if this option is supposed to display a swatch on the product view
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Option.Settings">
            <summary>
                Used with the HTML OptionType when this is a Shared choice to save the default option value. All other OptionTypes
                will ignore this value.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Option.TextSettings">
            <summary>
                Used with the HTML OptionType when this is not a Shared choice to save the default option value. All other
                OptionTypes will ignore this value.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Option.Items">
            <summary>
                Contains a list of items that belong to this option, such as individual sizes when this is a garment size option.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.OptionItemRepository">
            <summary>
                Peform datbase operation on hcc_ProductOptionsItems and hcc_ProductOptionItemTranslation tables.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.CopyItemToModel(Hotcakes.Commerce.Data.EF.hcc_ProductOptionsItems,Hotcakes.Commerce.Catalog.OptionItem)">
            <summary>
                Copy database object model to view model.
            </summary>
            <param name="data"><see cref="T:Hotcakes.Commerce.Data.EF.hcc_ProductOptionsItems"/> instance</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.OptionItem"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.CopyTransToModel(Hotcakes.Commerce.Data.EF.hcc_ProductOptionItemTranslation,Hotcakes.Commerce.Catalog.OptionItem)">
            <summary>
                Copy name from database object model to view model.
            </summary>
            <param name="data"><see cref="T:Hotcakes.Commerce.Data.EF.hcc_ProductOptionsItems"/> instance</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.OptionItem"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.CopyModelToItem(Hotcakes.Web.Data.JoinedItem{Hotcakes.Commerce.Data.EF.hcc_ProductOptionsItems,Hotcakes.Commerce.Data.EF.hcc_ProductOptionItemTranslation},Hotcakes.Commerce.Catalog.OptionItem)">
            <summary>
                Copy data from view model to database object model.
            </summary>
            <param name="data">Joined database object model</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.OptionItem"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.CopyModelToTrans(Hotcakes.Web.Data.JoinedItem{Hotcakes.Commerce.Data.EF.hcc_ProductOptionsItems,Hotcakes.Commerce.Data.EF.hcc_ProductOptionItemTranslation},Hotcakes.Commerce.Catalog.OptionItem)">
            <summary>
                Copy name from view model to database object model.
            </summary>
            <param name="data">Joined database object model</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.OptionItem"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.Find(System.String)">
            <summary>
                Find optionitem by unique identifier
            </summary>
            <param name="bvin">OptionItem unique identifier</param>
            <returns>Returns <see cref="T:Hotcakes.Commerce.Catalog.OptionItem"/> instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.Create(Hotcakes.Commerce.Catalog.OptionItem)">
            <summary>
                Create optionitem.
            </summary>
            <param name="item"><see cref="T:Hotcakes.Commerce.Catalog.OptionItem"/> instance</param>
            <returns>Returns true if new optionitem created otherwise returns false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.Update(Hotcakes.Commerce.Catalog.OptionItem)">
            <summary>
                Update optionitem
            </summary>
            <param name="item"><see cref="T:Hotcakes.Commerce.Catalog.OptionItem"/> reference</param>
            <returns>Returns true if optionitem updated successfully.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.ClearOtherDefaultItems(Hotcakes.Commerce.Catalog.OptionItem)">
            <summary>
                Clear isdefault for all other optionitem than the current one.
            </summary>
            <param name="item"><see cref="T:Hotcakes.Commerce.Catalog.OptionItem"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.Delete(System.String)">
            <summary>
                Delete optionitem
            </summary>
            <param name="bvin">OptionItem unique identifier</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.FindForOption(System.String)">
            <summary>
                Find list of option items by given option id
            </summary>
            <param name="optionId">option unique identifier</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.FindForManyOption(System.Collections.Generic.List{System.String})">
            <summary>
                Find list of optionitems for given option ids
            </summary>
            <param name="optionIds">List of Options ids</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.OptionItem"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.DeleteForOption(System.String)">
            <summary>
                Delete all matching optionitems
            </summary>
            <param name="optionBvin">Option unique identifier</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.Resort(System.String,System.Collections.Generic.List{System.String})">
            <summary>
                Resort the options items for given option.
            </summary>
            <param name="optionBvin">Option unique identifier</param>
            <param name="sortedIds">List of sort ids</param>
            <returns>Returns true if the resort done successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.UpdateSortOrderForOptionItem(System.String,System.String,System.Int32)">
            <summary>
                Update the sort order for given option item in the option.
            </summary>
            <param name="optionBvin">Option unique identifier</param>
            <param name="optionItemBvin">Option item unique identifier</param>
            <param name="newSortOrder">New sorting order</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.MergeList(System.String,System.Collections.Generic.List{Hotcakes.Commerce.Catalog.OptionItem})">
            <summary>
                Add given list of option items to the given option
            </summary>
            <param name="optionBvin">Option unique identifier</param>
            <param name="subitems">List of <see cref="T:Hotcakes.Commerce.Catalog.OptionItem"/> to be added to the option</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItemRepository.Clone(System.String,System.String)">
            <summary>
                Clone option items from one option to another option
            </summary>
            <param name="productOptionId">Source product option unique identifier</param>
            <param name="newProductOptionId">Destination product option unique identifier</param>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.OptionRepository">
            <summary>
                Perform database operation on hcc_ProductOptions and hcc_ProductOptionTranslation tables
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.CopyItemToModel(Hotcakes.Commerce.Data.EF.hcc_ProductOptions,Hotcakes.Commerce.Catalog.Option)">
            <summary>
                Copy from database object model to view model.
            </summary>
            <param name="data"><see cref="T:Hotcakes.Commerce.Data.EF.hcc_ProductOptions"/> instance</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.Option"/> instance </param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.CopyTransToModel(Hotcakes.Commerce.Data.EF.hcc_ProductOptionTranslation,Hotcakes.Commerce.Catalog.Option)">
            <summary>
                Copy name from database object model to view model
            </summary>
            <param name="data"><see cref="T:Hotcakes.Commerce.Data.EF.hcc_ProductOptions"/> instance</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.Option"/> instance </param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.CopyModelToItem(Hotcakes.Web.Data.JoinedItem{Hotcakes.Commerce.Data.EF.hcc_ProductOptions,Hotcakes.Commerce.Data.EF.hcc_ProductOptionTranslation},Hotcakes.Commerce.Catalog.Option)">
            <summary>
                Copy viewer model to database object model
            </summary>
            <param name="data">Joined item for database object model</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.Option"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.CopyModelToTrans(Hotcakes.Web.Data.JoinedItem{Hotcakes.Commerce.Data.EF.hcc_ProductOptions,Hotcakes.Commerce.Data.EF.hcc_ProductOptionTranslation},Hotcakes.Commerce.Catalog.Option)">
            <summary>
                Copy view model name to database object model
            </summary>
            <param name="data">Joined item for database object model</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.Option"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.GetSubItems(System.Collections.Generic.List{Hotcakes.Commerce.Catalog.Option})">
            <summary>
                Get list of option items for given options
            </summary>
            <param name="models">List of <see cref="T:Hotcakes.Commerce.Catalog.Option"/> instances</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.MergeSubItems(Hotcakes.Commerce.Catalog.Option)">
            <summary>
                Merge the option and its option items.
            </summary>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.Option"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.Find(System.String)">
            <summary>
                Find option by unique identifier
            </summary>
            <param name="bvin">Option unique identifier</param>
            <returns>Returns <see cref="T:Hotcakes.Commerce.Catalog.Option"/> instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.FindForAllStores(System.String)">
            <summary>
                Get option by unique identifier from all store
            </summary>
            <param name="bvin">Option unique identifier</param>
            <returns>Returns <see cref="T:Hotcakes.Commerce.Catalog.Option"/> instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.Create(Hotcakes.Commerce.Catalog.Option)">
            <summary>
                Create new option
            </summary>
            <param name="item"><see cref="T:Hotcakes.Commerce.Catalog.Option"/> instance</param>
            <returns>Returns true if option created successfully.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.Update(Hotcakes.Commerce.Catalog.Option)">
            <summary>
                Update Option
            </summary>
            <param name="c"><see cref="T:Hotcakes.Commerce.Catalog.Option"/> instance</param>
            <returns>Returns true if the option updated successully.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.Delete(System.String)">
            <summary>
                Delete option
            </summary>
            <param name="bvin">Option unique identifier</param>
            <returns>Returns true if option deleted successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.Delete(System.Collections.Generic.List{System.String})">
            <summary>
                Delete list of options
            </summary>
            <param name="optionBvins">List of option unique identifier</param>
            <returns>Returns true if options deleted successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.FindAll(System.Int32,System.Int32)">
            <summary>
                Get list of all options with paging
            </summary>
            <param name="pageNumber">Page number</param>
            <param name="pageSize">Page size</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.Option"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.FindAllShared(System.Int32,System.Int32)">
            <summary>
                Find all shared options with paging
            </summary>
            <param name="pageNumber">Page number</param>
            <param name="pageSize">Page size</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.Option"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.FindSharedOptionByNameAndType(System.String,Hotcakes.Commerce.Catalog.OptionTypes)">
            <summary>
                Find shared option by name and option type
            </summary>
            <param name="name">name of the option</param>
            <param name="optionType"><see cref="T:Hotcakes.Commerce.Catalog.OptionTypes"/> of the option</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.FindMany(System.Collections.Generic.List{System.String})">
            <summary>
                Find list of options by id
            </summary>
            <param name="bvins">List of option unique identifier</param>
            <returns>Returns list <see cref="T:Hotcakes.Commerce.Catalog.Option"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.FindByProductIds(System.Collections.Generic.List{System.String})">
            <summary>
                Return list of options for each given product ids
            </summary>
            <param name="productBvins">List of product unique identifiers</param>
            <returns>Returns dictionary with product and its options</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.FindByProductId(System.String)">
            <summary>
                Find list of options for given product id
            </summary>
            <param name="productBvin">Product unique identifier</param>
            <returns>List of  <see cref="T:Hotcakes.Commerce.Catalog.Option"/> instances.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.DeleteForProductId(System.String)">
            <summary>
                Delete options for given product id
            </summary>
            <param name="productId">Product unique identifier</param>
            <returns>Returns true if the options removed successfully.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.MergeList(System.String,Hotcakes.Commerce.Catalog.OptionList)">
            <summary>
                Merge products options
            </summary>
            <param name="productBvin">Product unique identifier</param>
            <param name="subitems"><see cref="T:Hotcakes.Commerce.Catalog.OptionList"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.DeleteOptionItem(System.String)">
            <summary>
                Delete option item
            </summary>
            <param name="optionItemBvin">Option Item unique identifier</param>
            <returns>Returns true if the option removed successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.ResortOptionItems(System.String,System.Collections.Generic.List{System.String})">
            <summary>
                Resort the option items for given option
            </summary>
            <param name="optionId">Option unique identifier</param>
            <param name="sortedItemIds">List of sorted items ids.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.OptionItemFind(System.String)">
            <summary>
                Find option item
            </summary>
            <param name="bvin">Option item unique identifier</param>
            <returns>Returns <see cref="T:Hotcakes.Commerce.Catalog.OptionItem"/> instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.OptionItemUpdate(Hotcakes.Commerce.Catalog.OptionItem)">
            <summary>
                Update option item
            </summary>
            <param name="item"><see cref="T:Hotcakes.Commerce.Catalog.OptionItem"/> instance</param>
            <returns>Returns true if option updated successfully.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionRepository.Clone(System.String,System.String@)">
            <summary>
                Clone product option
            </summary>
            <param name="productOptionId">Source product option unique identifier</param>
            <param name="newProductOptionId">Destionation product option unique identifier</param>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.OptionSelection">
            <summary>
                This is the primary class used for option selection in the main application.
            </summary>
            <remarks>The REST API equivalent is OptionSelectionDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionSelection.CleanBvin(System.String)">
            <summary>
                Removes the hyphens from the Bvin (GUID).
            </summary>
            <param name="input">String - the original GUID or Bvin</param>
            <returns>String - te GUID without the hypens</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionSelection.GenerateUniqueKeyForSelections(System.Collections.Generic.List{Hotcakes.Commerce.Catalog.OptionSelection})">
            <summary>
                Allows you to generate a unique key for the OptionSelection using the given choices.
            </summary>
            <param name="selections">The chosen selections for the product.</param>
            <returns>String - a unique key generated from the given selections</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionSelection.ContainsInvalidSelectionForOptions(Hotcakes.Commerce.Catalog.OptionList,System.Collections.Generic.List{Hotcakes.Commerce.Catalog.OptionSelection})">
            <summary>
                Checks to see if a list of selection data contains a selection that isn't a valid variant in a list of options.
            </summary>
            <param name="options">The available options for the product.</param>
            <param name="selections">The options that have been selected.</param>
            <returns>If true, the selected options all match that available choices.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionSelection.ToDto">
            <summary>
                Allows you to convert the current open selection object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of OptionSelectionDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionSelection.FromDto(Hotcakes.CommerceDTO.v1.Catalog.OptionSelectionDTO)">
            <summary>
                Allows you to populate the current option selection object using a OptionSelectionDTO instance
            </summary>
            <param name="dto">An instance of the option selection from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.OptionSelection.OptionBvin">
            <summary>
                The unique ID or primary key of the option.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.OptionSelection.SelectionData">
            <summary>
                The options or choices selected for the product.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionSelectionList.Equals(Hotcakes.Commerce.Catalog.OptionSelectionList)">
            <summary>
                Return true if both objects are equal. Otherwise false.
            </summary>
            <param name="other">The other option selections</param>
            <returns></returns>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.OptionItem">
            <summary>
                This is the primary object that is used to manage all aspects of product option items in the main application.
            </summary>
            <remarks>The REST API equivalent is OptionItemDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItem.Clone">
            <summary>
                Use this method to create a copy of the current option item.
            </summary>
            <returns>A duplicate of the current OptionItem.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItem.ToDto">
            <summary>
                Allows you to convert the current product option item object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of OptionItemDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionItem.FromDto(Hotcakes.CommerceDTO.v1.Catalog.OptionItemDTO)">
            <summary>
                Allows you to populate the current product option item object using an instance of OptionItemDTO
            </summary>
            <param name="dto">An instance of the product option item from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.OptionItem.Bvin">
            <summary>
                The unique ID or primary key of the current product option item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.OptionItem.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.OptionItem.OptionBvin">
            <summary>
                This value refers to the Option ID that this item belongs to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.OptionItem.Name">
            <summary>
                This is that localized name of the product option item as customers will see it.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.OptionItem.PriceAdjustment">
            <summary>
                If this item belongs to a variant, this value will be the new price when this product option item is selected.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.OptionItem.WeightAdjustment">
            <summary>
                If this item belongs to a variant, this value will be the new weight when this product option item is selected.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.OptionItem.IsLabel">
            <summary>
                Used with the drop down list OptionType, this item will be rendered differently if true. All other OptionTypes will
                ignore this item unless this value is false.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.OptionItem.SortOrder">
            <summary>
                This value is used to sort this item when grouped with other items.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.OptionItem.IsDefault">
            <summary>
                When True, this item will be used as the default item over other items that might be associated with the same
                product option.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.OptionSettings">
            <summary>
                This is a general class used to hold a collection of settings for an Option.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionSettings.AddOrUpdate(System.String,System.String)">
            <summary>
                Allows you to save or update a setting for the current Option.
            </summary>
            <param name="name">The unique key or name of the Setting to update/save.</param>
            <param name="value">The value that should be returned when the setting is asked for by the key/name.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionSettings.GetSettingOrEmpty(System.String)">
            <summary>
                Returns the setting asked for if it exists. Otherwise an empty string is returned.
            </summary>
            <param name="name">The unique key or name used to retrieve the Setting.</param>
            <returns>Returns the setting or an empty string.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionSettings.GetBoolSetting(System.String)">
            <summary>
                Returns the appropriate boolean value of a setting when it is saved as a 0 or 1.
            </summary>
            <param name="name">The unique key or name used to retrieve the Setting.</param>
            <returns>If the saved setting is a 1, True is returned. Otherwise, False is returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionSettings.SetBoolSetting(System.String,System.Boolean)">
            <summary>
                Allows you to safely save a boolean value in the settings.
            </summary>
            <param name="name">The unique key or name of the Setting to update/save.</param>
            <param name="value">The value that should be returned when the setting is asked for by the key/name.</param>
            <remarks>This method converts the boolean value to the respective string representation of 0 or 1.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionSettings.Merge(Hotcakes.Commerce.Catalog.OptionSettings)">
            <summary>
                Allows you to merge another setting of settings into the current settings.
            </summary>
            <param name="otherSettings">A populated instance of the other settings to add to the current settings.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionSettings.ToJson">
            <summary>
                Converts the settings to a JSON friendly string for use in the REST API.
            </summary>
            <returns>A JSON string representation of the settings.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.OptionSettings.FromJson(System.String)">
            <summary>
                Converts the JSON version of the settings to an OptionSettings object.
            </summary>
            <param name="jsonValues">The JSON string to convert to an OptionSettings object.</param>
            <returns>Returns a populated instance of the OptionSettings object.</returns>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductDescriptionTab">
            <summary>
                This object holds a single instance of an "Info Tab" that customers use to list product specs and other details.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductDescriptionTab.ToXml(System.Boolean)">
            <summary>
                This method is meant to output the info tab as XML.
            </summary>
            <param name="omitDeclaration">Paramter not used.</param>
            <returns>String - an XML representation of the info tab.</returns>
            <remarks>The application does not use this method anywhere. </remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductDescriptionTab.FromXmlString(System.String)">
            <summary>
                This method accepts an XML representation of an info tab and populates the info tab object with its contents.
            </summary>
            <param name="x">String - the XML serialized version of an info tab.</param>
            <returns>Boolean - if true, the conversion from XML to an object happened successfully.</returns>
            <remarks>This method is only used in the Product.cs class.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductDescriptionTab.FromXml(System.Xml.XmlReader@)">
            <summary>
                This method accepts an XmlReader and converts its contents to populate the current info tab properties.
            </summary>
            <param name="xr">XmlReader - a streamed representation of the XML version of this object</param>
            <returns>Boolean - if true, the XmlReader was properly parsed and its contents converted to properties in this object.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductDescriptionTab.ToXmlWriter(System.Xml.XmlWriter@)">
            <summary>
                This method is called when a Product is serialized to XML to help build the XML serialized version of a product.
            </summary>
            <param name="xw">XmlWriter - a byreference instance of an XmlWriter to transfer the serialized info tab to.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductDescriptionTab.FromDto(Hotcakes.CommerceDTO.v1.Catalog.ProductDescriptionTabDTO)">
            <summary>
                Allows you to populate the current info tab object using a ProductDescriptionTabDTO instance
            </summary>
            <param name="dto">An instance of the info tab from the REST API</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductDescriptionTab.ToDto">
            <summary>
                Allows you to convert the current info tab object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of ProductDescriptionTabDTO</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductDescriptionTab.Bvin">
            <summary>
                The unique ID &amp; primary key of the info tab.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductDescriptionTab.LastUpdated">
            <summary>
                The last updated date is used for auditing purposes to know when the info tab was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductDescriptionTab.TabTitle">
            <summary>
                The localized title as you want a customer to see it.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductDescriptionTab.HtmlData">
            <summary>
                This is the content of the info tab that is shown to customers.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductDescriptionTab.SortOrder">
            <summary>
                Sorting is supported by giving each info tab a sequential number.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductFileAssociation">
            <summary>
                Product file information
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociation.#ctor">
            <summary>
                Set default values
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductFileAssociation.Id">
            <summary>
                Unique identifier for product and file mapping
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductFileAssociation.StoreId">
            <summary>
                Unique store identifier
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductFileAssociation.FileId">
            <summary>
                Unique file identifier
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductFileAssociation.ProductId">
            <summary>
                Unique product identifier
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductFileAssociation.AvailableMinutes">
            <summary>
                Available minutes for which this file would be available for download
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductFileAssociation.MaxDownloads">
            <summary>
                Maximum allowed download of the file
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductFileAssociation.LastUpdatedUtc">
            <summary>
                Last updated time of the file
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository">
            <summary>
                Perform database operation on hcc_ProductFileXProduct table
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.CopyDataToModel(Hotcakes.Commerce.Data.EF.hcc_ProductFileXProduct,Hotcakes.Commerce.Catalog.ProductFileAssociation)">
            <summary>
                Copy database object model to view model
            </summary>
            <param name="data"><see cref="T:Hotcakes.Commerce.Data.EF.hcc_ProductFileXProduct"/> instance</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.ProductFileAssociation"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.CopyModelToData(Hotcakes.Commerce.Data.EF.hcc_ProductFileXProduct,Hotcakes.Commerce.Catalog.ProductFileAssociation)">
            <summary>
                Copy view model to the database object model
            </summary>
            <param name="data"><see cref="T:Hotcakes.Commerce.Data.EF.hcc_ProductFileXProduct"/> instance</param>
            <param name="model"><see cref="T:Hotcakes.Commerce.Catalog.ProductFileAssociation"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.Find(System.Int64)">
            <summary>
                Find ProductFileAssociation by id in current store
            </summary>
            <param name="id">ProductFileAssociation unique identifier</param>
            <returns><see cref="T:Hotcakes.Commerce.Catalog.ProductFileAssociation"/> instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.FindForAllStores(System.Int64)">
            <summary>
                Find ProductFileAssociation by id in all store
            </summary>
            <param name="id">ProductFileAssociation unique identifier</param>
            <returns><see cref="T:Hotcakes.Commerce.Catalog.ProductFileAssociation"/> instance</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.Create(Hotcakes.Commerce.Catalog.ProductFileAssociation)">
            <summary>
                Create new ProductFileAssociation
            </summary>
            <param name="item"><see cref="T:Hotcakes.Commerce.Catalog.ProductFileAssociation"/> instance</param>
            <returns>Returns true if new record created successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.Update(Hotcakes.Commerce.Catalog.ProductFileAssociation)">
            <summary>
                Update ProductFileAssociation
            </summary>
            <param name="c"><see cref="T:Hotcakes.Commerce.Catalog.ProductFileAssociation"/> instance</param>
            <returns>Returns true if the record updated successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.Delete(System.Int64)">
            <summary>
                Delete ProductFileAssociation
            </summary>
            <param name="id">ProductFileAssociation unique identifier</param>
            <returns>Returns true if the record deleted successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.Delete(System.Int64,System.Int64)">
            <summary>
                Delete ProductFileAssociation for given store
            </summary>
            <param name="id">ProductFileAssociation unique identifier</param>
            <param name="storeId">Store unique identifier</param>
            <returns>Returns true if the record deleted successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.DeleteForProductId(System.String)">
            <summary>
                Delete all files association for given product
            </summary>
            <param name="productId">Product unique identifier</param>
            <returns>Returns true if the record deleted successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.DeleteForFileId(System.String)">
            <summary>
                Delete Product file
            </summary>
            <param name="fileId">File unique identifier</param>
            <returns>Returns true if the File has been removed successfully.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.DeleteForFileId(System.String,System.Int64)">
            <summary>
                Delete Product file for given store
            </summary>
            <param name="fileId">File unique identifier</param>
            <param name="storeId">Store unique identifier</param>
            <returns>Returns true if file removed successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.FindByProductId(System.String)">
            <summary>
                Find all files associated with given product id
            </summary>
            <param name="productId">Product unique identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.ProductFileAssociation"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.FindByProductIdForStore(System.String,System.Int64)">
            <summary>
                Find all files associated with given product id for given store
            </summary>
            <param name="productId">Product unique identifier</param>
            <param name="storeId">Store unique identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.ProductFileAssociation"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.FindByProductIdPaged(System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
                Find all files associated with given product id for given store with paging
            </summary>
            <param name="productId">Product unique identifier</param>
            <param name="pageNumber">Page Number</param>
            <param name="pageSize">Page Size</param>
            <param name="storeId">Store unique identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.ProductFileAssociation"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.FindByFileId(System.String)">
            <summary>
                Find all product file association related to given file
            </summary>
            <param name="fileId">File unique identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.ProductFileAssociation"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.FindByFileId(System.String,System.Int64)">
            <summary>
                Find all product file association related to given file within given store
            </summary>
            <param name="fileId">File unique identifier</param>
            <param name="storeId">Store unique identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.ProductFileAssociation"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.FindByFileIdPaged(System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
                Find all product file association related to given file within given store with paging
            </summary>
            <param name="fileId">File unique identifier</param>
            <param name="pageNumber">Page Number</param>
            <param name="pageSize">Page size</param>
            <param name="storeId">Store unique identifier</param>
            <returns>Returns list of <see cref="T:Hotcakes.Commerce.Catalog.ProductFileAssociation"/> instances</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.CountByFileId(System.String)">
            <summary>
                Find count of products with which this file associated.
            </summary>
            <param name="fileId">File unique identifier</param>
            <returns>Returns number of association for this file</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFileAssociationRepository.FindByFileIdAndProductId(System.String,System.String)">
            <summary>
                Find Product file association for given product and file
            </summary>
            <param name="fileId">File unique identifier</param>
            <param name="productId">Product unique identifier</param>
            <returns>Returns instance of the <see cref="T:Hotcakes.Commerce.Catalog.ProductFileAssociation"/></returns>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductFileRepository">
            <summary>
                Perform database operation on hcc_ProductFile table
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductRelationship">
            <summary>
                This is the primary object that is used to manage all aspects of Product Relationships
            </summary>
            <remarks>The REST API equivalent is ProductRelationshipDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductRelationship.ToDto">
            <summary>
                Allows you to convert the current product relationship object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of ProductRelationshipDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductRelationship.FromDto(Hotcakes.CommerceDTO.v1.Catalog.ProductRelationshipDTO)">
            <summary>
                Allows you to populate the current product relationship object using a ProductRelationshipDTO instance
            </summary>
            <param name="dto">An instance of the product relationship from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductRelationship.Id">
            <summary>
                The unique ID or primary key of the product relationship.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductRelationship.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductRelationship.ProductId">
            <summary>
                The unique ID or Bvin of the primary product.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductRelationship.RelatedProductId">
            <summary>
                The unique ID or Bvin of the related product.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductRelationship.IsSubstitute">
            <summary>
                Allows the related product to replace the primary product.
            </summary>
            <remarks>This property is not used in the application, but False should be saved for all products.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductRelationship.SortOrder">
            <summary>
                Used to sort the related products for display to customers.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductRelationship.MarketingDescription">
            <summary>
                This property is not used in the application.
            </summary>
            <remarks>This property is not used in the application.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductRepository.Find(System.String)">
            <summary>
                Finds the specified bvin. This methods only populates cache but shouldn't use it to get items
            </summary>
            <param name="bvin">The bvin.</param>
            <returns></returns>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.Variant">
            <summary>
                This class is used to manage product variants throughout the application.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Variant.UniqueKey">
            <summary>
                This method returns a unique ID that is comprised of the Bvins, separated by a pipe character.
            </summary>
            <returns>String - a unique ID using the Bvins of each selection</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Variant.SelectionNames(System.Collections.Generic.List{Hotcakes.Commerce.Catalog.Option})">
            <summary>
                Allows you to get a list of the names of each option that makes up the variant. Used for displaying the variant in
                administration.
            </summary>
            <param name="options">List of Option - the options to parse for the returned list</param>
            <returns>List of String - a list of all option names in the variant</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Variant.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Variant.Bvin">
            <summary>
                The unique ID or primary key of the variant.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Variant.ProductId">
            <summary>
                The Bvin or unique ID of the product that this variant belongs to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Variant.Sku">
            <summary>
                When populated, the unique SKU that this variant should be using for inventory &amp; other tracking purposes.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Variant.Price">
            <summary>
                The price that the product should use when this variant is chosen. Otherwise, 0.00 should be used.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Variant.Selections">
            <summary>
                These are the options that define the variant.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.WishListItem">
            <summary>
                This is the primary class used for wish list items in the main application.
            </summary>
            <remarks>The REST API equivalent is WishListItemDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.WishListItem.GetAssociatedProduct(Hotcakes.Commerce.HotcakesApplication)">
            <summary>
                Returns an instance of the Product object using the ProductId property.
            </summary>
            <param name="app">An instance of the hotcakes application</param>
            <returns>Product - an instance of the Product object</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.WishListItem.ToDto">
            <summary>
                Allows you to convert the current wish list item object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of WishListItemDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.WishListItem.FromDto(Hotcakes.CommerceDTO.v1.Catalog.WishListItemDTO)">
            <summary>
                Allows you to populate the current wish list item object using a WishListItemDTO instance
            </summary>
            <param name="dto">An instance of the wish list item from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.WishListItem.Id">
            <summary>
                The unique ID or primary key of the wish list item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.WishListItem.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.WishListItem.CustomerId">
            <summary>
                Defines the user account that the wish list item belongs to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.WishListItem.LastUpdatedUtc">
            <summary>
                The last updated date is used for auditing purposes to know when the wish list item was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.WishListItem.ProductId">
            <summary>
                The unique ID of the product that this wish list item refers to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.WishListItem.Quantity">
            <summary>
                The amount of products that this wish list item is saving.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.WishListItem.SelectionData">
            <summary>
                When applicable, the choices or options of the product.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Contacts.AffiliateContact">
            <summary>
                This is the main object that is used for all affiliate contact management in the main application
            </summary>
            <remarks>The main REST API equivalent to this is the AffiliateContactDTO object</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.AffiliateContact.ToDto">
            <summary>
                Allows you to convert the current affiliate contact object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of AffiliateContactDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.AffiliateContact.FromDto(Hotcakes.CommerceDTO.v1.Contacts.AffiliateContactDTO)">
            <summary>
                Allows you to populate the current affiliate contact object using an AffiliateContactDTO instance
            </summary>
            <param name="dto">An instance of the affiliate contact from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.AffiliateContact.Id">
            <summary>
                A unique ID for the affiliate contact used to manage the object in the data source.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.AffiliateContact.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.AffiliateContact.AffiliateId">
            <summary>
                The unique ID or bvin of the affiliate that this contact is attached to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.AffiliateContact.UserId">
            <summary>
                The unique ID to identify and work with the affiliate contact in the CMS.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Contacts.PriceGroup">
            <summary>
                This class is the main object that helps manage price groups throughout the application
            </summary>
            <remarks>The REST API equivalent is PriceGroupDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.PriceGroup.GetAdjustedPriceForThisGroup(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
                This method returns the correct price for the customer based upon the specified PricingType
            </summary>
            <param name="price">Price of the product</param>
            <param name="msrp">The suggested retail price of the product</param>
            <param name="cost">The cost of the product</param>
            <returns>Decimal - the adjusted price</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.PriceGroup.ToDto">
            <summary>
                Allows you to convert the current price group object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of PriceGroupDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.PriceGroup.FromDto(Hotcakes.CommerceDTO.v1.Contacts.PriceGroupDTO)">
            <summary>
                Allows you to populate the current price group object using a PriceGroupDTO instance
            </summary>
            <param name="dto">An instance of the price group from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.PriceGroup.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.PriceGroup.Bvin">
            <summary>
                This is the ID of the price group.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.PriceGroup.LastUpdated">
            <summary>
                The last updated date is used for auditing purposes to know when the category was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.PriceGroup.Name">
            <summary>
                The name is used primarily for administrative purposes to give a meaningful label to the created groups which makes
                for easier management.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.PriceGroup.PricingType">
            <summary>
                The pricing type determines how the pricing is adjusted for customers.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.PriceGroup.AdjustmentAmount">
            <summary>
                Depending on the pricing type, this amount is used to adjust the pricing for the customer.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Contacts.VendorManufacturerContact">
            <summary>
                This is the main object that is used for all vendor/manufacturer contact management in the main application
            </summary>
            <remarks>The main REST API equivalent to this is the VendorManufacturerContactDTO object</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.VendorManufacturerContact.ToDto">
            <summary>
                Allows you to convert the current vendor/manufacturer contact object to the DTO equivalent for use with the REST
                API
            </summary>
            <returns>A new instance of VendorManufacturerContactDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.VendorManufacturerContact.FromDto(Hotcakes.CommerceDTO.v1.Contacts.VendorManufacturerContactDTO)">
            <summary>
                Allows you to populate the current vendor/manufacturer contact object using an VendorManufacturerContactDTO
                instance
            </summary>
            <param name="dto">An instance of the vendor/manufacturer contact from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.VendorManufacturerContact.Id">
            <summary>
                The unique ID of the vendor/manufacturer contact.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.VendorManufacturerContact.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.VendorManufacturerContact.VendorManufacturerId">
            <summary>
                The bvin or ID of the VendorManufacturer that this contact belongs to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.VendorManufacturerContact.UserId">
            <summary>
                The unqiue ID of the user account that this object is referring to.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Content.Replaceable">
            <summary>
                Holds a temporary list of replacement tags
                Allows you to generate "one off" tags or lists as needed
                Used by the "new password" email messages
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Marketing.DiscountDetail">
            <summary>
                This is the primary object that is used to manage all aspects of DiscountDetail in the main application.
            </summary>
            <remarks>The REST API equivalent is DiscountDetailDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Marketing.DiscountDetail.ListToXml(System.Collections.Generic.List{Hotcakes.Commerce.Marketing.DiscountDetail})">
            <summary>
                Accepts a listing of DiscountDetail and returns them in XML format.
            </summary>
            <param name="details">A listing of DiscountDetail to parse.</param>
            <returns>An XML representation of the DiscountDetail list.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Marketing.DiscountDetail.ListFromXml(System.String)">
            <summary>
                Accepts an XML version of a DiscountDetail list and returns them in a DiscountDetail list.
            </summary>
            <param name="xml">XML version of DiscountDetail list to parse.</param>
            <returns>List of DiscountDetail</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Marketing.DiscountDetail.ToDto">
            <summary>
                Allows you to convert the current discount detail object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of DiscountDetailDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Marketing.DiscountDetail.FromDto(Hotcakes.CommerceDTO.v1.Marketing.DiscountDetailDTO)">
            <summary>
                Allows you to populate the current DiscountDetail object using a DiscountDetailDTO instance
            </summary>
            <param name="dto">An instance of the discount detail from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Marketing.DiscountDetail.Id">
            <summary>
                Unique ID or primary key of the discount.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Marketing.DiscountDetail.Description">
            <summary>
                Description of what the discount is.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Marketing.DiscountDetail.Amount">
            <summary>
                The amount of the discount to be applied to the qualifying order/line item(s).
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Marketing.DiscountDetail.DiscountType">
            <summary>
                Indicates the type of discount that this is.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Marketing.PromotionType">
            <summary>
                Types of promotions in the application.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Marketing.PromotionType.Unknown">
            <summary>
                Should never be used.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Marketing.PromotionType.Sale">
            <summary>
                A sale on one or many items in the store.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Marketing.PromotionType.Offer">
            <summary>
                An offer where qualifications must be met to receive the promotion.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Marketing.PromotionType.Affiliate">
            <summary>
                Promotion exclusively for affiliates.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Marketing.PromotionType.OfferForLineItems">
            <summary>
                An offer where line items may potentionally be discounted.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Marketing.PromotionType.OfferForOrder">
            <summary>
                An offer that will potentially be applied at the order level, such as discounting the subtotal.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Marketing.PromotionType.OfferForShipping">
            <summary>
                Offers that affect shipping in some way.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Marketing.PromotionType.OfferForFreeItems">
            <summary>
                Offers that can add free item to an order.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Marketing.PromotionType.VolumeDiscount">
            <summary>
                Neither a sale or an offer, but a product-level discount for specific quantities
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Marketing.RelativeProcessingCost">
            <summary>
                This helps us determine which promotion qualifications
                should be evaluated first. Lower cost qualifications
                will be checked first so that if they fail, we never
                run the expensive operations that might need to check
                the database.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Marketing.Promotion.ApplyToProduct(Hotcakes.Commerce.HccRequestContext,Hotcakes.Commerce.Catalog.Product,Hotcakes.Commerce.Catalog.UserSpecificPrice,Hotcakes.Commerce.Membership.CustomerAccount)">
            <summary>
                Applies to product.
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="p">The p.</param>
            <param name="price">The price.</param>
            <param name="account">The account.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Marketing.Promotion.ApplyToOrder(Hotcakes.Commerce.HccRequestContext,Hotcakes.Commerce.Orders.Order)">
            <summary>
            </summary>
            <param name="requestContext"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Marketing.Promotion.ApplyToShippingRate(Hotcakes.Commerce.HccRequestContext,Hotcakes.Commerce.Orders.Order,Hotcakes.Commerce.Membership.CustomerAccount,System.String,System.Decimal)">
            <summary>
                Applies to shipping rate.
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="o">The o.</param>
            <param name="account">The account.</param>
            <param name="shipMethodId">The ship method identifier.</param>
            <param name="originalShippingMethodRate">The original shipping method rate.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Marketing.Promotion.ApplyToAffiliate(Hotcakes.Commerce.HccRequestContext,Hotcakes.Commerce.Membership.CustomerAccount,System.DateTime)">
            <summary>
                Applies to affiliate.
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="account">The account.</param>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Marketing.Promotion.CheckQualifications(Hotcakes.Commerce.Marketing.PromotionContext,Hotcakes.Commerce.Marketing.PromotionQualificationMode)">
            <summary>
                Make sure we meet all requirements
            </summary>
            <remarks>
                NOTE: we order by processing cost which should allow us to check
                the fastest items first. For example, checking userID is faster
                than checking user group because ID is in the context and group
                requires a database call.
            </remarks>
            <param name="context"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderCalculator.CalculateLineItemShippingPortions(Hotcakes.Commerce.Orders.Order)">
            <summary>
                Distributes shipping cost to each line item that is shippable
            </summary>
            <param name="order">The order.</param>
        </member>
        <member name="T:Hotcakes.Commerce.Orders.OrderPackage">
            <summary>
                This is the primary object that is used to manage all aspects of Order Package
            </summary>
            <remarks>The REST API equivalent is OrderPackageDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderPackage.GetReplaceableTags(Hotcakes.Commerce.HccRequestContext)">
            <summary>
                A collection of the tokens and the replaceable content for email templates.
            </summary>
            <param name="context">An instance of the Hotcakes Request context.</param>
            <returns>List of HtmlTemplateTag</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderPackage.Clone">
            <summary>
                Creates a copy of the current order package.
            </summary>
            <returns>OrderPackage</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderPackage.ItemsToXml">
            <summary>
                Creates and returns an XML-serialized version of the line items or products in this package.
            </summary>
            <returns>String - XML representation of the line items in the current package.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderPackage.ToDto">
            <summary>
                Allows you to convert the current order package object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of OrderPackageDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderPackage.FromDto(Hotcakes.CommerceDTO.v1.Orders.OrderPackageDTO)">
            <summary>
                Allows you to populate the current order package object using a OrderPackageDTO instance
            </summary>
            <param name="dto">An instance of the order package from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.Id">
            <summary>
                This is the ID of the current order package.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.LastUpdatedUtc">
            <summary>
                The last updated date is used for auditing purposes to know when the order package was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.Items">
            <summary>
                A listing of the products or line items in the order package
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.Description">
            <summary>
                A description of the package consisting of the SKU and product names.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.OrderId">
            <summary>
                The unique ID of the order that this package belongs to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.Width">
            <summary>
                The width of the package.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.Height">
            <summary>
                The height of the package.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.Length">
            <summary>
                The length of the package.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.SizeUnits">
            <summary>
                The units used to measure the dimensions of the package.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.Weight">
            <summary>
                The weight of the package.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.WeightUnits">
            <summary>
                The units used to measure the weight of the package.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.ShippingProviderId">
            <summary>
                The unique ID of the shipping provider used for this package.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.ShippingProviderServiceCode">
            <summary>
                The service code used by the shipping provider to describe the type of package.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.TrackingNumber">
            <summary>
                A unique ID used by the shipping provider to track the package.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.HasShipped">
            <summary>
                A boolean value to determine if the package has shipped or not.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.ShipDateUtc">
            <summary>
                The date/time stamp with the package shipped.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.EstimatedShippingCost">
            <summary>
                A shipping estimate returned from the shipping provider.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.ShippingMethodId">
            <summary>
                The unique ID of the shipping provider method
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackage.CustomProperties">
            <summary>
                A collection of settings or meta data used for the package.
            </summary>
            <remarks>
                Highly useful for things like ERP integrations.
            </remarks>
        </member>
        <member name="T:Hotcakes.Commerce.Orders.OrderPackageItem">
            <summary>
                This is the primary object that is used to manage all aspects of package items in the main application.
            </summary>
            <remarks>The REST API equivalent is OrderPackageItemDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderPackageItem.ToDto">
            <summary>
                Allows you to convert the current package item object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of OrderPackageItemDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderPackageItem.FromDto(Hotcakes.CommerceDTO.v1.Orders.OrderPackageItemDTO)">
            <summary>
                Allows you to populate the current package item object using an OrderPackageItemDTO instance
            </summary>
            <param name="dto">An instance of the package item from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackageItem.ProductBvin">
            <summary>
                The unique ID or bvin of the product that is in this package.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackageItem.LineItemId">
            <summary>
                The unique ID of the line item that matches this package.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderPackageItem.Quantity">
            <summary>
                Total number of products that are in this package.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderPaymentManager.CreateEmptyTransaction(System.Boolean)">
            <summary>
                Creates a new transaction with the billing &amp; shipping addresses and line items for the order.
            </summary>
            <returns>Transaction</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderPaymentManager.GiftCardAddInfo(Hotcakes.Payment.GiftCardData,System.Decimal)">
            <summary>
                Adds gift card "Info Transaction".
            </summary>
            <param name="giftCard">The gift card.</param>
            <param name="amount">The gift card amount.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderPaymentManager.GiftCardUpdateInfo(Hotcakes.Commerce.Orders.OrderTransaction,System.Decimal)">
            <summary>
                Updates gift card "Info Transaction".
            </summary>
            <param name="infoTransaction">The information transaction.</param>
            <param name="amount">The gift card amount.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderPaymentManager.GiftCardRemoveInfo(System.String)">
            <summary>
                Removes gift card "Info Transaction".
            </summary>
            <param name="giftCardNumber">The gift card number.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderPaymentManager.GiftCardHold(System.String,System.Decimal)">
            <summary>
                Holds specified gift card amount.
            </summary>
            <param name="infoTransactionId">The information transaction identifier.</param>
            <param name="amount">The amount to hold.</param>
            <returns></returns>
        </member>
        <member name="T:Hotcakes.Commerce.Orders.OrderSnapshot">
            <summary>
                The OrderSnapshot class is used for Orders and carts placed by customers, merchants, as well as the shopping cart.
            </summary>
            <remarks>
                This class will generally map to the hcc_Order table in the database.
            </remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderSnapshot.ToDto">
            <summary>
                Allows you to convert the current order snapshot object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of OrderSnapshotDTO</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.Id">
            <summary>
                This is an ID that is used primarily for the SQL data source.
            </summary>
            <returns>Integer</returns>
            <remarks>
                not used as primary key, only for insert order in SQL pages
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.bvin">
            <summary>
                This is the primary key to uniquely identify a single order.
            </summary>
            <returns>String (GUID)</returns>
            <remarks>Primary Key</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.StoreId">
            <summary>
                The identifier of the store that this order belongs to.
            </summary>
            <returns>Long</returns>
            <remarks>
                This value will always be the same, except in multi-tenant store scenarios.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.LastUpdatedUtc">
            <summary>
                The date and time that the order was last updated, in UTC format
            </summary>
            <returns>DateTime (UTC)</returns>
            <remarks>UTC</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.TimeOfOrderUtc">
            <summary>
                The date and time that the order was placed, in UTC format
            </summary>
            <returns>DateTime (UTC)</returns>
            <remarks>UTC</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.OrderNumber">
            <summary>
                This is a text version of the order number and is assigned once the order reaches the "ToDo" state.
            </summary>
            <returns>String (numeric or empty)</returns>
            <remarks>
                This is assigned during the AssignOrderNumber() workflow task. If a value doesn't exist, this order is likely
                an abandoned cart.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.ThirdPartyOrderId">
            <summary>
                This property is primarily used for third party payment providers and other integrations, such as PayPal Express
                that have their own order numbers.
            </summary>
            <returns>String - the format depends on the third party integration</returns>
            <remarks>Currently used with the out of the box PayPal Express payment provider.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.UserEmail">
            <summary>
                The email address of the person placing the order, usually pulled from the user account.
            </summary>
            <returns>String (email address)</returns>
            <remarks>Either pulled from the user account email address property, or from the guest checkout email address field.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.UserID">
            <summary>
                The ID that will map to the user in the Hotcakes customer repository.
            </summary>
            <returns>String (integer ID of the user)</returns>
            <remarks>This does not match the CMS UserID. If empty, this is likely a guest checkout.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.CustomProperties">
            <summary>
                A collection of custom properties that contain additional meta data about the order.
            </summary>
            <returns>CustomPropertyCollection</returns>
            <remarks>This is an extension point for developers to use for integration, as well as Hotcakes related meta data.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.IsRecurring">
            <summary>
                Gets or sets a value indicating whether this order has recurring items.
            </summary>
            <value>
                <c>true</c> if this instance is recurring; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.PaymentStatus">
            <summary>
                This is an object that describes the current status of payment for the order.
            </summary>
            <returns>OrderPaymentStatus</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.ShippingStatus">
            <summary>
                This is an object that describes the current shipping status of the order.
            </summary>
            <returns>OrderShippingStatus</returns>
            <remarks>
                This value should not be manually set, as it will be set conditionally based upon actions taken by the
                merchant.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.IsPlaced">
            <summary>
                The order is not placed until the order is submitted from "New" to the "ToDo" state.
            </summary>
            <returns>Boolean</returns>
            <remarks>
                This value should not be changed manually. The value will always return true for orders that successfully are
                processed during checkout.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.StatusCode">
            <summary>
                This is the ID of the payment status code of the order.
            </summary>
            <returns>String (GUID)</returns>
            <remarks>This should match the bvin property of the OrderPaymentStatus object.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.StatusName">
            <summary>
                The name of the status that matches the StatusCode property as well as the store administration views.
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.UsedCulture">
            <summary>
                Gets or sets the culture that was last used when creating the order
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.BillingAddress">
            <summary>
                Address object for who is being billed for the order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.ShippingAddress">
            <summary>
                Address object for who is receiving the order, when shipped.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.ItemsTax">
            <summary>
                Total amount of tax for the line items in the order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.ShippingTax">
            <summary>
                Amount of tax for shipping.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.TotalTax">
            <summary>
                Total amount of tax for the order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.TotalOrderBeforeDiscounts">
            <summary>
                The order total without discounts applied, but with user supplied price line items included. This does not include
                shipping charges.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.TotalOrderAfterDiscounts">
            <summary>
                Total amount of the order after discounts have been applied. This does not include shipping charges and discounts.
            </summary>
            <remarks>This value will never be less than zero.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.TotalShippingBeforeDiscounts">
            <summary>
                Total amount for shipping before discounts are applied.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.TotalShippingDiscounts">
            <summary>
                Returns a sum of all of the shipping discounts applied to the order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.TotalOrderDiscounts">
            <summary>
                The sum of the discounts being applied to this order, excluding shipping discounts.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.TotalHandling">
            <summary>
                Total amount for handling charges.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.TotalGrand">
            <summary>
                The order grand total that includes all discounts, shipping, and VAT.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.AffiliateID">
            <summary>
                If the order is being attributed to an affiliate, this ID will not be null.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.FraudScore">
            <summary>
                The value determined by the fraud screening configuration.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.Instructions">
            <summary>
                Special instructions saved by the customer that submitted the order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.ShippingMethodId">
            <summary>
                Unique ID of the chosen shipping method.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.ShippingMethodDisplayName">
            <summary>
                A localized display name matching the shipping method ID.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.ShippingProviderId">
            <summary>
                Unique ID of the provider to be used for shipment.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderSnapshot.ShippingProviderServiceCode">
            <summary>
                A code used by the shipping provider to indicate the type of service.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Orders.OrderTransaction">
            <summary>
                This is the primary object that is used to manage all aspects of transactions in the main application.
            </summary>
            <remarks>The REST API equivalent is OrderTransactionDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderTransaction.PopulateFromPaymentTransaction(Hotcakes.Payment.Transaction)">
            <summary>
                Hydrates the current transaction object from another.
            </summary>
            <param name="t">A fully populated transaction object.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderTransaction.FindOrderForThis(Hotcakes.Commerce.HotcakesApplication)">
            <summary>
                Returns the order that this transaction was made for.
            </summary>
            <param name="hccApp">An instance of the Hotcakes Application context.</param>
            <returns>Order</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderTransaction.HasSuccessfulLinkedAction(Hotcakes.Payment.ActionType,System.Collections.Generic.List{Hotcakes.Commerce.Orders.OrderTransaction})">
            <summary>
                Evaluates whether any transactions are linked to the current one that have succeeded.
            </summary>
            <param name="action">Transaction type to evaluate.</param>
            <param name="transactions">A collection of transactions to parse for a match.</param>
            <returns>If true, a successful transaction was found that links to this one.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderTransaction.ToDto">
            <summary>
                Allows you to convert the current transaction object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of OrderTransactionDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderTransaction.FromDto(Hotcakes.CommerceDTO.v1.Orders.OrderTransactionDTO)">
            <summary>
                Allows you to populate the current transaction object using a OrderTransactionDTO instance
            </summary>
            <param name="dto">An instance of the transaction from the REST API</param>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderTransaction.SetAdditionalSetting(System.String,System.String)">
            <summary>
                Adds or updates an additional setting using the given values.
            </summary>
            <param name="key">The unique name that is used to store and retrieve the additional setting.</param>
            <param name="value">This is the information that you are saving to later retrieve.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderTransaction.GetAdditionalSettingAsString(System.String)">
            <summary>
                Queries for and returns the requested additional setting value.
            </summary>
            <param name="key">The unique name that is used to store and retrieve the additional setting.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderTransaction.GetAdditionalSettingAsDecimal(System.String)">
            <summary>
                Queries for and returns the requested additional setting value.
            </summary>
            <param name="key">The unique name that is used to store and retrieve the additional setting.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderTransaction.GetAdditionalSettingAsInteger(System.String)">
            <summary>
                Queries for and returns the requested additional setting value.
            </summary>
            <param name="key">The unique name that is used to store and retrieve the additional setting.</param>
            <returns></returns>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.Id">
            <summary>
                The unique ID of the transaction.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.IdAsString">
            <summary>
                A string version of the Id property.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.OrderId">
            <summary>
                The unique ID or bvin of the order that this transaction belongs to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.OrderNumber">
            <summary>
                The display number of the order that this transaction belongs to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.LineItemId">
            <summary>
                The unique ID of the order line item that this transaction belongs to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.TimeStampUtc">
            <summary>
                A date/time stamp used for auditing purposes to know when the transaction was created.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.Action">
            <summary>
                Defines what kind of transaction this is.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.Amount">
            <summary>
                The total amount of the transaction.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.GiftCard">
            <summary>
                Information to define the associated gift card, when necessary.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.CreditCard">
            <summary>
                Information to define the associated credit card, when necessary.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.Success">
            <summary>
                Defines whether the transaction was successful or not.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.Voided">
            <summary>
                Notes that this transaction is a void for another transaction.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.RefNum1">
            <summary>
                The primary reference number or token returned by the payment processor.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.RefNum2">
            <summary>
                The secondary reference number or token returned by the payment processor.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.LinkedToTransaction">
            <summary>
                When necessary, the unique ID of another transaction that this one is linked to, such as a credit or gift card
                payment.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.Messages">
            <summary>
                Useful information about the transaction, such as errors or warnings.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.CheckNumber">
            <summary>
                When the transaction is a check payment, the check number should be here.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.PurchaseOrderNumber">
            <summary>
                When the transaction is a purchase order payment, the PO number should be here.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.CompanyAccountNumber">
            <summary>
                When the transaction uses company accounts for payment, the company's account number should be here.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.AdditionalSettings">
            <summary>
                Contains a collection of optional settings or meta data for the transaction that do not have a property.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.MethodId">
            <summary>
                Determines what payment mehtod is used. Currently is being used for ThirdParty Payment Methods only
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.RMABvin">
            <summary>
                Used for returns to store a return reference ID or bvin.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.TempEstimatedItemPortion">
            <summary>
                Do not use for any API development. This property will be removed later.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.TempEstimatedItemDiscount">
            <summary>
                Do not use for any API development. This property will be removed later.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.TempEstimatedShippingPortion">
            <summary>
                Do not use for any API development. This property will be removed later.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.TempEstimatedShippingDiscount">
            <summary>
                Do not use for any API development. This property will be removed later.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.TempEstimatedHandlingPortion">
            <summary>
                Do not use for any API development. This property will be removed later.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.TempEstimatedTaxPortion">
            <summary>
                Do not use for any API development. This property will be removed later.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.TempCustomerName">
            <summary>
                Do not use for any API development. This property will be removed later.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.TempCustomerEmail">
            <summary>
                Do not use for any API development. This property will be removed later.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.IsVoidable">
            <summary>
                Voids are only allowed for 16 hours dur to the restrictions set by payment gateways. Refunds should be used after
                16 hours.
            </summary>
            <remarks>
                Only allow voids for about 16 hours since most credit card companies don't allow voids after the batch is processed
                for the day. Merchants should use a Refund instead of void at that point.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.AmountAppliedToOrder">
            <summary>
                Reflects the amount of currency applied to the order in this transaction.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderTransaction.AmountHeldForOrder">
            <summary>
                Reflects the amount of currency held for the order in this transaction.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderTransactionRepository.FindAllTransactionsForOrder(System.String)">
            <summary>
                Queries the store for all Transactions that match the given order.
            </summary>
            <param name="orderId">String - the unique ID of the order</param>
            <returns>A list of OrderTransaction for the given order.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderTransactionRepository.FindAllAuthorizationsForOrder(System.String)">
            <summary>
                Queries the store for all authorizations that match the given order.
            </summary>
            <param name="orderId">String - the unique ID of the order</param>
            <returns>A list of OrderTransaction for the given order.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderTransactionRepository.FindAuthForOrder(System.String)">
            <summary>
                DO NOT USE... DEPRECIATED.  Use FindAllAuthorizationsForOrder instead.
            </summary>
            <param name="orderId"></param>
            <returns></returns>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.Category">
            <summary>
                This is the primary object that is used to manage all aspects of Category
            </summary>
            <remarks>The REST API equivalent is CategoryDTO. There is also a CategorySnapshot that is used for better performance.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Category.FindChildrenInList(System.Collections.Generic.List{Hotcakes.Commerce.Catalog.CategorySnapshot},System.String)">
            <summary>
                Allows you to get a listing of all of the categories that are children of the specified parent category.
            </summary>
            <param name="allCats">A list of CategorySnapshot that we want to search through</param>
            <param name="parentId">The GUID (bvin) of the parent category that we want to find children for</param>
            <returns>A list of CategorySnapshot</returns>
            <remarks>Assumes that you do not want to show categories that have been marked as hidden.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Category.FindChildrenInList(System.Collections.Generic.List{Hotcakes.Commerce.Catalog.CategorySnapshot},System.String,System.Boolean)">
            <summary>
                Allows you to get a listing of all of the categories that are children of the specified parent category.
            </summary>
            <param name="allCats">A list of CategorySnapshot that we want to search through</param>
            <param name="parentId">The GUID (bvin) of the parent category that we want to find children for</param>
            <param name="showHidden"></param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Category.FindInList(System.Collections.Generic.List{Hotcakes.Commerce.Catalog.CategorySnapshot},System.String)">
            <summary>
                Allows you to find a specific category in the list that matches the category ID (bvin)
            </summary>
            <param name="allCats">A list of CategorySnapshot that we want to search through</param>
            <param name="bvin">The category ID to look for</param>
            <returns>A single instance of CategorySnapshot</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Category.BuildTrailToRoot(System.String,Hotcakes.Commerce.Catalog.ICategoryRepository)">
            <summary>
                Builds a breadscrumb trail for all child categories related to the given category ID
            </summary>
            <param name="categoryId">The category ID (bvin) that we want to build a breadcrumb off of</param>
            <param name="repo">An instance of the data that contains the categories</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Category.BuildParentTrail(System.Collections.Generic.List{Hotcakes.Commerce.Catalog.CategorySnapshot}@,System.String,System.Collections.Generic.List{Hotcakes.Commerce.Catalog.CategorySnapshot}@)">
            <summary>
                Builds a breadcrumb of categories that match the specified category ID
            </summary>
            <param name="allCats">A list of CategorySnapshot that we want to search through</param>
            <param name="currentId">The category ID (bvin) that we want to build a breadcrumb off of</param>
            <param name="trail">The list of the categories that make up the breadcrumb trail</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Category.FromDto(Hotcakes.CommerceDTO.v1.Catalog.CategoryDTO)">
            <summary>
                Allows you to populate the current category object using a CategoryDTO instance
            </summary>
            <param name="dto">An instance of the category from the REST API</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Category.ToDto">
            <summary>
                Allows you to convert the current category object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of CategoryDTO</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.Bvin">
            <summary>
                This is the ID of the category.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.CreationDateUtc">
            <summary>
                The creation date is used for auditing purposes to know when the category was created.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.LastUpdatedUtc">
            <summary>
                The last updated date is used for auditing purposes to know when the category was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.ParentId">
            <summary>
                Having an ID here will make this category a child or nested category of the category that matches this ID. This
                helps to create nested navigation and other features.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.Name">
            <summary>
                This is the name of the category that the customers will see in their views.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.Description">
            <summary>
                If the description exists, it will be placed below the category banner.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.DisplaySortOrder">
            <summary>
                Except when overridden by a “sort” querystring parameter, this value determines how the products in the category
                will be sorted.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.SourceType">
            <summary>
                Allows you to define whether your category is a typical category or a placeholder link to another resource.
            </summary>
            <remarks>Always use the CategorySourceType enum for this property.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.SortOrder">
            <summary>
                Allows you to define how the products in this category will be ordered.
            </summary>
            <remarks>Always use the CategorySortOrderDTO enum for this property.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.MetaKeywords">
            <summary>
                These keywords are used to adjust the keywords in the source code of the category landing page for SEO.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.MetaDescription">
            <summary>
                This description is used to adjust the description in the source code of the category landing page for SEO.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.MetaTitle">
            <summary>
                This title is used to adjust the title in the source code of the category landing page for SEO.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.ImageUrl">
            <summary>
                This is the image of the category that you want associated with it in the various views. It also is used to
                generate the category thumbnail.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.BannerImageUrl">
            <summary>
                If populated with a URL, the specified banner will be displayed in the category header.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.CustomPageUrl">
            <summary>
                If populated with a URL, this value will be used as the URL for the category when clicked.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.CustomPageOpenInNewWindow">
            <summary>
                If true and if using a category as a custom link, this will cause the link to be opened in a new window when the
                customer clicks on it. This is only used in the CategoryRotator content block.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.ShowInTopMenu">
            <summary>
                If true, this category will be shown in the initial list of categories in category lists.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.Hidden">
            <summary>
                Except when overridden by a “sort” querystring parameter, this value determines how the products in the category
                will be sorted.
            </summary>
            <remarks>This needs to be tested. It doesn't appear to be referenced anywhere.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.TemplateName">
            <summary>
                Allows you to specify a specify view in your viewset to be associated with this category when customers see it.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.PreContentColumnId">
            <summary>
                Contains the ID of the content block that you want to use in the header area of the category.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.PostContentColumnId">
            <summary>
                Contains the ID of the content block that you want to use in the footer area of the category.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.ShowTitle">
            <summary>
                If true, the category name is shown in the customer-facing views.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.Keywords">
            <summary>
                These keywords are additional keywords that can be used to further enhance your onsite search to find products in
                this category.
            </summary>
            <remarks>These keywords are currently not being used anywhere</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Category.RewriteUrl">
            <summary>
                This is the slug of the URL, or the last part of the URL to be used to get to this category's landing page. It must
                be unique. If empty, the application will create one based upon the name of the category.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.CategoryPeerSet">
            <summary>
                Category peers information model.
                This is used in the category viewer to
                show the details related to category.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryPeerSet.ToDto">
            <summary>
                Convert model class to database objcets.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryPeerSet.Parents">
            <summary>
                List of <see cref="T:Hotcakes.Commerce.Catalog.CategorySnapshot"/> as parent categories of category on category viewer page.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryPeerSet.Peers">
            <summary>
                List of <see cref="T:Hotcakes.Commerce.Catalog.CategorySnapshot"/> as peers of category on category viewer page.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryPeerSet.Children">
            <summary>
                List of <see cref="T:Hotcakes.Commerce.Catalog.CategorySnapshot"/> as childerns of category on category viewer page.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.CategoryProductAssociation">
            <summary>
                This is the primary class used for category product associations in the main application.
            </summary>
            <remarks>The REST API equivalent is CategoryProductAssociationDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociation.ToDto">
            <summary>
                Allows you to convert the current category product association object to the DTO equivalent for use with the REST
                API
            </summary>
            <returns>A new instance of CategoryProductAssociationDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.CategoryProductAssociation.FromDto(Hotcakes.CommerceDTO.v1.Catalog.CategoryProductAssociationDTO)">
            <summary>
                Allows you to populate the current category product association object using a CategoryProductAssociationDTO
                instance
            </summary>
            <param name="dto">An instance of the category product association from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryProductAssociation.Id">
            <summary>
                The unique ID or primary key of the category product association.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryProductAssociation.CategoryId">
            <summary>
                The unique ID of the category to associate to the product.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryProductAssociation.ProductId">
            <summary>
                The unique ID of the product to associate to the category.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryProductAssociation.SortOrder">
            <summary>
                Defines the order in which the associations appear. This is populated for you upon creation.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.CategoryProductAssociation.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.Product">
            <summary>
                This is the primary class used for all products in the application
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.GetReplaceableTags(Hotcakes.Commerce.HccRequestContext)">
            <summary>
                The template engine will call this method to get a list of the tokens and values that will be replaced in email
                templates.
            </summary>
            <param name="context">An instance of the application</param>
            <returns>List of HtmlTemplateTags - a key/value pair of values to replace placeholders in email templates.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.GetCurrentPrice(System.String,System.Decimal,Hotcakes.Commerce.Orders.LineItem,System.String)">
            <summary>
                This method will return the current price of the product.
            </summary>
            <param name="userBvin">String - the unique ID of the customer (currently not used)</param>
            <param name="adjustment">Decimal - the amount to adjust the price by (currently not used)</param>
            <param name="li">LineItem - the line item used to determine price (currently not used)</param>
            <param name="variantId">String - the unique ID of the variant</param>
            <returns>
                If a variant is found and it is greater than 0.00, that price is returned. Otherwise, the SitePrice property
                is returned.
            </returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.CustomPropertyExists(System.String,System.String)">
            <summary>
                This method allows you to query the product to see if the specified custom property exists already.
            </summary>
            <param name="devId">
                String - this is a value that's unique to the developer to group together custom properties to save
                safely.
            </param>
            <param name="propertyKey">String - this is the key that the property is saved under that is used to find a value for.</param>
            <returns>If true, the custom property exists, matching the devId and propertyKey</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.CustomPropertySet(System.String,System.String,System.String)">
            <summary>
                When used, this method allows you to either save or update a custom property for the current product.
            </summary>
            <param name="devId">
                String - this is a value that's unique to the developer to group together custom properties to save
                safely.
            </param>
            <param name="key">String - this is the key that the property is saved under that is used to find a value for.</param>
            <param name="value">String - this is the value that the property should be saving and returned when the key is queried.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.CustomPropertySet(System.String,System.String,System.Int64)">
            <summary>
                When used, this method allows you to either save or update a custom property for the current product.
            </summary>
            <param name="devId">
                String - this is a value that's unique to the developer to group together custom properties to save
                safely.
            </param>
            <param name="key">String - this is the key that the property is saved under that is used to find a value for.</param>
            <param name="value">Long - this is the value that the property should be saving and returned when the key is queried.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.CustomPropertyGet(System.String,System.String)">
            <summary>
                When called, this method queries the custom properties to find and return the one that matches the specified devId
                and key.
            </summary>
            <param name="devId">
                String - this is a value that's unique to the developer to group together custom properties to save
                safely.
            </param>
            <param name="key">String - this is the key that the property is saved under that is used to find a value for.</param>
            <returns>If found, the value of the custom property is returned. Otherwise, an empty string will be returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.CustomPropertyGetAsBool(System.String,System.String)">
            <summary>
                When called, this method queries the custom properties to find and return the one that matches the specified devId
                and key.
            </summary>
            <param name="devId">
                String - this is a value that's unique to the developer to group together custom properties to save
                safely.
            </param>
            <param name="key">String - this is the key that the property is saved under that is used to find a value for.</param>
            <returns>If found, true will be returned. Otherwise, this method will default to false.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.CustomPropertyGetAsLong(System.String,System.String)">
            <summary>
                When called, this method queries the custom properties to find and return the one that matches the specified devId
                and key.
            </summary>
            <param name="devId">
                String - this is a value that's unique to the developer to group together custom properties to save
                safely.
            </param>
            <param name="key">String - this is the key that the property is saved under that is used to find a value for.</param>
            <returns>If found, the saved value will be returned. Otherwise, this method will return 0.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.CustomPropertySetAsBool(System.String,System.String,System.Boolean)">
            <summary>
                When used, this method allows you to either save or update a custom property for the current product.
            </summary>
            <param name="devId">
                String - this is a value that's unique to the developer to group together custom properties to save
                safely.
            </param>
            <param name="key">String - this is the key that the property is saved under that is used to find a value for.</param>
            <param name="value">
                Boolean - this is the value that the property should be saving and returned when the key is
                queried.
            </param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.CustomPropertyRemove(System.String,System.String)">
            <summary>
                When used, this method allows you to permanently remove a custom property.
            </summary>
            <param name="devId">
                String - this is a value that's unique to the developer to group together custom properties to save
                safely.
            </param>
            <param name="key">String - this is the key that the property is saved under that is used to find a value for.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.CustomPropertiesToXml">
            <summary>
                This method will write all of the custom properties to XML and return it as a string.
            </summary>
            <returns>String - the XML representation of all of the custom properties for the product.</returns>
            <remarks>Any issues that are caused by this method are written to the EventLog.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.CustomPropertiesFromXml(System.String)">
            <summary>
                Using this method will allow you to load all of the custom properties from an XML data source into the
                CustomProperties property.
            </summary>
            <param name="data">String - the XML representation of the serialized custom properties collection.</param>
            <returns>
                If no errors occured, true is returned and the CustomProperties property will have one or many custom
                properties available.
            </returns>
            <remarks>
                If any errors occur, they will be written to the EventLog and the CustomProperties property will contain an
                empty collection.
            </remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.TabsFromXml(System.String)">
            <summary>
                This method will populate the Tabs property with tab information from an XML data source.
            </summary>
            <param name="xml">String - the XML serialized representation of the product.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.TabsToXml">
            <summary>
                This method will write the Tabs property to XML.
            </summary>
            <returns>String - the XML serialized representation of the Tabs property.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.IsTaxable">
            <summary>
                This property simply returns the appropriate value from the TaxExempt property.
            </summary>
            <returns>If true, tax rules and calculation will be applied to this product.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.HasOptions">
            <summary>
                If the product has at least one Option, this property will return true.
            </summary>
            <returns>If true, there are one or more Options available for this product.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.HasVariants">
            <summary>
                If the product has at least one Variant, this property will return true.
            </summary>
            <returns>If true, there are one or more Variants available for this product.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.Clone(System.Boolean,System.Boolean)">
            <summary>
                This method allows you to clone the current product to create a new one based upon it.
            </summary>
            <param name="cloneProductChoicesAndInputs">
                If true, the Options (choices) will be cloned along with the rest of the
                Product properties.
            </param>
            <param name="cloneProductImages">If true, the Images will be cloned along with the rest of the Product properties.</param>
            <returns>A copy of the current product with an empty Bvin (ID)</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.Clone">
            <summary>
                This method allows you to clone the current product to create a new one based upon it.
            </summary>
            <returns>A copy of the current product with an empty Bvin (ID)</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.ValidateSelections(Hotcakes.Commerce.Catalog.OptionSelections)">
            <summary>
                This method will validate the selections made to ensure that they can be made.
            </summary>
            <param name="selections">A collection of selections</param>
            <returns>ValidateSelectionsResult - basically a true or false result</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.GetProductTypeProperties">
            <summary>
                This method will return a collection of the product type properties that match the product type of the current
                product.
            </summary>
            <returns>Either a populated or empty list of ProductProperty</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.GetProductTypeProperties(Hotcakes.Commerce.HotcakesApplication)">
            <summary>
                This method will return a collection of the product type properties that match the product type of the current
                product.
            </summary>
            <param name="app">A populated instance of the HccApplication object (if null, the method will create this for you)</param>
            <returns>Either a populated or empty list of ProductProperty</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.GetProductTypeProperty(System.String)">
            <summary>
                Allows you to return a specific product type property by name
            </summary>
            <param name="name">The name of the product type property you want to find</param>
            <returns>You will get a ProductPropertySnapshot object if the property exists, otherwise it will be a NULL object.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.GetProductTypeProperty(Hotcakes.Commerce.HotcakesApplication,System.String)">
            <summary>
                Allows you to return a specific product type property by name
            </summary>
            <param name="app">A populated instance of the HccApplication object (if null, the method will create this for you)</param>
            <param name="name">The name of the product type property you want to find</param>
            <returns>You will get a ProductPropertySnapshot object if the property exists, otherwise it will be a NULL object.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.RenderTypeProperties(System.Boolean,Hotcakes.Commerce.HccRequestContext)">
            <summary>
                When called, this method will output a HTML listing of the product type properties associated with this product.
            </summary>
            <param name="forDropShipper">
                Boolean - If true, the list will filter out properties that are not allowed to be shown to
                drop shippers.
            </param>
            <param name="context">An instance of the Hotcakes Request context</param>
            <returns>String - HTML unordered list output representing the product type properties.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.FromDto(Hotcakes.CommerceDTO.v1.Catalog.ProductDTO)">
            <summary>
                Allows you to populate the current product object using a ProductDTO instance
            </summary>
            <param name="dto">An instance of the product from the REST API</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.Product.ToDto">
            <summary>
                Allows you to convert the current product object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of ProductDTO</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.CustomProperties">
            <summary>
                A collection of custom product meta data that can be used for any API or integration-based purposes.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.Id">
            <summary>
                This is the numeric version of the unique ID of the product as generated by the database.
            </summary>
            <remarks>The application will not use this property. Bvin should be used instead for all integration and development.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.Bvin">
            <summary>
                The unique ID or primary key of the product.
            </summary>
            <remarks>This property should always be used instead of Id.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.LastUpdated">
            <summary>
                The last updated date is used for auditing purposes to know when the product was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.Sku">
            <summary>
                A SKU is the "stock keeping unit" and is often used as a primary or unique key to identify the product across
                multiple mediums and systems.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.ProductName">
            <summary>
                The product name is the title of the product as a customer will see it.
            </summary>
            <remarks>This value should be the localized version of the product name.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.ProductTypeId">
            <summary>
                A unique ID matching a product type that this product should be treated as.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.ListPrice">
            <summary>
                This is the price that the product is normally sold to the public as.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.SitePrice">
            <summary>
                The site price reflects the actual price that a customer will pay, regardless to the list price (MSRP).
            </summary>
            <remarks>This value will not reflect changes made by sales, price groups, or offers.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.SitePriceOverrideText">
            <summary>
                This value is set in the product editing view and allows you to supply a user-friendly message about the prive to
                customers.
            </summary>
            <remarks>This value is not currently used in the application.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.SiteCost">
            <summary>
                This property should reflect the amount that this product cost to acquire.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.IsUserSuppliedPrice">
            <summary>
                If true, this property defines that this product should allow a customer to define the price, such as a donation
                value.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.IsBundle">
            <summary>
                If true, this product contains a collection of products, sold as a group.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.IsGiftCard">
            <summary>
                If true, this product represents a gift certificate.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.UserSuppliedPriceLabel">
            <summary>
                This is the localized label that will be displayed next to the user's supplied price textbox.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.IsRecurring">
            <summary>
                If true, this product requires recurring payment.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.RecurringInterval">
            <summary>
                Defines how often payments will be done
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.RecurringIntervalType">
            <summary>
                Defines period type of recurring payments
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.HideQty">
            <summary>
                If true, the user interface should not display a quantity textbox to the customer.
            </summary>
            <remarks>If true, the mimimun quantity property will be used.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.MetaKeywords">
            <summary>
                The meta keywords are used for both indexing the product in the local search engine and for injecting into the meta
                data of the web page.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.MetaDescription">
            <summary>
                The meta description is used for both indexing the product in the local search engine and for injecting into the
                meta data of the web page.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.MetaTitle">
            <summary>
                The meta title is used for both indexing the product in the local search engine and for injecting into the meta
                data of the web page.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.TaxExempt">
            <summary>
                If true, tax rules and calculation will not be applied to this product.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.TaxSchedule">
            <summary>
                When specified, this allows the current product to be applied against the specified tax schedule.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.ShippingDetails">
            <summary>
                This represents a collection of properties related to shipping the current product.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.Status">
            <summary>
                This property maps to the "active" checkbox in the user interface and determines if the product will be available
                to customers or not.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.ImageFileSmall">
            <summary>
                The file name of the small version of the primary product image.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.ImageFileSmallAlternateText">
            <summary>
                The localized text saved specifically to be used for the small version of the primary product image.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.ImageFileMedium">
            <summary>
                The file name of the medium version of the primary product image.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.ImageFileMediumAlternateText">
            <summary>
                The localized text saved specifically to be used for the medium version of the primary product image.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.CreationDateUtc">
            <summary>
                The creation date is used for auditing purposes to know when the product was first created.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.MinimumQty">
            <summary>
                When greater than zero, this value will be the minimum allowable quantity for the product before the cart allows it
                to be added.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.ShortDescription">
            <summary>
                A shorter version of the LongDescription property.
            </summary>
            <remarks>This property is currently not being used in the application.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.LongDescription">
            <summary>
                This is the product description that is shown to customers.
            </summary>
            <remarks>This value contains HTML.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.ManufacturerId">
            <summary>
                This property defines a manufacturer that this product is created by.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.VendorId">
            <summary>
                This property defines a vendor that this product is distributed by.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.GiftWrapAllowed">
            <summary>
                If true, the current product can be gift wrapped prior to shipping for delivery.
            </summary>
            <remarks>This property is currently not being used in the application.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.HiddenSearchKeywords">
            <summary>
                This property contains a comma delimited list of variant SKU's when necessary, assisting with the native search
                engine.
            </summary>
            <remarks>This property should not be manually updated outside of the application logic.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.GiftWrapPrice">
            <summary>
                If gift wrap is enabled for this product and selected, this price will be added to the order total.
            </summary>
            <remarks>This property is currently not being used in the application.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.Keywords">
            <summary>
                This property contains search keywords that will be used by the native search engine, but not exposed to public
                search engines.
            </summary>
            <remarks>This is a great place to put keywords that might relate to competitive product/service names.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.TemplateName">
            <summary>
                When speficied, the current product will use this template, unless overridden at the module settings.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.PreContentColumnId">
            <summary>
                If specified, the content block matching the given ID will be presented as a header element above the product
                listing.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.PostContentColumnId">
            <summary>
                If specified, the content block matching the given ID will be presented as a footer element below the product
                listing.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.UrlSlug">
            <summary>
                This unique value will be the final set of characters after the last slash in the page URL.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.InventoryMode">
            <summary>
                The value of this property defines how the product will be treated by the application once it is out of stock.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.IsAvailableForSale">
            <summary>
                A dymanically propulated property to help the views know if this product is available, based upon status and
                inventory mode/levels.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.Featured">
            <summary>
                When set to true, this property tells the application to allow this product to be listed in the featured product
                view.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.IsSearchable">
            <summary>
                If true, this product will be indexed and returned in the search results.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.AllowReviews">
            <summary>
                If set to true, this product will allow reviews to be saved by customers.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.ContentCulture">
            <summary>
                This property is intended to hold the localization-friendly name of the culture for the product.
            </summary>
            <remarks>This property is inherited from an implementation and is currently not being used in the application.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.Tabs">
            <summary>
                A collection of info tabs that contain additional product details and are generally found below the product
                description.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.BundledProducts">
            <summary>
                A collections of products that are bundled into this product record.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.ShippingCharge">
            <summary>
                Determines how product shipping will be charged on shippable products.
            </summary>
            <value>
                The shipping charge.
            </value>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.ShippingMode">
            <summary>
                This property simply returns the ShippingMode from the local ShippingDetails property.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.IsNew">
            <summary>
                If the product was created less than 30 days ago, this property will return true.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.SwatchPath">
            <summary>
                Returns the path saved by the merchant in the product edit view
            </summary>
            <remarks>This should match up with a folder in the swatches folder of the Hotcakes data directory</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.Images">
            <summary>
                A collection of the additional images associated with this product.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.Reviews">
            <summary>
                A collection of all of the reviews that relate to this product.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.ReviewsApproved">
            <summary>
                A collection of the approved reviews that related to this product, based on the Reviews property.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.Options">
            <summary>
                This property contains a collection of the options (choices) that will be presented to a customer.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.Product.Variants">
            <summary>
                This is a collection of the variants that belong to this product.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductFile">
            <summary>
                Product file information
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFile.#ctor">
            <summary>
                Set default values
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFile.ToDto">
            <summary>
                Create DTO object for API
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFile.FromDto(Hotcakes.CommerceDTO.v1.Catalog.ProductFileDTO)">
            <summary>
                Set values of the product file based on the DTO instance
            </summary>
            <param name="dto"><see cref="T:Hotcakes.CommerceDTO.v1.Catalog.ProductFileDTO"/> instance</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFile.SaveFile(System.Int64,System.String,System.String,System.Web.HttpPostedFile)">
            <summary>
                Save file
            </summary>
            <param name="storeId">Store unique identifier</param>
            <param name="fileid">File unique identifer</param>
            <param name="fileName">File name</param>
            <param name="file"><see cref="T:System.Web.HttpPostedFile"/> instance</param>
            <returns>Returns true if file saved successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFile.SaveFile(System.Int64,System.String,System.String,System.IO.FileStream)">
            <summary>
                Save file
            </summary>
            <param name="storeId">Store unique identifier</param>
            <param name="fileid">File unique identifier</param>
            <param name="fileName">File Name</param>
            <param name="stream">File stream instance</param>
            <returns>Returs true if file saved successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFile.SaveFile(System.Int64,System.String,System.String,System.Byte[])">
            <summary>
                Save file
            </summary>
            <param name="storeId">Store unique identifier</param>
            <param name="fileId">File unique identifier</param>
            <param name="fileName">File name</param>
            <param name="fileData">File byte array</param>
            <returns>Returns true if the file saved successfully</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFile.ReadWriteStream(System.IO.Stream,System.IO.Stream)">
            <summary>
                Save data from source to destination file
            </summary>
            <param name="readStream">Source file stream</param>
            <param name="writeStream">Destination file stream</param>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductFile.GetPhysicalFile(Hotcakes.Commerce.Catalog.ProductFile,System.String)">
            <summary>
                Get file steam of the given product file
            </summary>
            <param name="f"><see cref="T:Hotcakes.Commerce.Catalog.ProductFile"/> instance</param>
            <param name="path">Path of the file</param>
            <returns>Returns Filesteam of the given product</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductFile.CombinedDisplay">
            <summary>
                Combine description and file name
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductInventory">
            <summary>
                This is the primary object that is used to manage all aspects of product inventory
            </summary>
            <remarks>The REST API equivalent is ProductInventoryyDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductInventory.EmailLowStockReport(System.Object,Hotcakes.Commerce.HotcakesApplication)">
            <summary>
                Use this method to send an email to the merchant about the low stock level.
            </summary>
            <param name="State">This parameter is not used. Pass null to it.</param>
            <param name="app">An active instance of HotcakesApplication, used to access store settings.</param>
            <remarks>This method is currently not called in the application.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductInventory.EmailLowStockReport(System.String,System.String,Hotcakes.Commerce.HotcakesApplication)">
            <summary>
                Use this method to send an email to the merchant about the low stock level.
            </summary>
            <param name="recipientEmail">String - the email address where to send the low stock report to</param>
            <param name="storeName">String - the name of the store to use for the email template</param>
            <param name="app">An active instance of HotcakesApplication, used to access store settings.</param>
            <returns>If true, the email was sent successfully using the given parameters.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductInventory.ToDto">
            <summary>
                Allows you to convert the current product inventory object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of ProductInventoryDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductInventory.FromDto(Hotcakes.CommerceDTO.v1.Catalog.ProductInventoryDTO)">
            <summary>
                Allows you to populate the current product inventory object using a ProductInventoryDTO instance
            </summary>
            <param name="dto">An instance of the product inventory from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductInventory.Bvin">
            <summary>
                This is the unique ID or primary key of the product inventory record.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductInventory.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductInventory.LastUpdated">
            <summary>
                The last updated date is used for auditing purposes to know when the product inventory was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductInventory.ProductBvin">
            <summary>
                The unique ID or Bvin of the product that this inventory relates to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductInventory.VariantId">
            <summary>
                When populated, the variant ID specifies that this record relates to a specific variant of the product.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductInventory.QuantityOnHand">
            <summary>
                The total physical count of items on hand.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductInventory.QuantityReserved">
            <summary>
                Count of items in stock but reserved for carts or orders.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductInventory.LowStockPoint">
            <summary>
                Determines when a product has hit a point to where it is considered to be low on stock.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductInventory.OutOfStockPoint">
            <summary>
                The value that signifies that the the product should be considered out of stock.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductInventory.QuantityAvailableForSale">
            <summary>
                Calculates the number of products currently available to sale based on inventory levels and settings.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductInventoryMode">
            <summary>
                This enumeration helps to define how a product will be displayed and managed when a product is out of stock.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductInventoryMode.NotSet">
            <summary>
                Not specified - Should not be used!
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductInventoryMode.AlwayInStock">
            <summary>
                This setting specifies that the product will always be allowed to be viewed and purchased, regardless of inventory
                levels.
            </summary>
            <remarks>This is the default setting in the application.</remarks>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductInventoryMode.WhenOutOfStockHide">
            <summary>
                If the product is out of stock, it will no longer be available in the user interface and it cannot be purchased.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductInventoryMode.WhenOutOfStockShow">
            <summary>
                When this setting is used, the product can be seen when out of stock, but it cannot be purchased.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductInventoryMode.WhenOutOfStockAllowBackorders">
            <summary>
                This setting will allow the product to be purchased when out of stock, but as a back order.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductInventoryStatus.NotSet">
            <summary>
                Should not use
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductInventoryStatus.NotAvailable">
            <summary>
                The product is NOT available based upon inventory levels and/or mode settings
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductInventoryStatus.Available">
            <summary>
                The product is available based upon inventory levels and/or mode settings
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductInventoryStatus.LowInventory">
            <summary>
                SHOULD NOT BE USED FOR ANY EXTENSIBILITY - currently only used by the product search feature
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductProperty">
            <summary>
                This is the primary object that is used to manage all aspects of ProductProperties in the main application.
            </summary>
            <remarks>The REST API equivalent is ProductPropertyDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductProperty.GetChoiceValue(System.String)">
            <summary>
                This method returns the value for the given ChoiceName in the parameter. The choice must exist in the Choices
                property to return the expected value.
            </summary>
            <param name="choiceName">The name of the choice to find a value for.</param>
            <returns>If the choice exists, the respective value will be returned. Otherwise, an empty string will be returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductProperty.GetChoiceName(System.Int64)">
            <summary>
                This method returns the name for the given ChoiceValue in the parameter. The choice must exist in the Choices
                property to return the expected name.
            </summary>
            <param name="choiceVal">The value of the choice to find the name of.</param>
            <returns>If the choice exists, the respective name will be returned. Otherwise, an empty string will be returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductProperty.ToDto">
            <summary>
                Allows you to convert the current product property object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of ProductPropertyDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductProperty.FromDto(Hotcakes.CommerceDTO.v1.Catalog.ProductPropertyDTO)">
            <summary>
                Allows you to populate the current product property object using a ProductPropertyDTO instance
            </summary>
            <param name="dto">An instance of the ProductProperty from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.Id">
            <summary>
                The unique ID or identifier/primary key of the product property.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.PropertyName">
            <summary>
                The globally used system name for the product property.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.DisplayName">
            <summary>
                The name used on localized sites to recognize the product property in the native or chosen language.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.DisplayOnSite">
            <summary>
                A setting used to determine whether or not this product property is displayed on the site to customers.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.DisplayToDropShipper">
            <summary>
                A setting used to determine whether or not this product property is displayed to drop shippers.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.DisplayOnSearch">
            <summary>
                A setting used to determine whether or not this product property is displayed on the search results facets.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.TypeCode">
            <summary>
                The type of property that this product property is, which helps determine how it's displayed to merchants and
                customers.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.DefaultValue">
            <summary>
                This is the default value that will first be used in products, until the product has been updated to have another
                value.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.DefaultLocalizableValue">
            <summary>
                If the site is multi-lingual, this value will be used instead of the DefaultValue property.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.CultureCode">
            <summary>
                This property reflects the language that this product property has been saved for.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.LastUpdatedUtc">
            <summary>
                The last updated date is used for auditing purposes to know when the product property was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.IsLocalizable">
            <summary>
                This property is used to determine whether or not the currenty property supports localization.
            </summary>
            <remarks>When true, the DefaultLocalizableValue will be used over the DefaultValue property.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.Choices">
            <summary>
                A collection of choices that belong to this product property.
            </summary>
            <remarks>This property only applies when the TypeCode property is MultipleChoiceField (2).</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.FriendlyTypeName">
            <summary>
                A human-readable version of the TypeCode property for displaying to merchants.
            </summary>
            <remarks>This property is not currently used anywere in the application.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductProperty.TypeCodeDisplayName">
            <summary>
                A human-readable version of the TypeCode property for displaying to merchants.
            </summary>
            <remarks>This property is not currently used anywere in the application.</remarks>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductPropertyChoice">
            <summary>
                This is the primary object that is used to manage all aspects of choices that are part of product properties.
            </summary>
            <remarks>The REST API equivalent is ProductPropertyChoiceDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductPropertyChoice.ToDto">
            <summary>
                Allows you to convert the current product property object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of ProductPropertyDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductPropertyChoice.FromDto(Hotcakes.CommerceDTO.v1.Catalog.ProductPropertyChoiceDTO)">
            <summary>
                Allows you to populate the current product property object using a ProductPropertyDTO instance
            </summary>
            <param name="dto">An instance of the ProductProperty from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductPropertyChoice.Id">
            <summary>
                This is the unique ID or primary key of the choice.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductPropertyChoice.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductPropertyChoice.PropertyId">
            <summary>
                The unique ID of the product property that this choice is assigned to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductPropertyChoice.ChoiceName">
            <summary>
                This is the system or localization-safe name of the choice.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductPropertyChoice.DisplayName">
            <summary>
                When localization is enabled, this is the language-friendly name that is used over the ChoiceName.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductPropertyChoice.SortOrder">
            <summary>
                This is the numeric representation of the order that this choice will appear when listed with the other product
                property choices.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductPropertyChoice.LastUpdated">
            <summary>
                The last updated date is used for auditing purposes to know when the product property was last updated.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductPropertyType">
            <summary>
                This enumeration allows for ProductProperties to determine how to accept, store, and display product types and
                their respective values.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductPropertyType.None">
            <summary>
                Only used when the product property type is unknown.
            </summary>
            <remarks>This is currently not used in the application.</remarks>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductPropertyType.TextField">
            <summary>
                When specified, this type will adjust the UI to display a TextArea control. This is the default type used in the
                application.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductPropertyType.MultipleChoiceField">
            <summary>
                This product property type renders the product properties in a select (drop down list) HTML element. This is
                primarily used for Choices.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductPropertyType.CurrencyField">
            <summary>
                The currency option is used when currency should be displayed to a customer. This product property type will cause
                validation of the value as a decimal.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductPropertyType.DateField">
            <summary>
                When specified, this type will cause the UI to render a TextBox for a date input as well as initiate validation to
                ensure the value saved is a date.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductPropertyType.HyperLink">
            <summary>
                A TextBox will be rendered in the UI when this type is used, to allow for a URL to be entered.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductPropertyType.FileUpload">
            <summary>
                When used, this product property type will cause an upload feature to be rendered in the UI.
            </summary>
            <remarks>This type is not yet implemented at this time.</remarks>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductReview">
            <summary>
                This is the primary object that is used to manage all aspects of Reviews in the main application.
            </summary>
            <remarks>The REST API equivalent is ProductReviewDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductReview.ReviewDateForTimeZone(System.TimeZoneInfo)">
            <summary>
                A time zone adjusted date/time stamp of the review date in the local time of the current user.
            </summary>
            <param name="tz">TimeZoneInfo - an object describing the timezone of the user.</param>
            <returns>DateTime - an adjusted date/time stamp for the current user in their time zone.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductReview.ToDto">
            <summary>
                Allows you to convert the current product review object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of ProductReviewDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductReview.FromDto(Hotcakes.CommerceDTO.v1.Catalog.ProductReviewDTO)">
            <summary>
                Allows you to populate the current product review object using a ProductReviewDTO instance
            </summary>
            <param name="dto">An instance of the product review from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductReview.Bvin">
            <summary>
                This is the ID of the review.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductReview.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductReview.LastUpdated">
            <summary>
                The last updated date is used for auditing purposes to know when the review was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductReview.UserID">
            <summary>
                The unique ID of the user account that created the review.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductReview.ProductBvin">
            <summary>
                The unique ID of the product that this review is written for.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductReview.ReviewDate">
            <summary>
                The date/time stamp reflecting when the review was submitted. This value is shown to customers.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductReview.ReviewDateUtc">
            <summary>
                The UTC version of the date/time stamp reflecting when the review was submitted.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductReview.Rating">
            <summary>
                A star rating from 1-5 to reflect how good or bad the purchased product and/or service was.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductReview.RatingAsInteger">
            <summary>
                A conversion of Rating to a numeric value, used for mathematical functions.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductReview.Karma">
            <summary>
                Karma is used by merchants to adjust the overall rating of a review.
            </summary>
            <remarks>This property is currently not being used by the application.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductReview.Description">
            <summary>
                Gets or sets the comments from the reviewer that describe their feelings/experience with the product and/or
                service.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductReview.Approved">
            <summary>
                When moderation is enabled, this value will determine if the review will be shown to site visitors.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductReview.ProductName">
            <summary>
                Gets or sets the name of the product that this review was created for.
            </summary>
            <remarks>This property is currently not saved in the data source.</remarks>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductReviewRating">
            <summary>
                This enumeration is used to give a meaningful value to product reviews.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductReviewRating.ZeroStars">
            <summary>
                Zero stars is effectively a non-rating
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductReviewRating.OneStar">
            <summary>
                One star is the lowest rating a customer can give to a product.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductReviewRating.TwoStars">
            <summary>
                Two stars means that the product was not horrible, but it wasn't good either.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductReviewRating.ThreeStars">
            <summary>
                Three stars reflects that the product was average. It was no better or worse than a similar product.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductReviewRating.FourStars">
            <summary>
                Four starts is a great rating, meaning that the product was nearly perfect.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductReviewRating.FiveStars">
            <summary>
                Five stars are generally only awarded by customers when the product meets 100% of their expectations, including the
                process to get the product.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductType">
            <summary>
                This is the primary object that is used to manage all aspects of ProductType in the main application.
            </summary>
            <remarks>The REST API equivalent is ProductTypeDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductType.ToDto">
            <summary>
                Allows you to convert the current product type object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of ProductTypeDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductType.FromDto(Hotcakes.CommerceDTO.v1.Catalog.ProductTypeDTO)">
            <summary>
                Allows you to populate the current product type object using a ProductTypeDTO instance
            </summary>
            <param name="dto">An instance of the ProductType from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductType.Bvin">
            <summary>
                The unique ID or primary key of the product type.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductType.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductType.LastUpdated">
            <summary>
                The last updated date is used for auditing purposes to know when the product property was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductType.IsPermanent">
            <summary>
                This property is used to tell the main application when a product type is a core feature.
            </summary>
            <remarks>If true, the product type is a built-in product type.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductType.ProductTypeName">
            <summary>
                The name used in the merchant application to label the products that will be using this product type.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductType.TemplateName">
            <summary>
                When used, this property allows you to set a high-level default template for products of this type to use.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductVolumeDiscount">
            <summary>
                This is the primary object that is used to manage all aspects of product volume discount in the main application.
            </summary>
            <remarks>The REST API equivalent is ProductVolumeDiscountDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductVolumeDiscount.ToDto">
            <summary>
                Allows you to convert the current product volume discount object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of ProductVolumeDiscountDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Catalog.ProductVolumeDiscount.FromDto(Hotcakes.CommerceDTO.v1.Catalog.ProductVolumeDiscountDTO)">
            <summary>
                Allows you to populate the current product volume discount object using a ProductVolumeDiscountDTO instance
            </summary>
            <param name="dto">An instance of the product volume discount from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductVolumeDiscount.Bvin">
            <summary>
                The unique ID or primary key of the product volume discount.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductVolumeDiscount.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductVolumeDiscount.LastUpdated">
            <summary>
                The last updated date is used for auditing purposes to know when the product volume discount was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductVolumeDiscount.ProductId">
            <summary>
                The unique ID or Bvin of the product that this discount applies to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductVolumeDiscount.Qty">
            <summary>
                The minimum number of products that must be in the cart to qualify for this volume discount.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductVolumeDiscount.Amount">
            <summary>
                This property should hold the new product price or the discount percentage for the product.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Catalog.ProductVolumeDiscount.DiscountType">
            <summary>
                Specifies the type of discount that the amount is, decimal or percentage.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Catalog.ProductVolumeDiscountType">
            <summary>
                This enumeration is used to help determine how product volume discounts are applied in the application.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductVolumeDiscountType.None">
            <summary>
                The default type used when a new ProductVolumeDiscount object is created.
            </summary>
            <remarks>This value should not be used for any reason.</remarks>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductVolumeDiscountType.Percentage">
            <summary>
                When used, this tells the application to apply the volume discount as a percentage value.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Catalog.ProductVolumeDiscountType.Amount">
            <summary>
                When used, this tells the application to apply the volume discount as a decimal value.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Contacts.Address">
            <summary>
                This is the main object that is used for all address management in the main application
            </summary>
            <remarks>The main REST API equivalent to this is the AddressDTO object</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Address.FromXml(System.Xml.XmlReader@)">
            <summary>
                Allows you to populate this address from an XML data source.
            </summary>
            <param name="xr">A loaded instance of an XmlReader containing a serialized address object.</param>
            <returns>Returns true is the XML is successfully parsed.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Address.ToXmlWriter(System.Xml.XmlWriter@)">
            <summary>
                Allows you to pass in an XmlWriter to emit the current address as XML.
            </summary>
            <param name="xw">A byreference instance of an XmlWriter.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Address.ToHtmlString">
            <summary>
                Allows you to generate an HTML representation of the current Address object.
            </summary>
            <returns>An HTML representation of the current Address object.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Address.GetLines(System.Boolean,System.Boolean)">
            <summary>
                Returns a List-based representation of the address, including all of the common addres properties, as specified in
                the parameters.
            </summary>
            <param name="appendNameAndCompany">It true, the full name and company name will be included in the list.</param>
            <param name="appendPhones">If true, the phone, fax, and website URL will be included in the list.</param>
            <returns>List - an array of the address information in the current object.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Address.GetLinesHtml(System.Boolean,System.Boolean)">
            <summary>
                Returns an HTML-based representation of the address, including all of the common addres properties, as specified in
                the parameters.
            </summary>
            <param name="appendNameAndCompany">It true, the full name and company name will be included in the list.</param>
            <param name="appendPhones">If true, the phone, fax, and website URL will be included in the list.</param>
            <returns>String - The address information in the current object, with each line specified by a BR tag.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Address.IsEqualTo(Hotcakes.Commerce.Contacts.Address)">
            <summary>
                Allows you to compare another address object to determine if the two addresses are the same.
            </summary>
            <param name="a2">Another address object.</param>
            <returns>If true, the current address matches the address in the parameter.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Address.CopyTo(Hotcakes.Commerce.Contacts.Address)">
            <summary>
                Used to copy the current address object to another address object.
            </summary>
            <param name="destinationAddress">An instance of Address where you want the address to be copied to</param>
            <returns>If the copy can execute successfully, true will be returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Address.ToXml(System.Boolean)">
            <summary>
                Allows you to return a serialized version of this address in XML format.
            </summary>
            <param name="omitDeclaration">This value is not used in this method.</param>
            <returns>A string representation of the Address object in XML format.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Address.FromXmlString(System.String)">
            <summary>
                Used to deserialize an XML string to form a new Address object.
            </summary>
            <param name="x">String - the XML used to create an Address object.</param>
            <returns>If successful, true will be returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Address.ToDto">
            <summary>
                Allows you to convert the current address object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of AddressDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Address.FromDto(Hotcakes.CommerceDTO.v1.Contacts.AddressDTO)">
            <summary>
                Allows you to populate the current address object using an AddressDTO instance
            </summary>
            <param name="dto">An instance of the Address from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.Bvin">
            <summary>
                This is the unique ID of the address.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.LastUpdatedUtc">
            <summary>
                The last updated date is used for auditing purposes to know when the address was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.NickName">
            <summary>
                A user-defined value to name this address for easy identification in the user interface.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.FirstName">
            <summary>
                The first name of the recipient at this address.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.MiddleInitial">
            <summary>
                The middle iniital of the recipient at this address.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.LastName">
            <summary>
                The last name or surname of the recipient at this address.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.Company">
            <summary>
                If this is not a residential address, a company name should be specified.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.Line1">
            <summary>
                The first line of the street address, such as 123 Main Street.
            </summary>
            <remarks>This property is mapped to the Street property.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.Line2">
            <summary>
                The second line of the street address, such as Suite 100.
            </summary>
            <remarks>This property is mapped to the Street2 property.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.Line3">
            <summary>
                The third line of the street address. Usually used for non-US or military addresses.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.RegionSystemName">
            <summary>
                If RegionData is not null, this property will contain the RegionData.SystemName. Otherwise, this will be an empty
                string.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.RegionDisplayName">
            <summary>
                If RegionData is not null, this property will contain the RegionData.DisplayName. Otherwise, this will be an empty
                string.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.CountrySystemName">
            <summary>
                If CountryData is not null, this property will contain the CountryData.SystemName. Otherwise, this will be an empty
                string.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.CountryDisplayName">
            <summary>
                If CountryData is not null, this property will contain the CountryData.DisplayName. Otherwise, this will be an
                empty string.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.Phone">
            <summary>
                A telephone number for the address.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.Fax">
            <summary>
                A fax or facsimile number for the address.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.WebSiteUrl">
            <summary>
                A website URL for the address. Primarily used for vendors and manufacturers.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.UserBvin">
            <summary>
                Addresses are mapped back to a CMS user record, even for vendors and manufacturers. This field is the user ID.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.AddressType">
            <summary>
                Allows you to specify if the address belongs to the merchant or not.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.City">
            <summary>
                The name of the city.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.RegionBvin">
            <summary>
                This should contain a valid ID of the Region, if applicable.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.RegionData">
            <summary>
                Contains a localization-friendly mapping of the region information and it's respective country.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.PostalCode">
            <summary>
                Contains the zip or postal code of the address, as necessary.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.CountryBvin">
            <summary>
                This is the unique ID or bvin of the country related to this address.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.CountryData">
            <summary>
                A populated instance of a localized country object matching this address.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.Street">
            <summary>
                The first line of the street address, such as 123 Main Street.
            </summary>
            <remarks>This property is mapped to the Line1 property.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Address.Street2">
            <summary>
                The second line of the street address, such as Suite 100.
            </summary>
            <remarks>This property is mapped to the Line2 property.</remarks>
        </member>
        <member name="T:Hotcakes.Commerce.Contacts.Affiliate">
            <summary>
                This is the main object that is used for all affiliate management in the main application
            </summary>
            <remarks>The main REST API equivalent to this is the AffiliateDTO object</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Affiliate.GetReplaceableTags(Hotcakes.Commerce.HccRequestContext)">
            <summary>
                Allows you to return a listing of token key/value pairs that can be replaced in areas such as the email template
            </summary>
            <param name="context">The context.</param>
            <returns>
                Currently returning an empty list
            </returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Affiliate.GetDefaultLink(Hotcakes.Commerce.Accounts.Store)">
            <summary>
                Returns the referral URL that can be used by the affiliate to refer customers
            </summary>
            <param name="currentStore">Instance of the current store</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Affiliate.ToDto">
            <summary>
                Allows you to convert the current affiliate object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of AffiliateDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.Affiliate.FromDto(Hotcakes.CommerceDTO.v1.Contacts.AffiliateDTO)">
            <summary>
                Allows you to populate the current affiliate object using an AffiliateDTO instance
            </summary>
            <param name="dto">An instance of the affiliate from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.Id">
            <summary>
                The unique ID for the affiliate
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.UserId">
            <summary>
                The unique ID to identify and work with the affiliate in the CMS
            </summary>
            <remarks>Used for other things like security role assignment, and loyalty point credits.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.Username">
            <summary>
                This is the name of the affiliate that is used to map back to the CMS username
            </summary>
            <remarks>This maps to the DisplayName property in the AffiliateDTO object</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.Password">
            <summary>
                The password of the affiliate, used only when creating a new affiliate during registration
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.CreationDate">
            <summary>
                The creation date is only used for auditing purposes to know when the affiliate was created
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.LastUpdatedUtc">
            <summary>
                The last updated date is used for auditing purposes to know when the affiliate was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.Approved">
            <summary>
                Used to specify if the affiliate is allowed to receive credit for referred purchases and promotions
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.Enabled">
            <summary>
                If true, this affiliate is enabled for use on the store. If disabled, all promotions and other affiliate activity
                will not apply.
            </summary>
            <remarks>This is not able to be set in the UI</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.AffiliateId">
            <summary>
                A unique value used to refer customers to the store for affiliate credit
            </summary>
            <remarks>This maps to the ReferralId in the AffiliateDTO object</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.ReferralAffiliateId">
            <summary>
                A unique value to identify an affiliate that referred the current affiliate to the store
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.Email">
            <summary>
                Primary email address used to contact the affiliate
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.Address">
            <summary>
                The primary or business address for the affiliate
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.CommissionAmount">
            <summary>
                The amount to be used to calculate commissions on referred store purchases
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.CommissionType">
            <summary>
                Reflects how the CommissionAmount should be calculated when applying referred purchase commissions
            </summary>
            <remarks>Possible values include: None, Percentage, and Flat Rate</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.ReferralDays">
            <summary>
                Reflects the number of days that an affiliate will "own" the rights to commissions on purchases made by a referred
                customer
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.TaxId">
            <summary>
                The ID that the affiliate uses to report taxes
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.DriversLicenseNumber">
            <summary>
                An optional field that allows for more specific reporting on affiliates and also allows for compliance with law in
                some regions
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.WebSiteUrl">
            <summary>
                The URL of the website of the affiliate
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.Notes">
            <summary>
                Contains private notes about the affiliate. Only store merchants will see them.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.Affiliate.Contacts">
            <summary>
                Contains a listing of the customers that currently assigned to the affiliate
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Contacts.AffiliateReferral">
            <summary>
                This is the main object used for all affiliate referrals through the main application.
            </summary>
            <remarks>This is the application equivalent of the AffiliateReferralDTO REST API object.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.AffiliateReferral.ToDto">
            <summary>
                Allows you to convert the current AffiliateReferral object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of AffiliateReferralDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.AffiliateReferral.FromDto(Hotcakes.CommerceDTO.v1.Contacts.AffiliateReferralDTO)">
            <summary>
                Allows you to populate the current AffiliateReferral object using an AffiliateReferralDTO instance
            </summary>
            <param name="dto">An instance of the AffiliateReferral from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.AffiliateReferral.Id">
            <summary>
                The Unique ID of this affiliate referral instance used to find and update this item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.AffiliateReferral.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.AffiliateReferral.TimeOfReferralUtc">
            <summary>
                The date/time stamp that the referral was made, used for auditing purposes only.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.AffiliateReferral.AffiliateId">
            <summary>
                The unique ID of the affiliate to properly relate the referral to the right affiliate.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.AffiliateReferral.ReferrerUrl">
            <summary>
                This value should contain the referring URL that the affiliate referral came from. It can occasionally be an empty
                string.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Contacts.VendorManufacturer">
            <summary>
                This is the main object that is used for all vendor/manufacturer management in the main application
            </summary>
            <remarks>The main REST API equivalent to this is the VendorManufacturerDTO object</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.VendorManufacturer.GetReplaceableTags(Hotcakes.Commerce.HccRequestContext)">
            <summary>
                Returns a listing of tokens and their replacement used by email templates.
            </summary>
            <param name="context">A populated instance of the Hotcakes Request context</param>
            <returns>List - a key value pairing of tokens and their replacement content.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.VendorManufacturer.AddContact(System.String)">
            <summary>
                Allows for a contact to be added to the current vendor/manufacturer.
            </summary>
            <param name="userId">The unique ID of the user to add to this vendor/manufacturer.</param>
            <returns>If true, the contact was added successfully.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.VendorManufacturer.RemoveContact(System.String)">
            <summary>
                Allows for a specified contact to be removed from the Contacts property in the current vendor/manufacturer.
            </summary>
            <param name="userId">The unique ID of the user account to remove from the property.</param>
            <returns>If true, the contact was successfully removed.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.VendorManufacturer.ContactExists(System.String)">
            <summary>
                Performs a check using the specified UserID to see if the user exists in the Contacts property.
            </summary>
            <param name="userId">The unique ID of the user account to look for.</param>
            <returns>If true, the contact exists in the Contacts property.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.VendorManufacturer.ToDto">
            <summary>
                Allows you to convert the current vendor/manufacturer object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of VendorManufacturerDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Contacts.VendorManufacturer.FromDto(Hotcakes.CommerceDTO.v1.Contacts.VendorManufacturerDTO)">
            <summary>
                Allows you to populate the current vendor/manufacturer object using an VendorManufacturerDTO instance
            </summary>
            <param name="dto">An instance of the vendor/manufacturer from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.VendorManufacturer.Bvin">
            <summary>
                This is the ID of the vendor/manufacturer.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.VendorManufacturer.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.VendorManufacturer.LastUpdated">
            <summary>
                An auditing value to track the last time the vendor/manufacturer record was updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.VendorManufacturer.DisplayName">
            <summary>
                The value used in all administrative and customer views to identify the vendor/manufacturer.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.VendorManufacturer.EmailAddress">
            <summary>
                The primary email address used to contact the vendor/manufacturer. This is used for system emails for actions such
                as drop-shipping.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.VendorManufacturer.Address">
            <summary>
                An address object matching the vendor/manufacturer.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.VendorManufacturer.DropShipEmailTemplateId">
            <summary>
                The email template ID used when workflow sends a notification email about a drop shipment.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.VendorManufacturer.ContactType">
            <summary>
                Specifies whether this instance of the object contains contacts for a vendor or a manufacturer.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Contacts.VendorManufacturer.Contacts">
            <summary>
                Contains a listing of user accounts that belong to the current vendor/manufacturer.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.CustomProperty">
            <summary>
                Custom properties are used to store settings for objects that cannot be put in the user interface.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.CustomProperty.GetValueAsInt">
            <summary>
                Allows you to retrieve the value of a custom property already converted into an integer.
            </summary>
            <returns>If unsuccessful, 0 is returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.CustomProperty.SetValueAsInt(System.Int32)">
            <summary>
                Allows you to assign an integer to the Value property without having to convert it.
            </summary>
            <param name="value">Integer - the value to assign to the Value property</param>
        </member>
        <member name="M:Hotcakes.Commerce.CustomProperty.Clone">
            <summary>
                This method allows you to create a copy of the current custom property.
            </summary>
            <returns>A copy of this custom property</returns>
        </member>
        <member name="M:Hotcakes.Commerce.CustomProperty.FromDto(Hotcakes.CommerceDTO.v1.CustomPropertyDTO)">
            <summary>
                Allows you to populate the current custom property object using a CustomPropertyDTO instance
            </summary>
            <param name="dto">An instance of the custom property from the REST API</param>
        </member>
        <member name="M:Hotcakes.Commerce.CustomProperty.ToDto">
            <summary>
                Allows you to convert the current custom property object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of CustomPropertyDTO</returns>
        </member>
        <member name="P:Hotcakes.Commerce.CustomProperty.DeveloperId">
            <summary>
                This is a unique ID that you use to group your own properties together.
            </summary>
            <remarks>Use any value that you wish here as long as it is unique to your company and you use it consistently.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.CustomProperty.Key">
            <summary>
                This is the unique name that is used to store and retrieve the custom property.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.CustomProperty.Value">
            <summary>
                This is the information that you are saving to later retrieve.
            </summary>
            <remarks>You are not limited in the number of characters that you can use.</remarks>
        </member>
        <member name="T:Hotcakes.Commerce.CustomPropertyCollection">
            <summary>
                Used throughout the application to read/write custom properties for an order. This is ideal for not only HCC
                properties, but integrations by third parties to other systems, such as an ERP.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.CustomPropertyCollection.Add(System.String,System.String,System.String)">
            <summary>
                Adds a new custom property using the specified values.
            </summary>
            <param name="devId">
                The developer ID that created and is managing the custom property. DO NOT use HCC for custom
                integrations.
            </param>
            <param name="key">The unique ID of the custom property used to look up the value.</param>
            <param name="value">The value you wish to save for use later.</param>
        </member>
        <member name="M:Hotcakes.Commerce.CustomPropertyCollection.Exists(System.String,System.String)">
            <summary>
                Used to determine if a custom property already exists or not.
            </summary>
            <param name="devId">
                The developer ID that created and is managing the custom property. DO NOT use HCC for custom
                integrations.
            </param>
            <param name="propertyKey">The unique ID of the custom property used to look up the value.</param>
            <returns>Boolean - if true, a custom property was found matching both the developer ID and the property key.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.CustomPropertyCollection.SetProperty(System.String,System.String,System.String)">
            <summary>
                Adds or updates a custom property using the given values.
            </summary>
            <param name="devId">
                The developer ID that created and is managing the custom property. DO NOT use HCC for custom
                integrations.
            </param>
            <param name="key">The unique ID of the custom property used to look up the value.</param>
            <param name="value">The value you wish to save for use later.</param>
        </member>
        <member name="M:Hotcakes.Commerce.CustomPropertyCollection.SetProperty(System.String,System.String,System.Int32)">
            <summary>
                Adds or updates a custom property using the given values.
            </summary>
            <param name="devId">
                The developer ID that created and is managing the custom property. DO NOT use HCC for custom
                integrations.
            </param>
            <param name="key">The unique ID of the custom property used to look up the value.</param>
            <param name="value">The value you wish to save for use later.</param>
        </member>
        <member name="M:Hotcakes.Commerce.CustomPropertyCollection.GetProperty(System.String,System.String)">
            <summary>
                Queries for and returns the requested custom property value.
            </summary>
            <param name="devId">
                The developer ID that created and is managing the custom property. DO NOT use HCC for custom
                integrations.
            </param>
            <param name="key">The unique ID of the custom property used to look up the value.</param>
            <returns>String - if found, a string version of the custom property value will be returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.CustomPropertyCollection.GetPropertyAsInt(System.String,System.String)">
            <summary>
                Queries for and returns the requested custom property value.
            </summary>
            <param name="devId">
                The developer ID that created and is managing the custom property. DO NOT use HCC for custom
                integrations.
            </param>
            <param name="key">The unique ID of the custom property used to look up the value.</param>
            <returns>Integer - if found, the integer version of the custom property value will be returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.CustomPropertyCollection.Remove(System.String,System.String)">
            <summary>
                Permanently deletes the custom property from the store.
            </summary>
            <param name="devId">The developer ID that created and is managing the custom property.</param>
            <param name="key">The unique ID of the custom property used to delete the custom property from the store.</param>
            <returns>Boolean - if true, the custom property was found and successfully deleted.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.CustomPropertyCollection.ToXml">
            <summary>
                Parses and returns the current custom property collection object as an XML serialized string.
            </summary>
            <returns>String - an XML representation of the current custom property collection object</returns>
        </member>
        <member name="M:Hotcakes.Commerce.CustomPropertyCollection.FromXml(System.String)">
            <summary>
                Accepts an XML serialized version of a custom property collection and returns the deserialized version of the XML.
            </summary>
            <param name="data">The XML representation of a custom property collection.</param>
            <returns>A deserialized version of a custom property collection object.</returns>
        </member>
        <member name="P:Hotcakes.Commerce.CustomPropertyCollection.HccRewardsPointsIssued">
            <summary>
                If true, there is 1 reward point issued.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.CustomPropertyCollection.Item(System.String)">
            <summary>
                Sets or gets the custom property using the specified key for HCC custom properties only.
            </summary>
            <param name="val">The value to read/write</param>
            <returns>CustomProperty</returns>
        </member>
        <member name="P:Hotcakes.Commerce.CustomPropertyCollection.Item(System.String,System.String)">
            <summary>
                Sets or gets the custom property using the specified key for custom properties by any developer.
            </summary>
            <value>
                The <see cref="T:Hotcakes.Commerce.CustomProperty"/>.
            </value>
            <param name="val">The value to read/write</param>
            <param name="developerId">The developer identifier.</param>
            <returns>
                CustomProperty
            </returns>
        </member>
        <member name="M:Hotcakes.Commerce.EventLog.LogEvent(System.String,System.String,Hotcakes.Web.Logging.EventLogSeverity)">
            <summary>
                Records and event to the Hotcakes Commerce event log
            </summary>
            <param name="source">The source of the event</param>
            <param name="message">The description or information about the event</param>
            <param name="severity">The severity.</param>
            <returns>
                True if the event was recorded, otherwise false
            </returns>
        </member>
        <member name="M:Hotcakes.Commerce.EventLog.LogEvent(System.Exception)">
            <summary>
                Logs an exception to the Hotcakes Commerce log
            </summary>
            <param name="ex">Exception to be recorded</param>
            <returns>True if the exception was recorded, otherwise false</returns>
        </member>
        <member name="T:Hotcakes.Commerce.Membership.CustomerAccount">
            <summary>
                This is the primary class used to manage customer accounts. Many of these properties are duplicated in the CMS.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Membership.CustomerAccount.GetReplaceableTags(Hotcakes.Commerce.HccRequestContext)">
            <summary>
                Provides a listing of the tokens that the customer information can be replaced with in email templates
            </summary>
            <param name="context">An instance of the Hotcakes Request context object</param>
            <returns>List of name/value pairs of the tokens and replacement content</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Membership.CustomerAccount.CheckIfNewAddressAndAddNoUpdate(Hotcakes.Commerce.Contacts.Address)">
            <summary>
                Verifies the passed address for the customer, and if new, updates the customer record with it
            </summary>
            <param name="address">New address object to compare against the customer's current address</param>
            <returns>Boolean - if true, the address was created</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Membership.CustomerAccount.DeleteAddress(System.String)">
            <summary>
                Finds the specified address and deletes it from the customer record
            </summary>
            <param name="bvin"></param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Membership.CustomerAccount.UpdateAddress(Hotcakes.Commerce.Contacts.Address)">
            <summary>
                Updates the customer record with the given address
            </summary>
            <param name="a">The new address you want the customer to have</param>
            <returns>Boolean - if true, the update was successful</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Membership.CustomerAccount.ToDto">
            <summary>
                Allows you to convert the current customer account object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of CustomerAccountDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Membership.CustomerAccount.FromDto(Hotcakes.CommerceDTO.v1.Membership.CustomerAccountDTO)">
            <summary>
                Allows you to populate the current customer account object using a CustomerAccount instance
            </summary>
            <param name="dto">An instance of the customer account from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.Bvin">
            <summary>
                The unique ID of the customer account
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.Email">
            <summary>
                The primary email address for the customer and it is used to get their avatar from gravatar.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.Username">
            <summary>
                The username of the customer in the CMS
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.FirstName">
            <summary>
                First name of the customer
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.LastName">
            <summary>
                Last or surname of the customer
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.Password">
            <summary>
                Encrypted password of the customer
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.ShippingAddress">
            <summary>
                Address details for the primary shipping address
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.BillingAddress">
            <summary>
                Address details for billing the customer
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.Addresses">
            <summary>
                Addresses from the customer's address book
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.LastUsedCulture">
            <summary>
                Culture that was used when placing last order
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.Phones">
            <summary>
                Contains a list of phones for the customer
            </summary>
            <remarks>This doesn't appear to be populated anywhere. Might not be in use, or legacy code.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.TaxExempt">
            <summary>
                Defines whether the customer is exempt from paying taxes
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.TaxExemptionNumber">
            <summary>
                If the customer is tax exempt, this number is used for tax reporting
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.Notes">
            <summary>
                Notes about the customer
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.PricingGroupId">
            <summary>
                The unique ID (bvin) of the price group that this customer belongs to.
            </summary>
            <remarks>Enmpty string means that they are not part of any price group.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.Locked">
            <summary>
                Defines whether the customer is locked out or the site or not
            </summary>
            <remarks>This normally happens due to too many invalid login attempts</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.LockedUntilUtc">
            <summary>
                The date that the user will become unlocked automatically
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.FailedLoginCount">
            <summary>
                The number of times that the customer failed to login
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.LastUpdatedUtc">
            <summary>
                The date/time stamp of the last time the customer was updated
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.CreationDateUtc">
            <summary>
                The date/time stamp of when the customer was created
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Membership.CustomerAccount.LastLoginDateUtc">
            <summary>
                The date/time stamp of the last time the customer logged in
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Orders.LineItem">
            <summary>
                This is the primary object that is used to manage all aspects of LineItem
            </summary>
            <remarks>The REST API equivalent is LineItemDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.TotalDiscounts">
            <summary>
                Total of all discounts
            </summary>
            <returns>Decimal</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.EvaluateShippingStatus(System.DateTime)">
            <summary>
                Returns the current shipping status for the current line item.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.DiscountDetailsAsHtml">
            <summary>
                Generates a line by line summary of the discounts that are in this line item.
            </summary>
            <returns>String - an HTML version of the line items for display to the merchant.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.CustomPropertyExists(System.String,System.String)">
            <summary>
                Lets you know if the given custom property exists or not.
            </summary>
            <param name="devId">
                The developer ID that created and is managing the custom property. DO NOT use HCC for custom
                integrations.
            </param>
            <param name="propertyKey">The unique ID of the custom property used to look up the value.</param>
            <returns>Boolean - if true, the requested custom property exists</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.CustomPropertySet(System.String,System.String,System.String)">
            <summary>
                Adds or updates a custom property using the given values.
            </summary>
            <param name="devId">
                The developer ID that created and is managing the custom property. DO NOT use HCC for custom
                integrations.
            </param>
            <param name="key">The unique ID of the custom property used to look up the value.</param>
            <param name="value">The value you wish to save for use later.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.CustomPropertySet(System.String,System.String,System.Boolean)">
            <summary>
                Adds or updates a custom property using the given values.
            </summary>
            <param name="devId">
                The developer ID that created and is managing the custom property. DO NOT use HCC for custom
                integrations.
            </param>
            <param name="key">The unique ID of the custom property used to look up the value.</param>
            <param name="value">The value you wish to save for use later.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.CustomPropertyGet(System.String,System.String)">
            <summary>
                Queries for and returns the requested custom property value.
            </summary>
            <param name="devId">
                The developer ID that created and is managing the custom property. DO NOT use HCC for custom
                integrations.
            </param>
            <param name="key">The unique ID of the custom property used to look up the value.</param>
            <returns>String - if found, a string version of the custom property value will be returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.CustomPropertyGetAsLong(System.String,System.String)">
            <summary>
                Queries for and returns the requested custom property value.
            </summary>
            <param name="devId">
                The developer ID that created and is managing the custom property. DO NOT use HCC for custom
                integrations.
            </param>
            <param name="key">The unique ID of the custom property used to look up the value.</param>
            <returns>Long - if found, a long version of the custom property value will be returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.CustomPropertyGetAsBool(System.String,System.String)">
            <summary>
                Queries for and returns the requested custom property value.
            </summary>
            <param name="devId">
                The developer ID that created and is managing the custom property. DO NOT use HCC for custom
                integrations.
            </param>
            <param name="key">The unique ID of the custom property used to look up the value.</param>
            <returns>Boolean - if found, a boolean version of the custom property value will be returned.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.CustomPropertyRemove(System.String,System.String)">
            <summary>
                Permanently deletes the custom property from the store.
            </summary>
            <param name="devId">The developer ID that created and is managing the custom property.</param>
            <param name="key">The unique ID of the custom property used to delete the custom property from the store.</param>
            <returns>Boolean - if true, the custom property was found and successfully deleted.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.CustomPropertiesToXml">
            <summary>
                Parses and returns the current custom property collection object as an XML serialized string.
            </summary>
            <returns>String - an XML representation of the current custom property collection object</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.CustomPropertiesFromXml(System.String)">
            <summary>
                Accepts an XML serialized version of a custom property collection and returns the deserialized version of the XML.
            </summary>
            <param name="data">The XML representation of a custom property collection.</param>
            <returns>A deserialized version of a custom property collection object.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.SetTaxRate(System.Decimal)">
            <summary>
                Sets the tax rate for this line item.
            </summary>
            <param name="taxRate">Decimal - the tax rate to use.</param>
            <returns>Decimal - the current tax rate.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.SetShippingTaxRate(System.Decimal)">
            <summary>
                Sets the shipping tax rate for this line item.
            </summary>
            <param name="shippingTaxRate">Decimal - the tax rate to use.</param>
            <returns>Decimal - the current tax rate.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.ClearTaxValue">
            <summary>
                Resets all tax properties to zero.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.GetAssociatedProduct(Hotcakes.Commerce.HotcakesApplication)">
            <summary>
                Returns the matching product record for this line item.
            </summary>
            <param name="app">An instance of the Hotcakes Application context.</param>
            <returns>A populated instance of the Product object</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.GetReplaceableTags(Hotcakes.Commerce.HccRequestContext)">
            <summary>
                A collection of the tokens and the replaceable content for email templates.
            </summary>
            <param name="context">An instance of the Hotcakes Request context.</param>
            <returns>List of HtmlTemplateTag</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.GetTotalWeight">
            <summary>
                Returns the weight of the total quantity of this line item.
            </summary>
            <returns>Decimal</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.Equals(Hotcakes.Commerce.Orders.LineItem)">
            <summary>
                Compares the ID of another line item to the current line item to determine if it's the same line item.
            </summary>
            <param name="other">LineItem - a populated instance of another line item.</param>
            <returns>Boolean - if true, the line item ID's match.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.Clone">
            <summary>
                Creates a copy of the current line item.
            </summary>
            <returns>LineItem</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.Clone(System.Boolean)">
            <summary>
                Creates a copy of the line item with the same ID as the original.
            </summary>
            <param name="copyId">If true, the line item ID will be copied.</param>
            <returns>LineItem</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.ToDto">
            <summary>
                Allows you to convert the current line object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of LineItemDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.FromDto(Hotcakes.CommerceDTO.v1.Orders.LineItemDTO)">
            <summary>
                Allows you to populate the current line item object using a LineItemDTO instance
            </summary>
            <param name="dto">An instance of the line item from the REST API</param>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.TotalDiscountsAsPositiveNumber">
            <summary>
                Total of all discounts, or zero if the discounts reach a negative value.
            </summary>
            <returns>Decimal</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.LineItem.TotalDiscountsAsNegativeNumber">
            <summary>
                Total of all discounts, but allowing for a negative value to be returned.
            </summary>
            <returns>Decimal</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.Id">
            <summary>
                The unique ID of the current line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.LastUpdatedUtc">
            <summary>
                The last updated date is used for auditing purposes to know when the line item was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.OrderBvin">
            <summary>
                The unique ID or bvin of the order that this line item belongs to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ProductId">
            <summary>
                The unique ID or bvin of the product matching this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.VariantId">
            <summary>
                If the product is a variant, this will contain the unique ID or bvin of the matching variant.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ProductName">
            <summary>
                The language-friendly name of the product matching this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ProductSku">
            <summary>
                The unique SKU of the product matching this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ProductShortDescription">
            <summary>
                The description of the product matching this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.Quantity">
            <summary>
                The number of products in this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.QuantityReserved">
            <summary>
                The number of products to be held from inventory for this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.QuantityReturned">
            <summary>
                Used to define how many products in this line item are being returned.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.QuantityShipped">
            <summary>
                Defines how many products in this line item have been shipped.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.BasePricePerItem">
            <summary>
                The base price of the product matching this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.AdjustedPricePerItem">
            <summary>
                The cumulative total of the line item, which usually accounts for quanity and promotions.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.LineTotal">
            <summary>
                The cumulative total of the line item, which usually accounts for promotions.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.StatusCode">
            <summary>
                A built-in way to save the status code of a line item when integrating with other systems.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.StatusName">
            <summary>
                A built-in way to save the status name of a line item when integrating with other systems.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.DiscountDetails">
            <summary>
                A collection of all promotions being applied to this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.SelectionData">
            <summary>
                The choices/options that were selected when adding the product to this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.CustomProperties">
            <summary>
                A collection of the custom properties for this line item - great to be used for integration.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.RecurringBilling">
            <summary>
                Gets or sets the subscription data.
            </summary>
            <value>
                The subscription data.
            </value>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.IsFreeItem">
            <summary>
                Gets or sets if item is free.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.FreeQuantity">
            <summary>
                Gets or sets how many items are free in the line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.PromotionIds">
            <summary>
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ProductShippingWeight">
            <summary>
                The weight of a single instance of the product in this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ProductShippingLength">
            <summary>
                The length of a single instance of the product in this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ProductShippingWidth">
            <summary>
                The width of a single instance of the product in this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ProductShippingHeight">
            <summary>
                The height of a single instance of the product in this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.IsNonShipping">
            <summary>
                Reflects whether the matching product for this line item is shippable or not.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ShipFromMode">
            <summary>
                Defines where the product should be shipped from to help support multiple warehouses and/or drop-shipping.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ShipFromNotificationId">
            <summary>
                The unique ID of the shipping source from the matching product.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ShipFromAddress">
            <summary>
                The address of the source where the product will be shipped from.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ShipSeparately">
            <summary>
                Reflects whether the matching product for this line item must be shipped separately or not.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ExtraShipCharge">
            <summary>
                A fixed amount added to the line item from the product in addition to the shipping fee required from the shipping
                provider.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.IsMarkedForFreeShipping">
            <summary>
                When qualified in a promotion, the line item can be marked for free shipping here to not charge the customer for
                shipping.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.FreeShippingMethodIds">
            <summary>
                A listing of the shipping methods that are qualified for free shipping.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ShippingPortion">
            <summary>
                The amount of shipping that was spread into this line from the entire order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ShippingCharge">
            <summary>
                Gets or sets the shipping charge.
            </summary>
            <value>
                The shipping charge.
            </value>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.IsTaxExempt">
            <summary>
                Reflects the tax exempt setting from the matching product for the line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.TaxSchedule">
            <summary>
                The unique ID of the tax schedule used for this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.TaxRate">
            <summary>
                The rate that the products this line item should be taxed at.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ShippingTaxRate">
            <summary>
                The rate that the shipping method should be taxed at.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.TaxPortion">
            <summary>
                The amount of tax that was spread into this line from the entire order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ShippingTaxPortion">
            <summary>
                The amount of shipping tax that was spread into this line from the entire order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.IsUserSuppliedPrice">
            <summary>
                Retuns true if the product matching this line item is a user supplied price product.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.IsBundle">
            <summary>
                Retuns true if the product matching this line item is a bundle.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.IsGiftCard">
            <summary>
                Retuns true if the product matching this line item is a gift card.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.IsRecurring">
            <summary>
                If true, this line item represents a product that requires recurring payment.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.CustomPropGiftCardEmail">
            <summary>
                Gets or sets the gift card recipient email as a custom property.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.CustomPropGiftCardName">
            <summary>
                Gets or sets the gift card recipient name as a custom property.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.CustomPropGiftCardNumber">
            <summary>
                Gets or sets the gift card number as a custom property.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.CustomPropGiftCardMessage">
            <summary>
                Gets or sets the gift card message as a custom property.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.HasAnyDiscounts">
            <summary>
                Returns true if there are any discounts that have been applied to this line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.HasAnyNonSaleDiscounts">
            <summary>
                Returns true if the line item contains any discounts that are not sales (e.g., Offers).
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.LineTotalWithSalesWithoutDiscounts">
            <summary>
                Line item total that includes the sale price but does not include any discounts.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.LineTotalWithoutDiscounts">
            <summary>
                The cumulative total of the line item base price for the given quantity, excluding discounts and sales.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ShippingStatus">
            <summary>
                Returns the current shipping status for the current line item.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.LineItem.ShippingStatusDescription">
            <summary>
                Returns the human-friendly version of the shipping status for display to the merchant.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Orders.Order">
            <summary>
                The Order class is used for Orders and carts placed by customers, merchants, as well as the shopping cart.
            </summary>
            <remarks>
                This class will generally map to the hcc_Order table in the database.
            </remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.SubTotalOfShippingItems">
            <summary>
                The subtotal of all non-shipping line items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.TotalWeightOfShippingItems">
            <summary>
                Total weight of all line items in the order that can be shipped.
            </summary>
            <returns>Decimal representation of the total weight</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.ItemsAsReplaceable">
            <summary>
                Listing of all line items in the order in IReplaceable format.
            </summary>
            <returns>List of IReplaceable</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.PackagesAsReplaceable">
            <summary>
                Listing of all packages in the order in IReplaceable format.
            </summary>
            <returns>List of IReplaceable</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.GetTotal(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Returns the order amount total, with or without discounts.
            </summary>
            <param name="includeUserSuppliedPrice">If true, user supplied price line items will be included in the returned total.</param>
            <param name="includeGiftCards">if set to <c>true</c> [include gift cards].</param>
            <param name="includeDiscounts">If true, discounts will be included in the returned total.</param>
            <returns>
                The total amount of the order, per the given parameters.
            </returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.TotalGrandAfterStoreCredits(Hotcakes.Commerce.Orders.OrderService)">
            <summary>
                The grand total after store credit has been applied, if any.
            </summary>
            <param name="orderService">An instance of the OrderServer to use for data access.</param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.TotalsAsTable(System.String)">
            <summary>
                Information about the order amount total in a summary format.
            </summary>
            <returns>
                An HTML table representation of the order summary, include all of the details about how the total was
                generated.
            </returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.AddOrderDiscount(System.Decimal,System.String,System.Int64,System.Int64)">
            <summary>
                Adds a discount to the order.
            </summary>
            <param name="amount">Amount of the discount to apply.</param>
            <param name="description">Description of what the discount is.</param>
            <param name="promotionId">The promotion identifier.</param>
            <param name="actionId">The action identifier.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.AddShippingDiscount(System.Decimal,System.String,System.Int64,System.Int64)">
            <summary>
                Adds a discount to the shipping.
            </summary>
            <param name="amount">Amount of the discount to apply.</param>
            <param name="description">Description of what the discount is.</param>
            <param name="promotionId">The promotion identifier.</param>
            <param name="actionId">The action identifier.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.AddCouponCode(System.String)">
            <summary>
                Adds a coupon code to the order.
            </summary>
            <param name="code">The coupon code to add.</param>
            <returns>Boolean - if true, the coupon was successfully added.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.CouponCodeExists(System.String)">
            <summary>
                Allows for you to see if the coupon code is already added to the order.
            </summary>
            <param name="code">The coupon code to look for.</param>
            <returns>Boolean - if true, the coupon code has already been added to this order.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.RemoveCouponCode(System.Int64)">
            <summary>
                Removes the specified coupon code from the order.
            </summary>
            <param name="id">The unique ID or primary key of the coupon.</param>
            <returns>Boolean - if true, the coupon was successfully found and removed.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.RemoveCouponCodeByCode(System.String)">
            <summary>
                Removes the specified coupon from the order, using the code.
            </summary>
            <param name="code">The code of the coupon to remove.</param>
            <returns>Boolean - if true, the coupon was successfully removed from the order.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.RemoveAllCouponCodes">
            <summary>
                Removes all coupon codes from the order.
            </summary>
            <returns>Boolean - if true, all coupons were successfully removed.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.GetShippingGroups(System.String)">
            <summary>
                Parses the line items to return the proposed packages for shipping.
            </summary>
            <param name="shippingMethodId">The unique ID of the desired shipping method.</param>
            <returns>List of ShippingGroup</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.IsOrderFreeShipping">
            <summary>
                Evaluates the order to return whether or not shipping is free.
            </summary>
            <returns>Boolean - if true, shipping is free for this order.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.IsOrderHasAllItemsQaulifiedFreeShipping">
            <summary>
                OBSOLETE!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.FindShippedPackages">
            <summary>
                Returns a list of packages in the order that have been shipped already.
            </summary>
            <returns>List of OrderPackage</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.EvaluateCurrentShippingStatus">
            <summary>
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.GetFileDownloadCount(System.String)">
            <summary>
                Returns the total number of times a product file has been downloaded using it's BVIN.
            </summary>
            <param name="fileBvin">The unique ID of the file to return downloads for.</param>
            <returns>Integer - the total number of downloads.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.IncreaseFileDownloadCount(System.String)">
            <summary>
                Increases the download count by one when called.
            </summary>
            <param name="fileBvin">The unique ID of the product file to increase the download count for.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.DecreaseFileDownloadCount(System.String)">
            <summary>
                Decreases the download count by one when called.
            </summary>
            <param name="fileBvin">The unique ID of the product file to decrease the download count for.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.ResetFileDownloadCount(System.String)">
            <summary>
                If called, the download count will be reset to zero for the specified product file.
            </summary>
            <param name="fileBvin">The unique ID of the product file.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.GetLineItem(System.Int64)">
            <summary>
                Returns a single line item matching the given ID.
            </summary>
            <param name="Id">The unique ID of the line item to find.</param>
            <returns>LineItem</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.ItemsAsITaxable">
            <summary>
                A converted copy of the line items list for taxable procedures.
            </summary>
            <returns>List of ITaxable</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.GetReplaceableTags(Hotcakes.Commerce.HccRequestContext)">
            <summary>
                A collection of the tokens and the replaceable content for email templates.
            </summary>
            <param name="context">An instance of the Hotcakes Request context.</param>
            <returns>List of HtmlTemplateTag</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.FullOrderStatusDescription">
            <summary>
                Generates the order header that tells the status of payment and shipping for merchants.
            </summary>
            <returns>String (e.g., "Paid / Partially Shipped")</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.MoveToNextStatus">
            <summary>
                Promotes the order to the next status or state of the order. For example, from Received to Ready for Shipment.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.MoveToPreviousStatus">
            <summary>
                Demotes the order to the next status or state of the order. For example, from Ready for Shipment to Received.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.GetLineItemValuesAccountingForOrderDiscounts">
            <summary>
                Returns a listing of the line items and totals in the current order.
            </summary>
            <returns>iDictionary of Line Item ID and a running total.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.ClearTaxes">
            <summary>
                Resets the taxes for all line items and the order to zero for recalculation.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.ClearShippingPricesAndMethod">
            <summary>
                Removes all calculated shipping information for re-calculation.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.ClearDiscounts">
            <summary>
                Removes all discount information from the order for recalculation.
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.EvaluateShippingStatus">
            <summary>
                Evaluates all line items in the order to determine the current shippment status.
            </summary>
            <returns>OrderShippingStatus</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.ToDto">
            <summary>
                Allows you to convert the current order object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of OrderDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.Order.FromDTO(Hotcakes.CommerceDTO.v1.Orders.OrderDTO)">
            <summary>
                Allows you to populate the current order object using an OrderDTO instance
            </summary>
            <param name="dto">An instance of the order from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.Coupons">
            <summary>
                Contains a list of Coupons that have been applied to this order.
            </summary>
            <returns>List of OrderCoupon</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.Items">
            <summary>
                Contains a list of Line Items (products) that are in the order.
            </summary>
            <returns>List of LineItem</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.Notes">
            <summary>
                Contains a complete list of public and private notes that have been saved to the order.
            </summary>
            <returns>List of OrderNote</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.Packages">
            <summary>
                Contains a list of packages that each are a record of shipment for one or more line items.
            </summary>
            <returns>List of OrderPackage</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.Returns">
            <summary>
                Contains a list of refunds for the order.
            </summary>
            <returns>List of RMA</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.Id">
            <summary>
                This is an ID that is used primarily for the SQL data source.
            </summary>
            <returns>Integer</returns>
            <remarks>
                not used as primary key, only for insert order in SQL pages
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.bvin">
            <summary>
                This is the primary key to uniquely identify a single order.
            </summary>
            <returns>String (GUID)</returns>
            <remarks>Primary Key</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.StoreId">
            <summary>
                The identifier of the store that this order belongs to.
            </summary>
            <returns>Long</returns>
            <remarks>
                This value will always be the same, except in multi-tenant store scenarios.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.LastUpdatedUtc">
            <summary>
                The date and time that the order was last updated, in UTC format
            </summary>
            <returns>DateTime (UTC)</returns>
            <remarks>UTC</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TimeOfOrderUtc">
            <summary>
                The date and time that the order was placed, in UTC format
            </summary>
            <returns>DateTime (UTC)</returns>
            <remarks>UTC</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.OrderNumber">
            <summary>
                This is a text version of the order number and is assigned once the order reaches the "ToDo" state.
            </summary>
            <returns>String (numeric or empty)</returns>
            <remarks>
                This is assigned during the AssignOrderNumber() workflow task. If a value doesn't exist, this order is likely
                an abandoned cart.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.ThirdPartyOrderId">
            <summary>
                This property is primarily used for third party payment providers and other integrations, such as PayPal Express
                that have their own order numbers.
            </summary>
            <returns>String - the format depends on the third party integration</returns>
            <remarks>Currently used with the out of the box PayPal Express payment provider.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.UserEmail">
            <summary>
                The email address of the person placing the order, usually pulled from the user account.
            </summary>
            <returns>String (email address)</returns>
            <remarks>Either pulled from the user account email address property, or from the guest checkout email address field.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.UserID">
            <summary>
                The ID that will map to the user in the Hotcakes customer repository.
            </summary>
            <returns>String (integer ID of the user)</returns>
            <remarks>This does not match the CMS UserID. If empty, this is likely a guest checkout.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.UserDeviceType">
            <summary>
                The device that user used to access site.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.IsAbandonedEmailSent">
            <summary>
                Determines if email to user about abandoned cart sent
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.CustomProperties">
            <summary>
                A collection of custom properties that contain additional meta data about the order.
            </summary>
            <returns>CustomPropertyCollection</returns>
            <remarks>This is an extension point for developers to use for integration, as well as Hotcakes related meta data.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.UsedCulture">
            <summary>
                Gets or sets the culture that was last used when creating the order
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.PaymentStatus">
            <summary>
                This is an object that describes the current status of payment for the order.
            </summary>
            <returns>OrderPaymentStatus</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.ShippingStatus">
            <summary>
                This is an object that describes the current shipping status of the order.
            </summary>
            <returns>OrderShippingStatus</returns>
            <remarks>
                This value should not be manually set, as it will be set conditionally based upon actions taken by the
                merchant.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.IsPlaced">
            <summary>
                The order is not placed until the order is submitted from "New" to the "ToDo" state.
            </summary>
            <returns>Boolean</returns>
            <remarks>
                This value should not be changed manually. The value will always return true for orders that successfully are
                processed during checkout.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.StatusCode">
            <summary>
                This is the ID of the payment status code of the order.
            </summary>
            <returns>String (GUID)</returns>
            <remarks>This should match the bvin property of the OrderPaymentStatus object.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.StatusName">
            <summary>
                The name of the status that matches the StatusCode property as well as the store administration views.
            </summary>
            <returns>String</returns>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.BillingAddress">
            <summary>
                Address object for who is being billed for the order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.ShippingAddress">
            <summary>
                Address object for who is receiving the order, when shipped.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TotalTax">
            <summary>
                Total amount of tax for the order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.ItemsTax">
            <summary>
                Total amount of tax for the line items in the order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.ShippingTax">
            <summary>
                Amount of tax for shipping.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.ShippingTaxRate">
            <summary>
                The tax rate for shipping.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TotalShippingBeforeDiscountsOverride">
            <summary>
                Amount from the order custom properties to override the total before discounts.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TotalShippingBeforeDiscounts">
            <summary>
                Total amount for shipping before discounts are applied.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TotalShippingAfterDiscounts">
            <summary>
                Total amount for shipping after discounts are applied.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TotalHandling">
            <summary>
                Total amount for handling charges.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.OrderDiscountDetails">
            <summary>
                Contains a listing of the discounts that have been applied to this order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.ShippingDiscountDetails">
            <summary>
                A listing of all of the discounts for the shipping only.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.AffiliateID">
            <summary>
                If the order is being attributed to an affiliate, this ID will not be null.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.FraudScore">
            <summary>
                The value determined by the fraud screening configuration.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.Instructions">
            <summary>
                Special instructions saved by the customer that submitted the order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.ShippingMethodId">
            <summary>
                Unique ID of the chosen shipping method.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.ShippingMethodDisplayName">
            <summary>
                A localized display name matching the shipping method ID.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.ShippingProviderId">
            <summary>
                Unique ID of the provider to be used for shipment.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.ShippingProviderServiceCode">
            <summary>
                A code used by the shipping provider to indicate the type of service.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.ApplyVATRules">
            <summary>
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.HasAnyNonSaleDiscounts">
            <summary>
                Returns a status of whether or not there are any sale discounts in the order line items.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TotalOrderBeforeDiscounts">
            <summary>
                The order total without discounts applied, but with user supplied price line items included. This does not include
                shipping charges.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TotalOrderDiscounts">
            <summary>
                The sum of the discounts being applied to this order, excluding shipping discounts.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TotalOrderWithoutUserPricedProducts">
            <summary>
                Total amount of the order without user supplied price line items includes, but with discounts applied. This does
                not include shipping charges.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TotalOrderAfterDiscounts">
            <summary>
                Total amount of the order after discounts have been applied. This does not include shipping charges and discounts.
            </summary>
            <remarks>This value will never be less than zero.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TotalShippingDiscounts">
            <summary>
                Returns a sum of all of the shipping discounts applied to the order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TotalGrand">
            <summary>
                The order grand total that includes all discounts, shipping, and VAT.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.ShippingMethodUniqueKey">
            <summary>
                A unique key that represents a specific shipping rate returnd by a shipping provider.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.HasShippingItems">
            <summary>
                Allows you to determine if there are any shippable line items in the order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.HasShippingCharges">
            <summary>
                Gets a value indicating whether this instance has shipping charges.
            </summary>
            <value>
                <c>true</c> if this instance has shipping charges; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TotalQuantity">
            <summary>
                The sum of the quantity of all line items in the order.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TotalQuantityShipping">
            <summary>
                The sum total number of products in the order that are shippable.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.Order.TotalWeight">
            <summary>
                A grand total of the weight of the line items in the order.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Orders.OrderCoupon">
            <summary>
                This is the primary object that is used to manage all aspects of Order Coupon.
            </summary>
            <remarks>The REST API equivalent is OrderCouponDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderCoupon.System#IEquatable{Hotcakes#Commerce#Orders#OrderCoupon}#Equals(Hotcakes.Commerce.Orders.OrderCoupon)">
            <summary>
                Compares the given order coupon ID with the current order coupon ID to determine if they are the same coupon.
            </summary>
            <param name="other">OrderCoupon - a populated instance of the order coupon object.</param>
            <returns>Boolean - if true, the order coupon ID's match.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderCoupon.ToDto">
            <summary>
                Allows you to convert the current order coupon object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of OrderCouponDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderCoupon.FromDto(Hotcakes.CommerceDTO.v1.Orders.OrderCouponDTO)">
            <summary>
                Allows you to populate the current order coupon object using a OrderCouponDTO instance
            </summary>
            <param name="dto">An instance of the order coupon from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderCoupon.Id">
            <summary>
                The unique ID of the order coupon.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderCoupon.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderCoupon.LastUpdatedUtc">
            <summary>
                The last updated date is used for auditing purposes to know when the order coupon was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderCoupon.OrderBvin">
            <summary>
                The unique ID or bvin of the order that this order coupon belongs to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderCoupon.CouponCode">
            <summary>
                The coupon code for the current order coupon.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderCoupon.IsUsed">
            <summary>
                Defines whether or not the current order coupon has been used.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderCoupon.UserId">
            <summary>
                Records the user account ID that is using the coupon.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Orders.OrderNote">
            <summary>
                This is the primary object that is used to manage all aspects of Order Notes
            </summary>
            <remarks>The REST API equivalent is OrderNoteDTO.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderNote.ToDto">
            <summary>
                Allows you to convert the current order note object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of OrderNoteDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderNote.FromDto(Hotcakes.CommerceDTO.v1.Orders.OrderNoteDTO)">
            <summary>
                Allows you to populate the current order note object using a OrderNoteDTO instance
            </summary>
            <param name="dto">An instance of the order note from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderNote.Id">
            <summary>
                The unique ID of the current order note.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderNote.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderNote.LastUpdatedUtc">
            <summary>
                The last updated date is used for auditing purposes to know when the order note was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderNote.OrderID">
            <summary>
                The unique ID of the order that the current order note belongs to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderNote.AuditDate">
            <summary>
                Used for auditing purposes to know when the order note was created.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderNote.Note">
            <summary>
                The text that the note should contain, such as a message to the customer about shipping.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.OrderNote.IsPublic">
            <summary>
                If true, the note will be shown to the customer, otherwise only merchants will see the note.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Orders.RMA">
            <summary>
                This is the primary object that is used to manage all aspects of RMA.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.Bvin">
            <summary>
                The unique ID or bvin of the RMA
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.LastUpdatedUtc">
            <summary>
                The last updated date is used for auditing purposes to know when the RMA was last updated.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.OrderBvin">
            <summary>
                The unique ID or bvin of the order that this RMA is related to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.OrderNumber">
            <summary>
                The unique order number that merchants see in the store admin.
            </summary>
            <remarks>
                Order number is not automatically loaded, set it manually
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.Name">
            <summary>
                The name of the customer submitting the RMA.
            </summary>
            <remarks>
                This value is not really used in the application at this time.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.EmailAddress">
            <summary>
                The email address of the customer submitting the RMA>
            </summary>
            <remarks>
                This value is not really used in the application at this time.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.PhoneNumber">
            <summary>
                The phone number of the customer submitting the RMA.
            </summary>
            <remarks>
                This value is not really used in the application at this time.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.Comments">
            <summary>
                Useful comments about the RMA.
            </summary>
            <remarks>
                This value is not really used in the application at this time.
            </remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.Number">
            <summary>
                Unique identifier of the RMA for merchants and customers to use.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.DateOfReturnUtc">
            <summary>
                The date/time stamp of the return of the line item(s).
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.Items">
            <summary>
                A collection of the line items that are part of this RMA.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.Status">
            <summary>
                The status of the current RMA.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.StatusText">
            <summary>
                A human-readable version of the RMA status for display to merchants.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.TotalGrandRefundAmount">
            <summary>
                Grand total amount to be refunded to the customer, including line item, shipping, tax, and gift wrap.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.TotalRefundItemAmount">
            <summary>
                Refund amount of the line item(s).
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.TotalRefundShippingAmount">
            <summary>
                Refund amount of the shipping for the line item(s).
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.TotalRefundTaxAmount">
            <summary>
                Refund amount of the taxes for the line item(s).
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Orders.RMA.TotalRefundGiftWrapAmount">
            <summary>
                Refund amount of the gift wrapping for the line item(s).
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.HccRequestContext._current">
            <summary>
                Field that stores HccRequestContext when HttpContext.Current is null
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.HccRequestContext.Current">
            <summary>
                Gets or sets the current HccRequestContext.
            </summary>
            <value>
                The current HccRequestContext object.
            </value>
        </member>
        <member name="P:Hotcakes.Commerce.HccRequestContext.CurrentStore">
            <summary>
                Store that is currently being loaded and used.
            </summary>
            <value>
                A Store object. By default, this will be a "new" empty store object, to be populated later in other
                methods/classes.
            </value>
        </member>
        <member name="P:Hotcakes.Commerce.HccRequestContext.CurrentAccount">
            <summary>
                User that is visiting the store at this specific moment.
            </summary>
            <value>
                A CustomerAccount object. By default, this will be a NULL object, to be populated later in other methods/classes.
            </value>
        </member>
        <member name="P:Hotcakes.Commerce.HccRequestContext.MainContentCulture">
            <summary>
                Gets or sets culture of item translations that will be retrived from the database.
                This culture is not used for retrieving resources from resource files. Thread UI culture is used for that in that
                case.
                Separation of those concepts is an intentional step since it makes sense to distinguish Content culture and UI
                culture on admin.
                This can provide admins with ability to have UI in their native languge while copy/pasting content translations
                provided by translator.
            </summary>
            <value>
                The main content culture.
            </value>
        </member>
        <member name="P:Hotcakes.Commerce.HccRequestContext.FallbackContentCulture">
            <summary>
                Gets or sets culture of item translations that will be retrived from the database.
                This property specifies what culture have to be used if items has no translations in MainContentCulture.
                This culture is not used for retrieving resources from resource files. Thread UI culture is used for that in that
                case.
                Separation of those concepts is an intentional step since it makes sense to distinguish Content culture and UI
                culture on admin.
                This can provide admins with ability to have UI in their native languge while copy/pasting content translations
                provided by translator.
            </summary>
            <value>
                The fallback content culture.
            </value>
        </member>
        <member name="M:Hotcakes.Commerce.HotcakesApplication.SampleStoreDataExists">
            <summary>
                Use this method to see if any of the sample products or categories still exist in the store.
            </summary>
            <returns>If true, one or more sample products or categories are still in the store</returns>
        </member>
        <member name="T:Hotcakes.Commerce.Shipping.ShippableItem">
            <summary>
                This is the primary class used for all shippable items in the application
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Shipping.ShippableItem.FromXml(System.String)">
            <summary>
                Allows for this class to be populated from an XML data source.
            </summary>
            <param name="xml">String - the XML serialized form of the ShippingItem.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Shipping.ShippableItem.FromXml(System.Xml.XmlReader@)">
            <summary>
                Allows for this class to be populated from an XML data source.
            </summary>
            <param name="xr">An instance of an XML reader from which to populate this class.</param>
            <returns>If true, no errors occured and the class is populated.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Shipping.ShippableItem.ToXmlWriter(System.Xml.XmlWriter@)">
            <summary>
                This method allows for this class to be serialized into XML for use in other parts of the application and API.
            </summary>
            <param name="xw">A reference to an existing XmlWriter</param>
        </member>
        <member name="M:Hotcakes.Commerce.Shipping.ShippableItem.ToDto">
            <summary>
                Allows you to convert the current ShippableItem object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of ShippableItemDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Shipping.ShippableItem.FromDto(Hotcakes.CommerceDTO.v1.Shipping.ShippableItemDTO)">
            <summary>
                Allows you to populate the current ShippableItem object using a ShippableItemDTO instance
            </summary>
            <param name="dto">An instance of the ShippableItem from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Shipping.ShippableItem.IsNonShipping">
            <summary>
                If true, the associated product will not be shipped and therefore should not have shipping logic applied.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Shipping.ShippableItem.ExtraShipFee">
            <summary>
                If greater than zero, the specified fee should be added to the shipping fee presented to the customer.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Shipping.ShippableItem.Weight">
            <summary>
                The shippable weight of the product in pounds.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Shipping.ShippableItem.Length">
            <summary>
                The shippable length of the product in inches.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Shipping.ShippableItem.Width">
            <summary>
                The shippable width of the product in inches.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Shipping.ShippableItem.Height">
            <summary>
                The shippable height of the product in inches.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Shipping.ShippableItem.ShippingSource">
            <summary>
                This defines where the product will be shipped from.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Shipping.ShippableItem.ShippingSourceAddress">
            <summary>
                This property contains a collection of address information for the location that the product will be shipped from.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Shipping.ShippableItem.ShippingSourceId">
            <summary>
                This ID value should match a vendor or manufacture when that respective ShippingSource is specified.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Shipping.ShippableItem.ShipSeparately">
            <summary>
                If true, the associated product cannot be shipped with other products.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Shipping.ShippingMode">
            <summary>
                This enumeration is used to determine where a product will be shipped from.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Shipping.ShippingMode.None">
            <summary>
                This member should not be used.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Shipping.ShippingMode.ShipFromSite">
            <summary>
                If specified, this will have the product ship from the store address.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Shipping.ShippingMode.ShipFromVendor">
            <summary>
                This member dictates that the product will ship from the vendors address.
            </summary>
        </member>
        <member name="F:Hotcakes.Commerce.Shipping.ShippingMode.ShipFromManufacturer">
            <summary>
                When specified, the product will ship from the manufacturers address.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Taxes.Tax">
            <summary>
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Taxes.Tax.ToDto">
            <summary>
                Allows you to convert the current tax object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of TaxDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Taxes.Tax.FromDto(Hotcakes.CommerceDTO.v1.Taxes.TaxDTO)">
            <summary>
                Allows you to populate the current tax object using an TaxDTO instance
            </summary>
            <param name="dto">An instance of the tax from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Taxes.Tax.Id">
            <summary>
                The unique identifier or primary key of the tax object
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Taxes.Tax.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Taxes.Tax.CountryIsoAlpha3">
            <summary>
                A unique three letter code that identifies a country following the alpha 3 standard for this tax zone.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Taxes.Tax.RegionAbbreviation">
            <summary>
                The two letter abbreviation for the region matching this rax zone.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Taxes.Tax.PostalCode">
            <summary>
                The postal or zip code for the matching tax zone.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Taxes.Tax.TaxScheduleId">
            <summary>
                This is the ID of the tax schedule that this tax zone belongs to.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Taxes.Tax.Rate">
            <summary>
                This is the devimal representation of the tax rate for this zone.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Taxes.Tax.ShippingRate">
            <summary>
                This is the decimal representation of the tax rate to apply to this zone.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Taxes.Tax.ApplyToShipping">
            <summary>
                If true, the tax rate specified for ShippingRate will be applied to orders when they match this zone.
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Taxes.TaxSchedule">
            <summary>
                This is the main object used for tax schedules in the applied
            </summary>
            <remarks>The REST API equivalent of this class is TaxScheduleDTO</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Taxes.TaxSchedule.TaxScheduleId">
            <summary>
                0
                The unique identifier or primary key of the tax schedule object
            </summary>
            <returns>This simply returns the Id property and is necessary for the interface.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Taxes.TaxSchedule.TaxScheduleName">
            <summary>
                The name of the tax schedule. This will be seen in the administration areas.
            </summary>
            <returns>This simply returns the Name property and is necessary for the interface.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Taxes.TaxSchedule.TaxScheduleDefaultRate">
            <summary>
                This is used only for VAT implementations to help calculate the correct taxes per VAT rules.
            </summary>
            <returns>This simply returns the DefaultRate property and is necessary for the interface.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Taxes.TaxSchedule.TaxScheduleDefaultShippingRate">
            <summary>
                This is used only for VAT implementations to help calculate the correct taxes for shipping per VAT rules.
            </summary>
            <returns>This simply returns the DefaultShippingRate property and is necessary for the interface.</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Taxes.TaxSchedule.ToDto">
            <summary>
                Allows you to convert the current tax schedule object to the DTO equivalent for use with the REST API
            </summary>
            <returns>A new instance of TaxScheduleDTO</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Taxes.TaxSchedule.FromDto(Hotcakes.CommerceDTO.v1.Taxes.TaxScheduleDTO)">
            <summary>
                Allows you to populate the current tax schedule object using a TaxScheduleDTO instance
            </summary>
            <param name="dto">An instance of the tax schedule from the REST API</param>
        </member>
        <member name="P:Hotcakes.Commerce.Taxes.TaxSchedule.Id">
            <summary>
                The unique identifier or primary key of the tax schedule object
            </summary>
            <remarks>This is mapped to the TaxScheduleId property in this same class.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Taxes.TaxSchedule.StoreId">
            <summary>
                This is the ID of the Hotcakes store. Typically, this is 1, except in multi-tenant environments.
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Taxes.TaxSchedule.Name">
            <summary>
                The name of the tax schedule. This will be seen in the administration areas.
            </summary>
            <remarks>This is mapped to the TaxScheduleName property in this same class.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Taxes.TaxSchedule.DefaultRate">
            <summary>
                This is used only for VAT implementations to help calculate the correct taxes per VAT rules.
            </summary>
            <remarks>This is mapped to the TaxScheduleDefaultRate property in this same class.</remarks>
        </member>
        <member name="P:Hotcakes.Commerce.Taxes.TaxSchedule.DefaultShippingRate">
            <summary>
                This is used only for VAT implementations to help calculate the correct taxes for shipping per VAT rules.
            </summary>
            <remarks>This is mapped to the TaxScheduleDefaultShippingRate property in this same class.</remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderService.CurrentShoppingCart">
            <summary>
                The current shopping cart.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderService.EnsureShoppingCart">
            <summary>
                Ensures the shopping cart.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderService.AddItemToOrder(Hotcakes.Commerce.Orders.Order,Hotcakes.Commerce.Orders.LineItem)">
            <summary>
                Adds to cart.
            </summary>
            <param name="order">The order.</param>
            <param name="listItem">The list item.</param>
        </member>
        <member name="M:Hotcakes.Commerce.Orders.OrderService.CheckItemExistInOrder(Hotcakes.Commerce.Orders.Order,Hotcakes.Commerce.Orders.LineItem)">
            <summary>
                Check Item Exist In Cart
            </summary>
            <param name="order"></param>
            <param name="listItem"></param>
            <returns></returns>
        </member>
        <member name="M:Hotcakes.Commerce.Utilities.CreditCardValidator.CleanCardNumber(System.String)">
            <summary>
                Removes all non-digit characters from a credit card string
            </summary>
            <param name="rawCardNumber">input string containing user input</param>
            <returns>A string containing only the digit characters of the credit card number</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Utilities.CreditCardValidator.ValidateCard(System.String,System.String)">
            <summary>
                Validates that a given card number matches the format and mod10 formula for a given type
            </summary>
            <param name="rawCardNumber">Card number to check</param>
            <param name="cardType">
                Type of card to validate against (A = American Express, V = Visa, D = Discover, M = MasterCard,
                J = Japanese Credit Bureau, C = Diner's Club)
            </param>
            <returns></returns>
        </member>
        <member name="P:Hotcakes.Commerce.Utilities.CreditCardValidator.ErrorMessages">
            <summary>
                Holds the last error message reported by the validator
            </summary>
        </member>
        <member name="P:Hotcakes.Commerce.Utilities.CreditCardValidator.CardName">
            <summary>
                Holds the English name of the card type. For example: Visa
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Utilities.DateRange">
            <summary>
                Operates on "Local Time" by default. Not TimeZone Safe
            </summary>
        </member>
        <member name="T:Hotcakes.Commerce.Utilities.ImageHelper">
            <summary>
                This class helps generate HTML, paths, and other information for images used in the application
            </summary>
        </member>
        <member name="M:Hotcakes.Commerce.Utilities.ImageHelper.GenerateSwatchHtmlForProduct(Hotcakes.Commerce.Catalog.Product,Hotcakes.Commerce.HotcakesApplication)">
            <summary>
                This method will iterate through the specified swatches and emit the requisite HTML for each
            </summary>
            <param name="p">Product - an instance of the product to find swatches for</param>
            <param name="app">HotcakesApplicateion - an instance of the current store application object</param>
            <returns>String - the HTML to be used for rendering the swatches</returns>
            <remarks>
                If the swatch doesn't match an available swatch file, it will not be included in the HTML. Also, all swatch
                images must be PNG or GIF.
            </remarks>
        </member>
        <member name="M:Hotcakes.Commerce.Utilities.RandomNumbers.RandomInteger(System.Int32,System.Int32)">
            <summary>
                Generates a random integer that is between maxNumber and minNumber inclusive of maxNumber and minNumber
            </summary>
            <param name="maxNumber">The maximum possible value that the method will return</param>
            <param name="minNumber">The minimum possible value that the method will return</param>
            <returns>An integer between the max and min parameters inclusive of the parameters</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Utilities.RandomNumbers.RandomInteger(System.Int32,System.Int32,System.Int32)">
            <summary>
                Generates a random integer that is between maxNumber and minNumber inclusive of maxNumber and minNumber
            </summary>
            <param name="maxNumber">The maximum possible value that the method will return</param>
            <param name="minNumber">The minimum possible value that the method will return</param>
            <param name="seed">The random integer to use as a seed</param>
            <returns>An integer between the max and min parameters inclusive of the parameters</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Utilities.SampleData.IsSampleDataExist">
            <summary>
                Use this method to see if any of the sample products or categories still exist in the store.
            </summary>
            <returns>If true, one or more sample products or categories are still in the store</returns>
        </member>
        <member name="M:Hotcakes.Commerce.Utilities.Translators.DataTableToArray(System.Data.DataTable)">
            <summary>
                Converts a single column DataTable into an Array of Strings
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="T:Hotcakes.Commerce.WebAppSettings">
            <summary>
                These are application wide settings and apply to all stores in the system
            </summary>
        </member>
    </members>
</doc>
